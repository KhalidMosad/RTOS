
AVR_FreeRtos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003baa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00003baa  00003c3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000703  00800070  00800070  00003c4e  2**0
                  ALLOC
  3 .stab         00004ba8  00000000  00000000  00003c50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002d8e  00000000  00000000  000087f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b586  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b6c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b836  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d47f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e36a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f118  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f278  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f505  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fcd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 55 0e 	call	0x1caa	; 0x1caa <main>
      8a:	0c 94 d3 1d 	jmp	0x3ba6	; 0x3ba6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e6       	ldi	r26, 0x65	; 101
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 89 1d 	jmp	0x3b12	; 0x3b12 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a5 1d 	jmp	0x3b4a	; 0x3b4a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 89 1d 	jmp	0x3b12	; 0x3b12 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a5 1d 	jmp	0x3b4a	; 0x3b4a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e6       	ldi	r24, 0x65	; 101
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 89 1d 	jmp	0x3b12	; 0x3b12 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a5 1d 	jmp	0x3b4a	; 0x3b4a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 89 1d 	jmp	0x3b12	; 0x3b12 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a5 1d 	jmp	0x3b4a	; 0x3b4a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 89 1d 	jmp	0x3b12	; 0x3b12 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a5 1d 	jmp	0x3b4a	; 0x3b4a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8d 1d 	jmp	0x3b1a	; 0x3b1a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a9 1d 	jmp	0x3b52	; 0x3b52 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_VidSetPinDirection>:
#include"DIO_register.h"
#include"DIO_config.h"
#include"DIO_interface.h"

void DIO_VidSetPinDirection		(u8 copy_u8port, u8 copy_U8pin, u8 copy_U8state)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if(OUTPUT==copy_U8state)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_VidSetPinDirection+0x22>
     b66:	6f c0       	rjmp	.+222    	; 0xc46 <DIO_VidSetPinDirection+0x100>
	{
		switch (copy_u8port)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <DIO_VidSetPinDirection+0x88>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_VidSetPinDirection+0x4a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <DIO_VidSetPinDirection+0x60>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	71 f1       	breq	.+92     	; 0xbf6 <DIO_VidSetPinDirection+0xb0>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f1       	breq	.+122    	; 0xc1e <DIO_VidSetPinDirection+0xd8>
     ba4:	c7 c0       	rjmp	.+398    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
		{
			case PORTA:SET_BIT(DDRA, copy_U8pin); break;
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_VidSetPinDirection+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_VidSetPinDirection+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	b3 c0       	rjmp	.+358    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case PORTB:SET_BIT(DDRB, copy_U8pin); break;
     bce:	a7 e3       	ldi	r26, 0x37	; 55
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e7 e3       	ldi	r30, 0x37	; 55
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_VidSetPinDirection+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_VidSetPinDirection+0xa2>
     bf0:	84 2b       	or	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	9f c0       	rjmp	.+318    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case PORTC:SET_BIT(DDRC, copy_U8pin); break;
     bf6:	a4 e3       	ldi	r26, 0x34	; 52
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e4 e3       	ldi	r30, 0x34	; 52
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_VidSetPinDirection+0xce>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_VidSetPinDirection+0xca>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	8b c0       	rjmp	.+278    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case PORTD:SET_BIT(DDRD, copy_U8pin); break;
     c1e:	a1 e3       	ldi	r26, 0x31	; 49
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e1 e3       	ldi	r30, 0x31	; 49
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_VidSetPinDirection+0xf6>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_VidSetPinDirection+0xf2>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	77 c0       	rjmp	.+238    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
	
		}	
	}
	else if(INPUT==copy_U8state)
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <DIO_VidSetPinDirection+0x108>
     c4c:	73 c0       	rjmp	.+230    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(copy_u8port)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3d 83       	std	Y+5, r19	; 0x05
     c56:	2c 83       	std	Y+4, r18	; 0x04
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f1       	breq	.+86     	; 0xcb8 <DIO_VidSetPinDirection+0x172>
     c62:	2c 81       	ldd	r18, Y+4	; 0x04
     c64:	3d 81       	ldd	r19, Y+5	; 0x05
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	2c f4       	brge	.+10     	; 0xc76 <DIO_VidSetPinDirection+0x130>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f0       	breq	.+26     	; 0xc8e <DIO_VidSetPinDirection+0x148>
     c74:	5f c0       	rjmp	.+190    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	3d 81       	ldd	r19, Y+5	; 0x05
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	89 f1       	breq	.+98     	; 0xce2 <DIO_VidSetPinDirection+0x19c>
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <DIO_VidSetPinDirection+0x146>
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <DIO_VidSetPinDirection+0x1c6>
     c8c:	53 c0       	rjmp	.+166    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
		{
			case PORTA:CLR_BIT(DDRA, copy_U8pin); break;
     c8e:	aa e3       	ldi	r26, 0x3A	; 58
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ea e3       	ldi	r30, 0x3A	; 58
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_VidSetPinDirection+0x166>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_VidSetPinDirection+0x162>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	3e c0       	rjmp	.+124    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case PORTB:CLR_BIT(DDRB, copy_U8pin); break;
     cb8:	a7 e3       	ldi	r26, 0x37	; 55
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e7 e3       	ldi	r30, 0x37	; 55
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_VidSetPinDirection+0x190>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_VidSetPinDirection+0x18c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	29 c0       	rjmp	.+82     	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
		    case PORTC:CLR_BIT(DDRC, copy_U8pin); break;
     ce2:	a4 e3       	ldi	r26, 0x34	; 52
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e4 e3       	ldi	r30, 0x34	; 52
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_VidSetPinDirection+0x1ba>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_VidSetPinDirection+0x1b6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
		    case PORTD:CLR_BIT(DDRD, copy_U8pin); break;
     d0c:	a1 e3       	ldi	r26, 0x31	; 49
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e1 e3       	ldi	r30, 0x31	; 49
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_VidSetPinDirection+0x1e4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_VidSetPinDirection+0x1e0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
	else
	{
		
	}
	
}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue			(u8 copy_u8port, u8 copy_U8pin, u8 copy_U8value)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
	if(HIGH==copy_U8value)
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	09 f0       	breq	.+2      	; 0xd68 <DIO_VidSetPinValue+0x22>
     d66:	6f c0       	rjmp	.+222    	; 0xe46 <DIO_VidSetPinValue+0x100>
	{
		switch (copy_u8port)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3f 83       	std	Y+7, r19	; 0x07
     d70:	2e 83       	std	Y+6, r18	; 0x06
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	49 f1       	breq	.+82     	; 0xdce <DIO_VidSetPinValue+0x88>
     d7c:	2e 81       	ldd	r18, Y+6	; 0x06
     d7e:	3f 81       	ldd	r19, Y+7	; 0x07
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	2c f4       	brge	.+10     	; 0xd90 <DIO_VidSetPinValue+0x4a>
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	9f 81       	ldd	r25, Y+7	; 0x07
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	61 f0       	breq	.+24     	; 0xda6 <DIO_VidSetPinValue+0x60>
     d8e:	d2 c0       	rjmp	.+420    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
     d90:	2e 81       	ldd	r18, Y+6	; 0x06
     d92:	3f 81       	ldd	r19, Y+7	; 0x07
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	71 f1       	breq	.+92     	; 0xdf6 <DIO_VidSetPinValue+0xb0>
     d9a:	8e 81       	ldd	r24, Y+6	; 0x06
     d9c:	9f 81       	ldd	r25, Y+7	; 0x07
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	91 05       	cpc	r25, r1
     da2:	e9 f1       	breq	.+122    	; 0xe1e <DIO_VidSetPinValue+0xd8>
     da4:	c7 c0       	rjmp	.+398    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
		{
			case PORTA:SET_BIT(PORT_A, copy_U8pin); break;
     da6:	ab e3       	ldi	r26, 0x3B	; 59
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	eb e3       	ldi	r30, 0x3B	; 59
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_VidSetPinValue+0x7e>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_VidSetPinValue+0x7a>
     dc8:	84 2b       	or	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	b3 c0       	rjmp	.+358    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
			case PORTB:SET_BIT(PORT_B, copy_U8pin); break;
     dce:	a8 e3       	ldi	r26, 0x38	; 56
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e8 e3       	ldi	r30, 0x38	; 56
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 2e       	mov	r0, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_VidSetPinValue+0xa6>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_VidSetPinValue+0xa2>
     df0:	84 2b       	or	r24, r20
     df2:	8c 93       	st	X, r24
     df4:	9f c0       	rjmp	.+318    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
			case PORTC:SET_BIT(PORT_C, copy_U8pin); break;
     df6:	a5 e3       	ldi	r26, 0x35	; 53
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e5 e3       	ldi	r30, 0x35	; 53
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_VidSetPinValue+0xce>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_VidSetPinValue+0xca>
     e18:	84 2b       	or	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	8b c0       	rjmp	.+278    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
			case PORTD:SET_BIT(PORT_D, copy_U8pin); break;
     e1e:	a2 e3       	ldi	r26, 0x32	; 50
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e2 e3       	ldi	r30, 0x32	; 50
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_VidSetPinValue+0xf6>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_VidSetPinValue+0xf2>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	77 c0       	rjmp	.+238    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
	
		}	
	}
	else if(LOW==copy_U8value)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	88 23       	and	r24, r24
     e4a:	09 f0       	breq	.+2      	; 0xe4e <DIO_VidSetPinValue+0x108>
     e4c:	73 c0       	rjmp	.+230    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
	{
		switch(copy_u8port)
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3d 83       	std	Y+5, r19	; 0x05
     e56:	2c 83       	std	Y+4, r18	; 0x04
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	91 05       	cpc	r25, r1
     e60:	59 f1       	breq	.+86     	; 0xeb8 <DIO_VidSetPinValue+0x172>
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	22 30       	cpi	r18, 0x02	; 2
     e68:	31 05       	cpc	r19, r1
     e6a:	2c f4       	brge	.+10     	; 0xe76 <DIO_VidSetPinValue+0x130>
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	69 f0       	breq	.+26     	; 0xe8e <DIO_VidSetPinValue+0x148>
     e74:	5f c0       	rjmp	.+190    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
     e76:	2c 81       	ldd	r18, Y+4	; 0x04
     e78:	3d 81       	ldd	r19, Y+5	; 0x05
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	89 f1       	breq	.+98     	; 0xee2 <DIO_VidSetPinValue+0x19c>
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	9d 81       	ldd	r25, Y+5	; 0x05
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	91 05       	cpc	r25, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <DIO_VidSetPinValue+0x146>
     e8a:	40 c0       	rjmp	.+128    	; 0xf0c <DIO_VidSetPinValue+0x1c6>
     e8c:	53 c0       	rjmp	.+166    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
		{
			case PORTA:CLR_BIT(PORT_A, copy_U8pin); break;
     e8e:	ab e3       	ldi	r26, 0x3B	; 59
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e3       	ldi	r30, 0x3B	; 59
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_VidSetPinValue+0x166>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_VidSetPinValue+0x162>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	3e c0       	rjmp	.+124    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
			case PORTB:CLR_BIT(PORT_B, copy_U8pin); break;
     eb8:	a8 e3       	ldi	r26, 0x38	; 56
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e8 e3       	ldi	r30, 0x38	; 56
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_VidSetPinValue+0x190>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_VidSetPinValue+0x18c>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	29 c0       	rjmp	.+82     	; 0xf34 <DIO_VidSetPinValue+0x1ee>
		    case PORTC:CLR_BIT(PORT_C, copy_U8pin); break;
     ee2:	a5 e3       	ldi	r26, 0x35	; 53
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e3       	ldi	r30, 0x35	; 53
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_VidSetPinValue+0x1ba>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_VidSetPinValue+0x1b6>
     f04:	80 95       	com	r24
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <DIO_VidSetPinValue+0x1ee>
		    case PORTD:CLR_BIT(PORT_D, copy_U8pin); break;
     f0c:	a2 e3       	ldi	r26, 0x32	; 50
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e2 e3       	ldi	r30, 0x32	; 50
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_VidSetPinValue+0x1e4>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_VidSetPinValue+0x1e0>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
		
	}	
	
	
	
}
     f34:	27 96       	adiw	r28, 0x07	; 7
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <DIO_VidGetPinValue>:


u8 DIO_VidGetPinValue			(u8 copy_u8port, u8 Copy_U8Pin)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <DIO_VidGetPinValue+0x6>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <DIO_VidGetPinValue+0x8>
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	8a 83       	std	Y+2, r24	; 0x02
     f56:	6b 83       	std	Y+3, r22	; 0x03
	u8 Lcal_U8PinResult=0;
     f58:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3d 83       	std	Y+5, r19	; 0x05
     f62:	2c 83       	std	Y+4, r18	; 0x04
     f64:	4c 81       	ldd	r20, Y+4	; 0x04
     f66:	5d 81       	ldd	r21, Y+5	; 0x05
     f68:	41 30       	cpi	r20, 0x01	; 1
     f6a:	51 05       	cpc	r21, r1
     f6c:	41 f1       	breq	.+80     	; 0xfbe <DIO_VidGetPinValue+0x78>
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	91 05       	cpc	r25, r1
     f76:	34 f4       	brge	.+12     	; 0xf84 <DIO_VidGetPinValue+0x3e>
     f78:	2c 81       	ldd	r18, Y+4	; 0x04
     f7a:	3d 81       	ldd	r19, Y+5	; 0x05
     f7c:	21 15       	cp	r18, r1
     f7e:	31 05       	cpc	r19, r1
     f80:	61 f0       	breq	.+24     	; 0xf9a <DIO_VidGetPinValue+0x54>
     f82:	52 c0       	rjmp	.+164    	; 0x1028 <DIO_VidGetPinValue+0xe2>
     f84:	4c 81       	ldd	r20, Y+4	; 0x04
     f86:	5d 81       	ldd	r21, Y+5	; 0x05
     f88:	42 30       	cpi	r20, 0x02	; 2
     f8a:	51 05       	cpc	r21, r1
     f8c:	51 f1       	breq	.+84     	; 0xfe2 <DIO_VidGetPinValue+0x9c>
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	91 05       	cpc	r25, r1
     f96:	b9 f1       	breq	.+110    	; 0x1006 <DIO_VidGetPinValue+0xc0>
     f98:	47 c0       	rjmp	.+142    	; 0x1028 <DIO_VidGetPinValue+0xe2>

			case PORTA :		Lcal_U8PinResult=GET_BIT(PINA,Copy_U8Pin);	        break;
     f9a:	e9 e3       	ldi	r30, 0x39	; 57
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a9 01       	movw	r20, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_VidGetPinValue+0x6c>
     fae:	55 95       	asr	r21
     fb0:	47 95       	ror	r20
     fb2:	8a 95       	dec	r24
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_VidGetPinValue+0x68>
     fb6:	ca 01       	movw	r24, r20
     fb8:	81 70       	andi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	35 c0       	rjmp	.+106    	; 0x1028 <DIO_VidGetPinValue+0xe2>
			case PORTB :		Lcal_U8PinResult=GET_BIT(PINB,Copy_U8Pin); 		    break;
     fbe:	e6 e3       	ldi	r30, 0x36	; 54
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_VidGetPinValue+0x90>
     fd2:	55 95       	asr	r21
     fd4:	47 95       	ror	r20
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_VidGetPinValue+0x8c>
     fda:	ca 01       	movw	r24, r20
     fdc:	81 70       	andi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	23 c0       	rjmp	.+70     	; 0x1028 <DIO_VidGetPinValue+0xe2>
			case PORTC :		Lcal_U8PinResult=GET_BIT(PINC,Copy_U8Pin);			break;
     fe2:	e3 e3       	ldi	r30, 0x33	; 51
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a9 01       	movw	r20, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_VidGetPinValue+0xb4>
     ff6:	55 95       	asr	r21
     ff8:	47 95       	ror	r20
     ffa:	8a 95       	dec	r24
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_VidGetPinValue+0xb0>
     ffe:	ca 01       	movw	r24, r20
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	11 c0       	rjmp	.+34     	; 0x1028 <DIO_VidGetPinValue+0xe2>
			case PORTD :		Lcal_U8PinResult=GET_BIT(PIND,Copy_U8Pin);			break;
    1006:	e0 e3       	ldi	r30, 0x30	; 48
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a9 01       	movw	r20, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_VidGetPinValue+0xd8>
    101a:	55 95       	asr	r21
    101c:	47 95       	ror	r20
    101e:	8a 95       	dec	r24
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_VidGetPinValue+0xd4>
    1022:	ca 01       	movw	r24, r20
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PinResult);
    1028:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection	(u8 copy_u8port, u8 copy_U8state)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <DIO_VidSetPortDirection+0x6>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <DIO_VidSetPortDirection+0x8>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <DIO_VidSetPortDirection+0xa>
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	6a 83       	std	Y+2, r22	; 0x02
	
	if(OUTPUT==copy_U8state)
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	99 f5       	brne	.+102    	; 0x10b8 <DIO_VidSetPortDirection+0x7e>
	{
		switch (copy_u8port)
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	3e 83       	std	Y+6, r19	; 0x06
    105a:	2d 83       	std	Y+5, r18	; 0x05
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	91 05       	cpc	r25, r1
    1064:	d1 f0       	breq	.+52     	; 0x109a <DIO_VidSetPortDirection+0x60>
    1066:	2d 81       	ldd	r18, Y+5	; 0x05
    1068:	3e 81       	ldd	r19, Y+6	; 0x06
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	2c f4       	brge	.+10     	; 0x107a <DIO_VidSetPortDirection+0x40>
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	61 f0       	breq	.+24     	; 0x1090 <DIO_VidSetPortDirection+0x56>
    1078:	50 c0       	rjmp	.+160    	; 0x111a <DIO_VidSetPortDirection+0xe0>
    107a:	2d 81       	ldd	r18, Y+5	; 0x05
    107c:	3e 81       	ldd	r19, Y+6	; 0x06
    107e:	22 30       	cpi	r18, 0x02	; 2
    1080:	31 05       	cpc	r19, r1
    1082:	81 f0       	breq	.+32     	; 0x10a4 <DIO_VidSetPortDirection+0x6a>
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	9e 81       	ldd	r25, Y+6	; 0x06
    1088:	83 30       	cpi	r24, 0x03	; 3
    108a:	91 05       	cpc	r25, r1
    108c:	81 f0       	breq	.+32     	; 0x10ae <DIO_VidSetPortDirection+0x74>
    108e:	45 c0       	rjmp	.+138    	; 0x111a <DIO_VidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_OUTPUT		; break;
    1090:	ea e3       	ldi	r30, 0x3A	; 58
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	80 83       	st	Z, r24
    1098:	40 c0       	rjmp	.+128    	; 0x111a <DIO_VidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_OUTPUT		; break;
    109a:	e7 e3       	ldi	r30, 0x37	; 55
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	80 83       	st	Z, r24
    10a2:	3b c0       	rjmp	.+118    	; 0x111a <DIO_VidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_OUTPUT		; break;
    10a4:	e4 e3       	ldi	r30, 0x34	; 52
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	80 83       	st	Z, r24
    10ac:	36 c0       	rjmp	.+108    	; 0x111a <DIO_VidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_OUTPUT		; break;
    10ae:	e1 e3       	ldi	r30, 0x31	; 49
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	8f ef       	ldi	r24, 0xFF	; 255
    10b4:	80 83       	st	Z, r24
    10b6:	31 c0       	rjmp	.+98     	; 0x111a <DIO_VidSetPortDirection+0xe0>
	
		}	
	}
	else if(INPUT==copy_U8state)
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	88 23       	and	r24, r24
    10bc:	71 f5       	brne	.+92     	; 0x111a <DIO_VidSetPortDirection+0xe0>
	{
		switch(copy_u8port)
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	3c 83       	std	Y+4, r19	; 0x04
    10c6:	2b 83       	std	Y+3, r18	; 0x03
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	91 05       	cpc	r25, r1
    10d0:	c9 f0       	breq	.+50     	; 0x1104 <DIO_VidSetPortDirection+0xca>
    10d2:	2b 81       	ldd	r18, Y+3	; 0x03
    10d4:	3c 81       	ldd	r19, Y+4	; 0x04
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	2c f4       	brge	.+10     	; 0x10e6 <DIO_VidSetPortDirection+0xac>
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	61 f0       	breq	.+24     	; 0x10fc <DIO_VidSetPortDirection+0xc2>
    10e4:	1a c0       	rjmp	.+52     	; 0x111a <DIO_VidSetPortDirection+0xe0>
    10e6:	2b 81       	ldd	r18, Y+3	; 0x03
    10e8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	71 f0       	breq	.+28     	; 0x110c <DIO_VidSetPortDirection+0xd2>
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	91 05       	cpc	r25, r1
    10f8:	69 f0       	breq	.+26     	; 0x1114 <DIO_VidSetPortDirection+0xda>
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <DIO_VidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_INPUT		; break;
    10fc:	ea e3       	ldi	r30, 0x3A	; 58
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	10 82       	st	Z, r1
    1102:	0b c0       	rjmp	.+22     	; 0x111a <DIO_VidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_INPUT		; break;
    1104:	e7 e3       	ldi	r30, 0x37	; 55
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	10 82       	st	Z, r1
    110a:	07 c0       	rjmp	.+14     	; 0x111a <DIO_VidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_INPUT		; break;
    110c:	e4 e3       	ldi	r30, 0x34	; 52
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	10 82       	st	Z, r1
    1112:	03 c0       	rjmp	.+6      	; 0x111a <DIO_VidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_INPUT		; break;
    1114:	e1 e3       	ldi	r30, 0x31	; 49
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	10 82       	st	Z, r1
	{
		
	}
	
	
}
    111a:	26 96       	adiw	r28, 0x06	; 6
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <DIO_VidSetPortValue>:
void DIO_VidSetPortValue		(u8 copy_u8port, u8 copy_U8value)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	00 d0       	rcall	.+0      	; 0x1132 <DIO_VidSetPortValue+0x6>
    1132:	00 d0       	rcall	.+0      	; 0x1134 <DIO_VidSetPortValue+0x8>
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	6a 83       	std	Y+2, r22	; 0x02
		
		switch (copy_u8port)
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	3c 83       	std	Y+4, r19	; 0x04
    1144:	2b 83       	std	Y+3, r18	; 0x03
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	91 05       	cpc	r25, r1
    114e:	d1 f0       	breq	.+52     	; 0x1184 <DIO_VidSetPortValue+0x58>
    1150:	2b 81       	ldd	r18, Y+3	; 0x03
    1152:	3c 81       	ldd	r19, Y+4	; 0x04
    1154:	22 30       	cpi	r18, 0x02	; 2
    1156:	31 05       	cpc	r19, r1
    1158:	2c f4       	brge	.+10     	; 0x1164 <DIO_VidSetPortValue+0x38>
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	9c 81       	ldd	r25, Y+4	; 0x04
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	61 f0       	breq	.+24     	; 0x117a <DIO_VidSetPortValue+0x4e>
    1162:	1e c0       	rjmp	.+60     	; 0x11a0 <DIO_VidSetPortValue+0x74>
    1164:	2b 81       	ldd	r18, Y+3	; 0x03
    1166:	3c 81       	ldd	r19, Y+4	; 0x04
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	31 05       	cpc	r19, r1
    116c:	81 f0       	breq	.+32     	; 0x118e <DIO_VidSetPortValue+0x62>
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	83 30       	cpi	r24, 0x03	; 3
    1174:	91 05       	cpc	r25, r1
    1176:	81 f0       	breq	.+32     	; 0x1198 <DIO_VidSetPortValue+0x6c>
    1178:	13 c0       	rjmp	.+38     	; 0x11a0 <DIO_VidSetPortValue+0x74>
		{
			case PORTA:PORT_A=copy_U8value		; break;
    117a:	eb e3       	ldi	r30, 0x3B	; 59
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	80 83       	st	Z, r24
    1182:	0e c0       	rjmp	.+28     	; 0x11a0 <DIO_VidSetPortValue+0x74>
			case PORTB:PORT_B=copy_U8value		; break;
    1184:	e8 e3       	ldi	r30, 0x38	; 56
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	80 83       	st	Z, r24
    118c:	09 c0       	rjmp	.+18     	; 0x11a0 <DIO_VidSetPortValue+0x74>
			case PORTC:PORT_C=copy_U8value		; break;
    118e:	e5 e3       	ldi	r30, 0x35	; 53
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	80 83       	st	Z, r24
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <DIO_VidSetPortValue+0x74>
			case PORTD:PORT_D=copy_U8value		; break;
    1198:	e2 e3       	ldi	r30, 0x32	; 50
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	80 83       	st	Z, r24
		}	
	
	
	
	
}
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <DIO_VidTogglePin>:

void DIO_VidTogglePin			(u8 copy_u8port, u8 copy_U8pin)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <DIO_VidTogglePin+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <DIO_VidTogglePin+0x8>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	6a 83       	std	Y+2, r22	; 0x02

		switch (copy_u8port)
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	3c 83       	std	Y+4, r19	; 0x04
    11c6:	2b 83       	std	Y+3, r18	; 0x03
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	91 05       	cpc	r25, r1
    11d0:	49 f1       	breq	.+82     	; 0x1224 <DIO_VidTogglePin+0x76>
    11d2:	2b 81       	ldd	r18, Y+3	; 0x03
    11d4:	3c 81       	ldd	r19, Y+4	; 0x04
    11d6:	22 30       	cpi	r18, 0x02	; 2
    11d8:	31 05       	cpc	r19, r1
    11da:	2c f4       	brge	.+10     	; 0x11e6 <DIO_VidTogglePin+0x38>
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	61 f0       	breq	.+24     	; 0x11fc <DIO_VidTogglePin+0x4e>
    11e4:	5a c0       	rjmp	.+180    	; 0x129a <DIO_VidTogglePin+0xec>
    11e6:	2b 81       	ldd	r18, Y+3	; 0x03
    11e8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	31 05       	cpc	r19, r1
    11ee:	71 f1       	breq	.+92     	; 0x124c <DIO_VidTogglePin+0x9e>
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	83 30       	cpi	r24, 0x03	; 3
    11f6:	91 05       	cpc	r25, r1
    11f8:	e9 f1       	breq	.+122    	; 0x1274 <DIO_VidTogglePin+0xc6>
    11fa:	4f c0       	rjmp	.+158    	; 0x129a <DIO_VidTogglePin+0xec>
		{
					case PORTA:TOG_BIT(PORT_A, copy_U8pin); break;
    11fc:	ab e3       	ldi	r26, 0x3B	; 59
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	eb e3       	ldi	r30, 0x3B	; 59
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_VidTogglePin+0x6c>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <DIO_VidTogglePin+0x68>
    121e:	84 27       	eor	r24, r20
    1220:	8c 93       	st	X, r24
    1222:	3b c0       	rjmp	.+118    	; 0x129a <DIO_VidTogglePin+0xec>
					case PORTB:TOG_BIT(PORT_B, copy_U8pin); break;
    1224:	a8 e3       	ldi	r26, 0x38	; 56
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e8 e3       	ldi	r30, 0x38	; 56
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_VidTogglePin+0x94>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_VidTogglePin+0x90>
    1246:	84 27       	eor	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	27 c0       	rjmp	.+78     	; 0x129a <DIO_VidTogglePin+0xec>
					case PORTC:TOG_BIT(PORT_C, copy_U8pin); break;
    124c:	a5 e3       	ldi	r26, 0x35	; 53
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e5 e3       	ldi	r30, 0x35	; 53
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_VidTogglePin+0xbc>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_VidTogglePin+0xb8>
    126e:	84 27       	eor	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	13 c0       	rjmp	.+38     	; 0x129a <DIO_VidTogglePin+0xec>
					case PORTD:TOG_BIT(PORT_D, copy_U8pin); break;
    1274:	a2 e3       	ldi	r26, 0x32	; 50
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e2 e3       	ldi	r30, 0x32	; 50
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_VidTogglePin+0xe4>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_VidTogglePin+0xe0>
    1296:	84 27       	eor	r24, r20
    1298:	8c 93       	st	X, r24
		}

}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 copy_u8port)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <DIO_u8GetPortValue+0x6>
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <DIO_u8GetPortValue+0x8>
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	8a 83       	std	Y+2, r24	; 0x02
		u8 Lcal_U8PortResult=0;
    12b6:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	3c 83       	std	Y+4, r19	; 0x04
    12c0:	2b 83       	std	Y+3, r18	; 0x03
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	91 05       	cpc	r25, r1
    12ca:	d1 f0       	breq	.+52     	; 0x1300 <DIO_u8GetPortValue+0x58>
    12cc:	2b 81       	ldd	r18, Y+3	; 0x03
    12ce:	3c 81       	ldd	r19, Y+4	; 0x04
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	2c f4       	brge	.+10     	; 0x12e0 <DIO_u8GetPortValue+0x38>
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	61 f0       	breq	.+24     	; 0x12f6 <DIO_u8GetPortValue+0x4e>
    12de:	1e c0       	rjmp	.+60     	; 0x131c <DIO_u8GetPortValue+0x74>
    12e0:	2b 81       	ldd	r18, Y+3	; 0x03
    12e2:	3c 81       	ldd	r19, Y+4	; 0x04
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	81 f0       	breq	.+32     	; 0x130a <DIO_u8GetPortValue+0x62>
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	91 05       	cpc	r25, r1
    12f2:	81 f0       	breq	.+32     	; 0x1314 <DIO_u8GetPortValue+0x6c>
    12f4:	13 c0       	rjmp	.+38     	; 0x131c <DIO_u8GetPortValue+0x74>

			case PORTA :	Lcal_U8PortResult=PINA;	        break;
    12f6:	e9 e3       	ldi	r30, 0x39	; 57
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	0e c0       	rjmp	.+28     	; 0x131c <DIO_u8GetPortValue+0x74>
			case PORTB :	Lcal_U8PortResult=PINB; 		    break;
    1300:	e6 e3       	ldi	r30, 0x36	; 54
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	09 c0       	rjmp	.+18     	; 0x131c <DIO_u8GetPortValue+0x74>
			case PORTC :	Lcal_U8PortResult=PINC;			break;
    130a:	e3 e3       	ldi	r30, 0x33	; 51
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	04 c0       	rjmp	.+8      	; 0x131c <DIO_u8GetPortValue+0x74>
			case PORTD :	Lcal_U8PortResult=PIND;			break;
    1314:	e0 e3       	ldi	r30, 0x30	; 48
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PortResult);
    131c:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	27 97       	sbiw	r28, 0x07	; 7
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	9d 83       	std	Y+5, r25	; 0x05
    1342:	8c 83       	std	Y+4, r24	; 0x04
    1344:	6e 83       	std	Y+6, r22	; 0x06
    1346:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    1348:	8a e1       	ldi	r24, 0x1A	; 26
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <pvPortMalloc>
    1350:	9a 83       	std	Y+2, r25	; 0x02
    1352:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	9a 81       	ldd	r25, Y+2	; 0x02
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	09 f4       	brne	.+2      	; 0x135e <xCoRoutineCreate+0x32>
    135c:	6f c0       	rjmp	.+222    	; 0x143c <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    135e:	80 91 70 00 	lds	r24, 0x0070
    1362:	90 91 71 00 	lds	r25, 0x0071
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	41 f4       	brne	.+16     	; 0x137a <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	90 93 71 00 	sts	0x0071, r25
    1372:	80 93 70 00 	sts	0x0070, r24
			prvInitialiseCoRoutineLists();
    1376:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    137a:	8e 81       	ldd	r24, Y+6	; 0x06
    137c:	82 30       	cpi	r24, 0x02	; 2
    137e:	10 f0       	brcs	.+4      	; 0x1384 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    1384:	e9 81       	ldd	r30, Y+1	; 0x01
    1386:	fa 81       	ldd	r31, Y+2	; 0x02
    1388:	11 8e       	std	Z+25, r1	; 0x19
    138a:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    138c:	e9 81       	ldd	r30, Y+1	; 0x01
    138e:	fa 81       	ldd	r31, Y+2	; 0x02
    1390:	8e 81       	ldd	r24, Y+6	; 0x06
    1392:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    1394:	e9 81       	ldd	r30, Y+1	; 0x01
    1396:	fa 81       	ldd	r31, Y+2	; 0x02
    1398:	8f 81       	ldd	r24, Y+7	; 0x07
    139a:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    139c:	e9 81       	ldd	r30, Y+1	; 0x01
    139e:	fa 81       	ldd	r31, Y+2	; 0x02
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	9d 81       	ldd	r25, Y+5	; 0x05
    13a4:	91 83       	std	Z+1, r25	; 0x01
    13a6:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	02 96       	adiw	r24, 0x02	; 2
    13ae:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	9a 81       	ldd	r25, Y+2	; 0x02
    13b6:	0c 96       	adiw	r24, 0x0c	; 12
    13b8:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    13bc:	e9 81       	ldd	r30, Y+1	; 0x01
    13be:	fa 81       	ldd	r31, Y+2	; 0x02
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	91 87       	std	Z+9, r25	; 0x09
    13c6:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    13c8:	e9 81       	ldd	r30, Y+1	; 0x01
    13ca:	fa 81       	ldd	r31, Y+2	; 0x02
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	9a 81       	ldd	r25, Y+2	; 0x02
    13d0:	93 8b       	std	Z+19, r25	; 0x13
    13d2:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    13d4:	8e 81       	ldd	r24, Y+6	; 0x06
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	89 e0       	ldi	r24, 0x09	; 9
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	82 1b       	sub	r24, r18
    13e0:	93 0b       	sbc	r25, r19
    13e2:	e9 81       	ldd	r30, Y+1	; 0x01
    13e4:	fa 81       	ldd	r31, Y+2	; 0x02
    13e6:	95 87       	std	Z+13, r25	; 0x0d
    13e8:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    13ea:	e9 81       	ldd	r30, Y+1	; 0x01
    13ec:	fa 81       	ldd	r31, Y+2	; 0x02
    13ee:	96 89       	ldd	r25, Z+22	; 0x16
    13f0:	80 91 72 00 	lds	r24, 0x0072
    13f4:	89 17       	cp	r24, r25
    13f6:	28 f4       	brcc	.+10     	; 0x1402 <xCoRoutineCreate+0xd6>
    13f8:	e9 81       	ldd	r30, Y+1	; 0x01
    13fa:	fa 81       	ldd	r31, Y+2	; 0x02
    13fc:	86 89       	ldd	r24, Z+22	; 0x16
    13fe:	80 93 72 00 	sts	0x0072, r24
    1402:	e9 81       	ldd	r30, Y+1	; 0x01
    1404:	fa 81       	ldd	r31, Y+2	; 0x02
    1406:	86 89       	ldd	r24, Z+22	; 0x16
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	c9 01       	movw	r24, r18
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	82 0f       	add	r24, r18
    141c:	93 1f       	adc	r25, r19
    141e:	ac 01       	movw	r20, r24
    1420:	47 58       	subi	r20, 0x87	; 135
    1422:	5f 4f       	sbci	r21, 0xFF	; 255
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	9c 01       	movw	r18, r24
    142a:	2e 5f       	subi	r18, 0xFE	; 254
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	ca 01       	movw	r24, r20
    1430:	b9 01       	movw	r22, r18
    1432:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vListInsertEnd>

		xReturn = pdPASS;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	8b 83       	std	Y+3, r24	; 0x03
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    143c:	8f ef       	ldi	r24, 0xFF	; 255
    143e:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1442:	27 96       	adiw	r28, 0x07	; 7
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <vCoRoutineAddToDelayedList+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <vCoRoutineAddToDelayedList+0x8>
    145c:	00 d0       	rcall	.+0      	; 0x145e <vCoRoutineAddToDelayedList+0xa>
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	9c 83       	std	Y+4, r25	; 0x04
    1464:	8b 83       	std	Y+3, r24	; 0x03
    1466:	7e 83       	std	Y+6, r23	; 0x06
    1468:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    146a:	20 91 73 00 	lds	r18, 0x0073
    146e:	30 91 74 00 	lds	r19, 0x0074
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	9c 81       	ldd	r25, Y+4	; 0x04
    1476:	82 0f       	add	r24, r18
    1478:	93 1f       	adc	r25, r19
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    147e:	80 91 70 00 	lds	r24, 0x0070
    1482:	90 91 71 00 	lds	r25, 0x0071
    1486:	02 96       	adiw	r24, 0x02	; 2
    1488:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    148c:	e0 91 70 00 	lds	r30, 0x0070
    1490:	f0 91 71 00 	lds	r31, 0x0071
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	93 83       	std	Z+3, r25	; 0x03
    149a:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    149c:	20 91 73 00 	lds	r18, 0x0073
    14a0:	30 91 74 00 	lds	r19, 0x0074
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	9a 81       	ldd	r25, Y+2	; 0x02
    14a8:	82 17       	cp	r24, r18
    14aa:	93 07       	cpc	r25, r19
    14ac:	70 f4       	brcc	.+28     	; 0x14ca <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    14ae:	80 91 9f 00 	lds	r24, 0x009F
    14b2:	90 91 a0 00 	lds	r25, 0x00A0
    14b6:	20 91 70 00 	lds	r18, 0x0070
    14ba:	30 91 71 00 	lds	r19, 0x0071
    14be:	2e 5f       	subi	r18, 0xFE	; 254
    14c0:	3f 4f       	sbci	r19, 0xFF	; 255
    14c2:	b9 01       	movw	r22, r18
    14c4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vListInsert>
    14c8:	0d c0       	rjmp	.+26     	; 0x14e4 <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    14ca:	80 91 9d 00 	lds	r24, 0x009D
    14ce:	90 91 9e 00 	lds	r25, 0x009E
    14d2:	20 91 70 00 	lds	r18, 0x0070
    14d6:	30 91 71 00 	lds	r19, 0x0071
    14da:	2e 5f       	subi	r18, 0xFE	; 254
    14dc:	3f 4f       	sbci	r19, 0xFF	; 255
    14de:	b9 01       	movw	r22, r18
    14e0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vListInsert>
	}

	if( pxEventList )
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	61 f0       	breq	.+24     	; 0x1504 <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    14ec:	80 91 70 00 	lds	r24, 0x0070
    14f0:	90 91 71 00 	lds	r25, 0x0071
    14f4:	9c 01       	movw	r18, r24
    14f6:	24 5f       	subi	r18, 0xF4	; 244
    14f8:	3f 4f       	sbci	r19, 0xFF	; 255
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	b9 01       	movw	r22, r18
    1500:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vListInsert>
	}
}
    1504:	26 96       	adiw	r28, 0x06	; 6
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	00 d0       	rcall	.+0      	; 0x151c <prvCheckPendingReadyList+0x6>
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	3a c0       	rjmp	.+116    	; 0x1596 <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    1522:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    1524:	e0 91 a6 00 	lds	r30, 0x00A6
    1528:	f0 91 a7 00 	lds	r31, 0x00A7
    152c:	86 81       	ldd	r24, Z+6	; 0x06
    152e:	97 81       	ldd	r25, Z+7	; 0x07
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	0c 96       	adiw	r24, 0x0c	; 12
    153a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    153e:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	9a 81       	ldd	r25, Y+2	; 0x02
    1544:	02 96       	adiw	r24, 0x02	; 2
    1546:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    154a:	e9 81       	ldd	r30, Y+1	; 0x01
    154c:	fa 81       	ldd	r31, Y+2	; 0x02
    154e:	96 89       	ldd	r25, Z+22	; 0x16
    1550:	80 91 72 00 	lds	r24, 0x0072
    1554:	89 17       	cp	r24, r25
    1556:	28 f4       	brcc	.+10     	; 0x1562 <prvCheckPendingReadyList+0x4c>
    1558:	e9 81       	ldd	r30, Y+1	; 0x01
    155a:	fa 81       	ldd	r31, Y+2	; 0x02
    155c:	86 89       	ldd	r24, Z+22	; 0x16
    155e:	80 93 72 00 	sts	0x0072, r24
    1562:	e9 81       	ldd	r30, Y+1	; 0x01
    1564:	fa 81       	ldd	r31, Y+2	; 0x02
    1566:	86 89       	ldd	r24, Z+22	; 0x16
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	c9 01       	movw	r24, r18
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	82 0f       	add	r24, r18
    157c:	93 1f       	adc	r25, r19
    157e:	ac 01       	movw	r20, r24
    1580:	47 58       	subi	r20, 0x87	; 135
    1582:	5f 4f       	sbci	r21, 0xFF	; 255
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	9c 01       	movw	r18, r24
    158a:	2e 5f       	subi	r18, 0xFE	; 254
    158c:	3f 4f       	sbci	r19, 0xFF	; 255
    158e:	ca 01       	movw	r24, r20
    1590:	b9 01       	movw	r22, r18
    1592:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    1596:	80 91 a1 00 	lds	r24, 0x00A1
    159a:	88 23       	and	r24, r24
    159c:	09 f0       	breq	.+2      	; 0x15a0 <prvCheckPendingReadyList+0x8a>
    159e:	c1 cf       	rjmp	.-126    	; 0x1522 <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <prvCheckDelayedList+0x6>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <prvCheckDelayedList+0x8>
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    15b6:	0e 94 64 19 	call	0x32c8	; 0x32c8 <xTaskGetTickCount>
    15ba:	20 91 75 00 	lds	r18, 0x0075
    15be:	30 91 76 00 	lds	r19, 0x0076
    15c2:	82 1b       	sub	r24, r18
    15c4:	93 0b       	sbc	r25, r19
    15c6:	90 93 78 00 	sts	0x0078, r25
    15ca:	80 93 77 00 	sts	0x0077, r24
    15ce:	85 c0       	rjmp	.+266    	; 0x16da <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    15d0:	80 91 73 00 	lds	r24, 0x0073
    15d4:	90 91 74 00 	lds	r25, 0x0074
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	90 93 74 00 	sts	0x0074, r25
    15de:	80 93 73 00 	sts	0x0073, r24
		xPassedTicks--;
    15e2:	80 91 77 00 	lds	r24, 0x0077
    15e6:	90 91 78 00 	lds	r25, 0x0078
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	90 93 78 00 	sts	0x0078, r25
    15f0:	80 93 77 00 	sts	0x0077, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    15f4:	80 91 73 00 	lds	r24, 0x0073
    15f8:	90 91 74 00 	lds	r25, 0x0074
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	09 f0       	breq	.+2      	; 0x1602 <prvCheckDelayedList+0x58>
    1600:	64 c0       	rjmp	.+200    	; 0x16ca <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    1602:	80 91 9d 00 	lds	r24, 0x009D
    1606:	90 91 9e 00 	lds	r25, 0x009E
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    160e:	80 91 9f 00 	lds	r24, 0x009F
    1612:	90 91 a0 00 	lds	r25, 0x00A0
    1616:	90 93 9e 00 	sts	0x009E, r25
    161a:	80 93 9d 00 	sts	0x009D, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	9a 81       	ldd	r25, Y+2	; 0x02
    1622:	90 93 a0 00 	sts	0x00A0, r25
    1626:	80 93 9f 00 	sts	0x009F, r24
    162a:	4f c0       	rjmp	.+158    	; 0x16ca <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    162c:	e0 91 9d 00 	lds	r30, 0x009D
    1630:	f0 91 9e 00 	lds	r31, 0x009E
    1634:	05 80       	ldd	r0, Z+5	; 0x05
    1636:	f6 81       	ldd	r31, Z+6	; 0x06
    1638:	e0 2d       	mov	r30, r0
    163a:	86 81       	ldd	r24, Z+6	; 0x06
    163c:	97 81       	ldd	r25, Z+7	; 0x07
    163e:	9c 83       	std	Y+4, r25	; 0x04
    1640:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    1642:	eb 81       	ldd	r30, Y+3	; 0x03
    1644:	fc 81       	ldd	r31, Y+4	; 0x04
    1646:	22 81       	ldd	r18, Z+2	; 0x02
    1648:	33 81       	ldd	r19, Z+3	; 0x03
    164a:	80 91 73 00 	lds	r24, 0x0073
    164e:	90 91 74 00 	lds	r25, 0x0074
    1652:	82 17       	cp	r24, r18
    1654:	93 07       	cpc	r25, r19
    1656:	08 f4       	brcc	.+2      	; 0x165a <prvCheckDelayedList+0xb0>
    1658:	40 c0       	rjmp	.+128    	; 0x16da <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    165a:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	02 96       	adiw	r24, 0x02	; 2
    1662:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    1666:	eb 81       	ldd	r30, Y+3	; 0x03
    1668:	fc 81       	ldd	r31, Y+4	; 0x04
    166a:	84 89       	ldd	r24, Z+20	; 0x14
    166c:	95 89       	ldd	r25, Z+21	; 0x15
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	29 f0       	breq	.+10     	; 0x167c <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	9c 81       	ldd	r25, Y+4	; 0x04
    1676:	0c 96       	adiw	r24, 0x0c	; 12
    1678:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    167c:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    167e:	eb 81       	ldd	r30, Y+3	; 0x03
    1680:	fc 81       	ldd	r31, Y+4	; 0x04
    1682:	96 89       	ldd	r25, Z+22	; 0x16
    1684:	80 91 72 00 	lds	r24, 0x0072
    1688:	89 17       	cp	r24, r25
    168a:	28 f4       	brcc	.+10     	; 0x1696 <prvCheckDelayedList+0xec>
    168c:	eb 81       	ldd	r30, Y+3	; 0x03
    168e:	fc 81       	ldd	r31, Y+4	; 0x04
    1690:	86 89       	ldd	r24, Z+22	; 0x16
    1692:	80 93 72 00 	sts	0x0072, r24
    1696:	eb 81       	ldd	r30, Y+3	; 0x03
    1698:	fc 81       	ldd	r31, Y+4	; 0x04
    169a:	86 89       	ldd	r24, Z+22	; 0x16
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	c9 01       	movw	r24, r18
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	82 0f       	add	r24, r18
    16b0:	93 1f       	adc	r25, r19
    16b2:	ac 01       	movw	r20, r24
    16b4:	47 58       	subi	r20, 0x87	; 135
    16b6:	5f 4f       	sbci	r21, 0xFF	; 255
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	9c 01       	movw	r18, r24
    16be:	2e 5f       	subi	r18, 0xFE	; 254
    16c0:	3f 4f       	sbci	r19, 0xFF	; 255
    16c2:	ca 01       	movw	r24, r20
    16c4:	b9 01       	movw	r22, r18
    16c6:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    16ca:	e0 91 9d 00 	lds	r30, 0x009D
    16ce:	f0 91 9e 00 	lds	r31, 0x009E
    16d2:	80 81       	ld	r24, Z
    16d4:	88 23       	and	r24, r24
    16d6:	09 f0       	breq	.+2      	; 0x16da <prvCheckDelayedList+0x130>
    16d8:	a9 cf       	rjmp	.-174    	; 0x162c <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    16da:	80 91 77 00 	lds	r24, 0x0077
    16de:	90 91 78 00 	lds	r25, 0x0078
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <prvCheckDelayedList+0x13e>
    16e6:	74 cf       	rjmp	.-280    	; 0x15d0 <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    16e8:	80 91 73 00 	lds	r24, 0x0073
    16ec:	90 91 74 00 	lds	r25, 0x0074
    16f0:	90 93 76 00 	sts	0x0076, r25
    16f4:	80 93 75 00 	sts	0x0075, r24
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	00 d0       	rcall	.+0      	; 0x170c <vCoRoutineSchedule+0x6>
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    1710:	0e 94 8b 0a 	call	0x1516	; 0x1516 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    1714:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <prvCheckDelayedList>
    1718:	0a c0       	rjmp	.+20     	; 0x172e <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    171a:	80 91 72 00 	lds	r24, 0x0072
    171e:	88 23       	and	r24, r24
    1720:	09 f4       	brne	.+2      	; 0x1724 <vCoRoutineSchedule+0x1e>
    1722:	66 c0       	rjmp	.+204    	; 0x17f0 <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    1724:	80 91 72 00 	lds	r24, 0x0072
    1728:	81 50       	subi	r24, 0x01	; 1
    172a:	80 93 72 00 	sts	0x0072, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    172e:	80 91 72 00 	lds	r24, 0x0072
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	c9 01       	movw	r24, r18
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	82 0f       	add	r24, r18
    1746:	93 1f       	adc	r25, r19
    1748:	fc 01       	movw	r30, r24
    174a:	e7 58       	subi	r30, 0x87	; 135
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	80 81       	ld	r24, Z
    1750:	88 23       	and	r24, r24
    1752:	19 f3       	breq	.-58     	; 0x171a <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    1754:	80 91 72 00 	lds	r24, 0x0072
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	c9 01       	movw	r24, r18
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	82 0f       	add	r24, r18
    176c:	93 1f       	adc	r25, r19
    176e:	87 58       	subi	r24, 0x87	; 135
    1770:	9f 4f       	sbci	r25, 0xFF	; 255
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	e9 81       	ldd	r30, Y+1	; 0x01
    1778:	fa 81       	ldd	r31, Y+2	; 0x02
    177a:	01 80       	ldd	r0, Z+1	; 0x01
    177c:	f2 81       	ldd	r31, Z+2	; 0x02
    177e:	e0 2d       	mov	r30, r0
    1780:	82 81       	ldd	r24, Z+2	; 0x02
    1782:	93 81       	ldd	r25, Z+3	; 0x03
    1784:	e9 81       	ldd	r30, Y+1	; 0x01
    1786:	fa 81       	ldd	r31, Y+2	; 0x02
    1788:	92 83       	std	Z+2, r25	; 0x02
    178a:	81 83       	std	Z+1, r24	; 0x01
    178c:	e9 81       	ldd	r30, Y+1	; 0x01
    178e:	fa 81       	ldd	r31, Y+2	; 0x02
    1790:	21 81       	ldd	r18, Z+1	; 0x01
    1792:	32 81       	ldd	r19, Z+2	; 0x02
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	03 96       	adiw	r24, 0x03	; 3
    179a:	28 17       	cp	r18, r24
    179c:	39 07       	cpc	r19, r25
    179e:	59 f4       	brne	.+22     	; 0x17b6 <vCoRoutineSchedule+0xb0>
    17a0:	e9 81       	ldd	r30, Y+1	; 0x01
    17a2:	fa 81       	ldd	r31, Y+2	; 0x02
    17a4:	01 80       	ldd	r0, Z+1	; 0x01
    17a6:	f2 81       	ldd	r31, Z+2	; 0x02
    17a8:	e0 2d       	mov	r30, r0
    17aa:	82 81       	ldd	r24, Z+2	; 0x02
    17ac:	93 81       	ldd	r25, Z+3	; 0x03
    17ae:	e9 81       	ldd	r30, Y+1	; 0x01
    17b0:	fa 81       	ldd	r31, Y+2	; 0x02
    17b2:	92 83       	std	Z+2, r25	; 0x02
    17b4:	81 83       	std	Z+1, r24	; 0x01
    17b6:	e9 81       	ldd	r30, Y+1	; 0x01
    17b8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ba:	01 80       	ldd	r0, Z+1	; 0x01
    17bc:	f2 81       	ldd	r31, Z+2	; 0x02
    17be:	e0 2d       	mov	r30, r0
    17c0:	86 81       	ldd	r24, Z+6	; 0x06
    17c2:	97 81       	ldd	r25, Z+7	; 0x07
    17c4:	90 93 71 00 	sts	0x0071, r25
    17c8:	80 93 70 00 	sts	0x0070, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    17cc:	e0 91 70 00 	lds	r30, 0x0070
    17d0:	f0 91 71 00 	lds	r31, 0x0071
    17d4:	40 81       	ld	r20, Z
    17d6:	51 81       	ldd	r21, Z+1	; 0x01
    17d8:	80 91 70 00 	lds	r24, 0x0070
    17dc:	90 91 71 00 	lds	r25, 0x0071
    17e0:	e0 91 70 00 	lds	r30, 0x0070
    17e4:	f0 91 71 00 	lds	r31, 0x0071
    17e8:	27 89       	ldd	r18, Z+23	; 0x17
    17ea:	62 2f       	mov	r22, r18
    17ec:	fa 01       	movw	r30, r20
    17ee:	09 95       	icall

	return;
}
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	0f 92       	push	r0
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    1804:	19 82       	std	Y+1, r1	; 0x01
    1806:	13 c0       	rjmp	.+38     	; 0x182e <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	c9 01       	movw	r24, r18
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	82 0f       	add	r24, r18
    181e:	93 1f       	adc	r25, r19
    1820:	87 58       	subi	r24, 0x87	; 135
    1822:	9f 4f       	sbci	r25, 0xFF	; 255
    1824:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	8f 5f       	subi	r24, 0xFF	; 255
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	50 f3       	brcs	.-44     	; 0x1808 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    1834:	8b e8       	ldi	r24, 0x8B	; 139
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    183c:	84 e9       	ldi	r24, 0x94	; 148
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    1844:	81 ea       	ldi	r24, 0xA1	; 161
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    184c:	8b e8       	ldi	r24, 0x8B	; 139
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	90 93 9e 00 	sts	0x009E, r25
    1854:	80 93 9d 00 	sts	0x009D, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    1858:	84 e9       	ldi	r24, 0x94	; 148
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	90 93 a0 00 	sts	0x00A0, r25
    1860:	80 93 9f 00 	sts	0x009F, r24
}
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <xCoRoutineRemoveFromEventList+0x6>
    1872:	00 d0       	rcall	.+0      	; 0x1874 <xCoRoutineRemoveFromEventList+0x8>
    1874:	0f 92       	push	r0
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	9d 83       	std	Y+5, r25	; 0x05
    187c:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    187e:	ec 81       	ldd	r30, Y+4	; 0x04
    1880:	fd 81       	ldd	r31, Y+5	; 0x05
    1882:	05 80       	ldd	r0, Z+5	; 0x05
    1884:	f6 81       	ldd	r31, Z+6	; 0x06
    1886:	e0 2d       	mov	r30, r0
    1888:	86 81       	ldd	r24, Z+6	; 0x06
    188a:	97 81       	ldd	r25, Z+7	; 0x07
    188c:	9b 83       	std	Y+3, r25	; 0x03
    188e:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	9b 81       	ldd	r25, Y+3	; 0x03
    1894:	0c 96       	adiw	r24, 0x0c	; 12
    1896:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	9b 81       	ldd	r25, Y+3	; 0x03
    189e:	9c 01       	movw	r18, r24
    18a0:	24 5f       	subi	r18, 0xF4	; 244
    18a2:	3f 4f       	sbci	r19, 0xFF	; 255
    18a4:	81 ea       	ldi	r24, 0xA1	; 161
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	b9 01       	movw	r22, r18
    18aa:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    18ae:	ea 81       	ldd	r30, Y+2	; 0x02
    18b0:	fb 81       	ldd	r31, Y+3	; 0x03
    18b2:	96 89       	ldd	r25, Z+22	; 0x16
    18b4:	e0 91 70 00 	lds	r30, 0x0070
    18b8:	f0 91 71 00 	lds	r31, 0x0071
    18bc:	86 89       	ldd	r24, Z+22	; 0x16
    18be:	98 17       	cp	r25, r24
    18c0:	18 f0       	brcs	.+6      	; 0x18c8 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    18c8:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <pvPortMalloc+0x6>
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <pvPortMalloc+0x8>
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
    18ec:	1a 82       	std	Y+2, r1	; 0x02
    18ee:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    18f0:	0e 94 ce 18 	call	0x319c	; 0x319c <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    18f4:	80 91 aa 00 	lds	r24, 0x00AA
    18f8:	90 91 ab 00 	lds	r25, 0x00AB
    18fc:	2b 81       	ldd	r18, Y+3	; 0x03
    18fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1900:	82 0f       	add	r24, r18
    1902:	93 1f       	adc	r25, r19
    1904:	26 e0       	ldi	r18, 0x06	; 6
    1906:	80 34       	cpi	r24, 0x40	; 64
    1908:	92 07       	cpc	r25, r18
    190a:	18 f5       	brcc	.+70     	; 0x1952 <pvPortMalloc+0x76>
    190c:	20 91 aa 00 	lds	r18, 0x00AA
    1910:	30 91 ab 00 	lds	r19, 0x00AB
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	9c 81       	ldd	r25, Y+4	; 0x04
    1918:	28 0f       	add	r18, r24
    191a:	39 1f       	adc	r19, r25
    191c:	80 91 aa 00 	lds	r24, 0x00AA
    1920:	90 91 ab 00 	lds	r25, 0x00AB
    1924:	82 17       	cp	r24, r18
    1926:	93 07       	cpc	r25, r19
    1928:	a0 f4       	brcc	.+40     	; 0x1952 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    192a:	80 91 aa 00 	lds	r24, 0x00AA
    192e:	90 91 ab 00 	lds	r25, 0x00AB
    1932:	84 55       	subi	r24, 0x54	; 84
    1934:	9f 4f       	sbci	r25, 0xFF	; 255
    1936:	9a 83       	std	Y+2, r25	; 0x02
    1938:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
    193a:	20 91 aa 00 	lds	r18, 0x00AA
    193e:	30 91 ab 00 	lds	r19, 0x00AB
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	9c 81       	ldd	r25, Y+4	; 0x04
    1946:	82 0f       	add	r24, r18
    1948:	93 1f       	adc	r25, r19
    194a:	90 93 ab 00 	sts	0x00AB, r25
    194e:	80 93 aa 00 	sts	0x00AA, r24
		}	
	}
	xTaskResumeAll();
    1952:	0e 94 da 18 	call	0x31b4	; 0x31b4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	9a 81       	ldd	r25, Y+2	; 0x02
}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	00 d0       	rcall	.+0      	; 0x196e <vPortFree+0x6>
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	9a 83       	std	Y+2, r25	; 0x02
    1974:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    1988:	10 92 ab 00 	sts	0x00AB, r1
    198c:	10 92 aa 00 	sts	0x00AA, r1
}
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    199e:	20 91 aa 00 	lds	r18, 0x00AA
    19a2:	30 91 ab 00 	lds	r19, 0x00AB
    19a6:	80 e4       	ldi	r24, 0x40	; 64
    19a8:	96 e0       	ldi	r25, 0x06	; 6
    19aa:	82 1b       	sub	r24, r18
    19ac:	93 0b       	sbc	r25, r19
}
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <vListInitialise+0x6>
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	9a 81       	ldd	r25, Y+2	; 0x02
    19c6:	03 96       	adiw	r24, 0x03	; 3
    19c8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ca:	fa 81       	ldd	r31, Y+2	; 0x02
    19cc:	92 83       	std	Z+2, r25	; 0x02
    19ce:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    19d0:	e9 81       	ldd	r30, Y+1	; 0x01
    19d2:	fa 81       	ldd	r31, Y+2	; 0x02
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	9f ef       	ldi	r25, 0xFF	; 255
    19d8:	94 83       	std	Z+4, r25	; 0x04
    19da:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	9a 81       	ldd	r25, Y+2	; 0x02
    19e0:	03 96       	adiw	r24, 0x03	; 3
    19e2:	e9 81       	ldd	r30, Y+1	; 0x01
    19e4:	fa 81       	ldd	r31, Y+2	; 0x02
    19e6:	96 83       	std	Z+6, r25	; 0x06
    19e8:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	03 96       	adiw	r24, 0x03	; 3
    19f0:	e9 81       	ldd	r30, Y+1	; 0x01
    19f2:	fa 81       	ldd	r31, Y+2	; 0x02
    19f4:	90 87       	std	Z+8, r25	; 0x08
    19f6:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    19f8:	e9 81       	ldd	r30, Y+1	; 0x01
    19fa:	fa 81       	ldd	r31, Y+2	; 0x02
    19fc:	10 82       	st	Z, r1
}
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <vListInitialiseItem+0x6>
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	9a 83       	std	Y+2, r25	; 0x02
    1a14:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1a16:	e9 81       	ldd	r30, Y+1	; 0x01
    1a18:	fa 81       	ldd	r31, Y+2	; 0x02
    1a1a:	11 86       	std	Z+9, r1	; 0x09
    1a1c:	10 86       	std	Z+8, r1	; 0x08
}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <vListInsertEnd+0x6>
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <vListInsertEnd+0x8>
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <vListInsertEnd+0xa>
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	9c 83       	std	Y+4, r25	; 0x04
    1a38:	8b 83       	std	Y+3, r24	; 0x03
    1a3a:	7e 83       	std	Y+6, r23	; 0x06
    1a3c:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1a3e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a40:	fc 81       	ldd	r31, Y+4	; 0x04
    1a42:	81 81       	ldd	r24, Z+1	; 0x01
    1a44:	92 81       	ldd	r25, Z+2	; 0x02
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    1a4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	93 81       	ldd	r25, Z+3	; 0x03
    1a52:	ed 81       	ldd	r30, Y+5	; 0x05
    1a54:	fe 81       	ldd	r31, Y+6	; 0x06
    1a56:	93 83       	std	Z+3, r25	; 0x03
    1a58:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    1a5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1a5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1a5e:	81 81       	ldd	r24, Z+1	; 0x01
    1a60:	92 81       	ldd	r25, Z+2	; 0x02
    1a62:	ed 81       	ldd	r30, Y+5	; 0x05
    1a64:	fe 81       	ldd	r31, Y+6	; 0x06
    1a66:	95 83       	std	Z+5, r25	; 0x05
    1a68:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1a6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6e:	02 80       	ldd	r0, Z+2	; 0x02
    1a70:	f3 81       	ldd	r31, Z+3	; 0x03
    1a72:	e0 2d       	mov	r30, r0
    1a74:	8d 81       	ldd	r24, Y+5	; 0x05
    1a76:	9e 81       	ldd	r25, Y+6	; 0x06
    1a78:	95 83       	std	Z+5, r25	; 0x05
    1a7a:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    1a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a80:	e9 81       	ldd	r30, Y+1	; 0x01
    1a82:	fa 81       	ldd	r31, Y+2	; 0x02
    1a84:	93 83       	std	Z+3, r25	; 0x03
    1a86:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    1a88:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a8e:	fc 81       	ldd	r31, Y+4	; 0x04
    1a90:	92 83       	std	Z+2, r25	; 0x02
    1a92:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1a94:	ed 81       	ldd	r30, Y+5	; 0x05
    1a96:	fe 81       	ldd	r31, Y+6	; 0x06
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	91 87       	std	Z+9, r25	; 0x09
    1a9e:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1aa0:	eb 81       	ldd	r30, Y+3	; 0x03
    1aa2:	fc 81       	ldd	r31, Y+4	; 0x04
    1aa4:	80 81       	ld	r24, Z
    1aa6:	8f 5f       	subi	r24, 0xFF	; 255
    1aa8:	eb 81       	ldd	r30, Y+3	; 0x03
    1aaa:	fc 81       	ldd	r31, Y+4	; 0x04
    1aac:	80 83       	st	Z, r24
}
    1aae:	26 96       	adiw	r28, 0x06	; 6
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	28 97       	sbiw	r28, 0x08	; 8
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
    1ad8:	78 87       	std	Y+8, r23	; 0x08
    1ada:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    1adc:	ef 81       	ldd	r30, Y+7	; 0x07
    1ade:	f8 85       	ldd	r31, Y+8	; 0x08
    1ae0:	80 81       	ld	r24, Z
    1ae2:	91 81       	ldd	r25, Z+1	; 0x01
    1ae4:	9a 83       	std	Y+2, r25	; 0x02
    1ae6:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	9a 81       	ldd	r25, Y+2	; 0x02
    1aec:	2f ef       	ldi	r18, 0xFF	; 255
    1aee:	8f 3f       	cpi	r24, 0xFF	; 255
    1af0:	92 07       	cpc	r25, r18
    1af2:	39 f4       	brne	.+14     	; 0x1b02 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1af4:	ed 81       	ldd	r30, Y+5	; 0x05
    1af6:	fe 81       	ldd	r31, Y+6	; 0x06
    1af8:	87 81       	ldd	r24, Z+7	; 0x07
    1afa:	90 85       	ldd	r25, Z+8	; 0x08
    1afc:	9c 83       	std	Y+4, r25	; 0x04
    1afe:	8b 83       	std	Y+3, r24	; 0x03
    1b00:	18 c0       	rjmp	.+48     	; 0x1b32 <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    1b02:	8d 81       	ldd	r24, Y+5	; 0x05
    1b04:	9e 81       	ldd	r25, Y+6	; 0x06
    1b06:	03 96       	adiw	r24, 0x03	; 3
    1b08:	9c 83       	std	Y+4, r25	; 0x04
    1b0a:	8b 83       	std	Y+3, r24	; 0x03
    1b0c:	06 c0       	rjmp	.+12     	; 0x1b1a <vListInsert+0x5a>
    1b0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b10:	fc 81       	ldd	r31, Y+4	; 0x04
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	9c 83       	std	Y+4, r25	; 0x04
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b1c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b1e:	02 80       	ldd	r0, Z+2	; 0x02
    1b20:	f3 81       	ldd	r31, Z+3	; 0x03
    1b22:	e0 2d       	mov	r30, r0
    1b24:	20 81       	ld	r18, Z
    1b26:	31 81       	ldd	r19, Z+1	; 0x01
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2c:	82 17       	cp	r24, r18
    1b2e:	93 07       	cpc	r25, r19
    1b30:	70 f7       	brcc	.-36     	; 0x1b0e <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1b32:	eb 81       	ldd	r30, Y+3	; 0x03
    1b34:	fc 81       	ldd	r31, Y+4	; 0x04
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	93 81       	ldd	r25, Z+3	; 0x03
    1b3a:	ef 81       	ldd	r30, Y+7	; 0x07
    1b3c:	f8 85       	ldd	r31, Y+8	; 0x08
    1b3e:	93 83       	std	Z+3, r25	; 0x03
    1b40:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1b42:	ef 81       	ldd	r30, Y+7	; 0x07
    1b44:	f8 85       	ldd	r31, Y+8	; 0x08
    1b46:	02 80       	ldd	r0, Z+2	; 0x02
    1b48:	f3 81       	ldd	r31, Z+3	; 0x03
    1b4a:	e0 2d       	mov	r30, r0
    1b4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b4e:	98 85       	ldd	r25, Y+8	; 0x08
    1b50:	95 83       	std	Z+5, r25	; 0x05
    1b52:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1b54:	ef 81       	ldd	r30, Y+7	; 0x07
    1b56:	f8 85       	ldd	r31, Y+8	; 0x08
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	95 83       	std	Z+5, r25	; 0x05
    1b5e:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    1b60:	8f 81       	ldd	r24, Y+7	; 0x07
    1b62:	98 85       	ldd	r25, Y+8	; 0x08
    1b64:	eb 81       	ldd	r30, Y+3	; 0x03
    1b66:	fc 81       	ldd	r31, Y+4	; 0x04
    1b68:	93 83       	std	Z+3, r25	; 0x03
    1b6a:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1b6c:	ef 81       	ldd	r30, Y+7	; 0x07
    1b6e:	f8 85       	ldd	r31, Y+8	; 0x08
    1b70:	8d 81       	ldd	r24, Y+5	; 0x05
    1b72:	9e 81       	ldd	r25, Y+6	; 0x06
    1b74:	91 87       	std	Z+9, r25	; 0x09
    1b76:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1b78:	ed 81       	ldd	r30, Y+5	; 0x05
    1b7a:	fe 81       	ldd	r31, Y+6	; 0x06
    1b7c:	80 81       	ld	r24, Z
    1b7e:	8f 5f       	subi	r24, 0xFF	; 255
    1b80:	ed 81       	ldd	r30, Y+5	; 0x05
    1b82:	fe 81       	ldd	r31, Y+6	; 0x06
    1b84:	80 83       	st	Z, r24
}
    1b86:	28 96       	adiw	r28, 0x08	; 8
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <vListRemove+0x6>
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <vListRemove+0x8>
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	9c 83       	std	Y+4, r25	; 0x04
    1ba6:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1ba8:	eb 81       	ldd	r30, Y+3	; 0x03
    1baa:	fc 81       	ldd	r31, Y+4	; 0x04
    1bac:	a2 81       	ldd	r26, Z+2	; 0x02
    1bae:	b3 81       	ldd	r27, Z+3	; 0x03
    1bb0:	eb 81       	ldd	r30, Y+3	; 0x03
    1bb2:	fc 81       	ldd	r31, Y+4	; 0x04
    1bb4:	84 81       	ldd	r24, Z+4	; 0x04
    1bb6:	95 81       	ldd	r25, Z+5	; 0x05
    1bb8:	15 96       	adiw	r26, 0x05	; 5
    1bba:	9c 93       	st	X, r25
    1bbc:	8e 93       	st	-X, r24
    1bbe:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1bc0:	eb 81       	ldd	r30, Y+3	; 0x03
    1bc2:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc4:	a4 81       	ldd	r26, Z+4	; 0x04
    1bc6:	b5 81       	ldd	r27, Z+5	; 0x05
    1bc8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bca:	fc 81       	ldd	r31, Y+4	; 0x04
    1bcc:	82 81       	ldd	r24, Z+2	; 0x02
    1bce:	93 81       	ldd	r25, Z+3	; 0x03
    1bd0:	13 96       	adiw	r26, 0x03	; 3
    1bd2:	9c 93       	st	X, r25
    1bd4:	8e 93       	st	-X, r24
    1bd6:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    1bd8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bda:	fc 81       	ldd	r31, Y+4	; 0x04
    1bdc:	80 85       	ldd	r24, Z+8	; 0x08
    1bde:	91 85       	ldd	r25, Z+9	; 0x09
    1be0:	9a 83       	std	Y+2, r25	; 0x02
    1be2:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1be4:	e9 81       	ldd	r30, Y+1	; 0x01
    1be6:	fa 81       	ldd	r31, Y+2	; 0x02
    1be8:	21 81       	ldd	r18, Z+1	; 0x01
    1bea:	32 81       	ldd	r19, Z+2	; 0x02
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf0:	28 17       	cp	r18, r24
    1bf2:	39 07       	cpc	r19, r25
    1bf4:	41 f4       	brne	.+16     	; 0x1c06 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1bf6:	eb 81       	ldd	r30, Y+3	; 0x03
    1bf8:	fc 81       	ldd	r31, Y+4	; 0x04
    1bfa:	84 81       	ldd	r24, Z+4	; 0x04
    1bfc:	95 81       	ldd	r25, Z+5	; 0x05
    1bfe:	e9 81       	ldd	r30, Y+1	; 0x01
    1c00:	fa 81       	ldd	r31, Y+2	; 0x02
    1c02:	92 83       	std	Z+2, r25	; 0x02
    1c04:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    1c06:	eb 81       	ldd	r30, Y+3	; 0x03
    1c08:	fc 81       	ldd	r31, Y+4	; 0x04
    1c0a:	11 86       	std	Z+9, r1	; 0x09
    1c0c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1c0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c10:	fa 81       	ldd	r31, Y+2	; 0x02
    1c12:	80 81       	ld	r24, Z
    1c14:	81 50       	subi	r24, 0x01	; 1
    1c16:	e9 81       	ldd	r30, Y+1	; 0x01
    1c18:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1a:	80 83       	st	Z, r24
}
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <Led1>:
#include "stdio.h"
#include "avr/delay.h"


void Led1(void* ptr)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <Led1+0x6>
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	9a 83       	std	Y+2, r25	; 0x02
    1c36:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
	DIO_VidTogglePin(0,PIN0);
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <DIO_VidTogglePin>
	vTaskDelay(4000);
    1c40:	80 ea       	ldi	r24, 0xA0	; 160
    1c42:	9f e0       	ldi	r25, 0x0F	; 15
    1c44:	0e 94 56 18 	call	0x30ac	; 0x30ac <vTaskDelay>
    1c48:	f7 cf       	rjmp	.-18     	; 0x1c38 <Led1+0xe>

00001c4a <Led2>:
	}
}
void Led2(void* ptr)
{
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <Led2+0x6>
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	9a 83       	std	Y+2, r25	; 0x02
    1c56:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
	DIO_VidTogglePin(0,PIN1);
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	61 e0       	ldi	r22, 0x01	; 1
    1c5c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <DIO_VidTogglePin>
	vTaskDelay(3000);
    1c60:	88 eb       	ldi	r24, 0xB8	; 184
    1c62:	9b e0       	ldi	r25, 0x0B	; 11
    1c64:	0e 94 56 18 	call	0x30ac	; 0x30ac <vTaskDelay>
    1c68:	f7 cf       	rjmp	.-18     	; 0x1c58 <Led2+0xe>

00001c6a <Led3>:
	}

}
void Led3(void* ptr)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	00 d0       	rcall	.+0      	; 0x1c70 <Led3+0x6>
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	9a 83       	std	Y+2, r25	; 0x02
    1c76:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
	DIO_VidTogglePin(0,PIN2);
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	62 e0       	ldi	r22, 0x02	; 2
    1c7c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <DIO_VidTogglePin>
	vTaskDelay(2000);
    1c80:	80 ed       	ldi	r24, 0xD0	; 208
    1c82:	97 e0       	ldi	r25, 0x07	; 7
    1c84:	0e 94 56 18 	call	0x30ac	; 0x30ac <vTaskDelay>
    1c88:	f7 cf       	rjmp	.-18     	; 0x1c78 <Led3+0xe>

00001c8a <Led4>:
	}
}
void Led4(void* ptr)
{
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <Led4+0x6>
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
	DIO_VidTogglePin(0,PIN3);
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	63 e0       	ldi	r22, 0x03	; 3
    1c9c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <DIO_VidTogglePin>
	vTaskDelay(1000);
    1ca0:	88 ee       	ldi	r24, 0xE8	; 232
    1ca2:	93 e0       	ldi	r25, 0x03	; 3
    1ca4:	0e 94 56 18 	call	0x30ac	; 0x30ac <vTaskDelay>
    1ca8:	f7 cf       	rjmp	.-18     	; 0x1c98 <Led4+0xe>

00001caa <main>:
	}
}

int main()
{
    1caa:	af 92       	push	r10
    1cac:	bf 92       	push	r11
    1cae:	cf 92       	push	r12
    1cb0:	df 92       	push	r13
    1cb2:	ef 92       	push	r14
    1cb4:	ff 92       	push	r15
    1cb6:	0f 93       	push	r16
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	66 97       	sbiw	r28, 0x16	; 22
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
	xTaskHandle * LED1Handle;
	xTaskHandle * LED2Handle;
	xTaskHandle * LED3Handle;
	xTaskHandle * LED4Handle;

	DIO_VidSetPortDirection(0,OUTPUT);
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_VidSetPortDirection>
	DIO_VidSetPortValue(0,LOW);
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	0e 94 96 08 	call	0x112c	; 0x112c <DIO_VidSetPortValue>
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	aa ef       	ldi	r26, 0xFA	; 250
    1ce2:	b3 e4       	ldi	r27, 0x43	; 67
    1ce4:	8b 87       	std	Y+11, r24	; 0x0b
    1ce6:	9c 87       	std	Y+12, r25	; 0x0c
    1ce8:	ad 87       	std	Y+13, r26	; 0x0d
    1cea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	4a ef       	ldi	r20, 0xFA	; 250
    1cfa:	54 e4       	ldi	r21, 0x44	; 68
    1cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	8f 83       	std	Y+7, r24	; 0x07
    1d06:	98 87       	std	Y+8, r25	; 0x08
    1d08:	a9 87       	std	Y+9, r26	; 0x09
    1d0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0e:	78 85       	ldd	r23, Y+8	; 0x08
    1d10:	89 85       	ldd	r24, Y+9	; 0x09
    1d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e8       	ldi	r20, 0x80	; 128
    1d1a:	5f e3       	ldi	r21, 0x3F	; 63
    1d1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d20:	88 23       	and	r24, r24
    1d22:	2c f4       	brge	.+10     	; 0x1d2e <main+0x84>
		__ticks = 1;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	9e 83       	std	Y+6, r25	; 0x06
    1d2a:	8d 83       	std	Y+5, r24	; 0x05
    1d2c:	3f c0       	rjmp	.+126    	; 0x1dac <main+0x102>
	else if (__tmp > 65535)
    1d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d30:	78 85       	ldd	r23, Y+8	; 0x08
    1d32:	89 85       	ldd	r24, Y+9	; 0x09
    1d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	3f ef       	ldi	r19, 0xFF	; 255
    1d3a:	4f e7       	ldi	r20, 0x7F	; 127
    1d3c:	57 e4       	ldi	r21, 0x47	; 71
    1d3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d42:	18 16       	cp	r1, r24
    1d44:	4c f5       	brge	.+82     	; 0x1d98 <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e2       	ldi	r20, 0x20	; 32
    1d54:	51 e4       	ldi	r21, 0x41	; 65
    1d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	bc 01       	movw	r22, r24
    1d60:	cd 01       	movw	r24, r26
    1d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	9e 83       	std	Y+6, r25	; 0x06
    1d6c:	8d 83       	std	Y+5, r24	; 0x05
    1d6e:	0f c0       	rjmp	.+30     	; 0x1d8e <main+0xe4>
    1d70:	88 ec       	ldi	r24, 0xC8	; 200
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	9c 83       	std	Y+4, r25	; 0x04
    1d76:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <main+0xd2>
    1d80:	9c 83       	std	Y+4, r25	; 0x04
    1d82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d84:	8d 81       	ldd	r24, Y+5	; 0x05
    1d86:	9e 81       	ldd	r25, Y+6	; 0x06
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	9e 83       	std	Y+6, r25	; 0x06
    1d8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	69 f7       	brne	.-38     	; 0x1d70 <main+0xc6>
    1d96:	14 c0       	rjmp	.+40     	; 0x1dc0 <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d98:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9a:	78 85       	ldd	r23, Y+8	; 0x08
    1d9c:	89 85       	ldd	r24, Y+9	; 0x09
    1d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	9e 83       	std	Y+6, r25	; 0x06
    1daa:	8d 83       	std	Y+5, r24	; 0x05
    1dac:	8d 81       	ldd	r24, Y+5	; 0x05
    1dae:	9e 81       	ldd	r25, Y+6	; 0x06
    1db0:	9a 83       	std	Y+2, r25	; 0x02
    1db2:	89 83       	std	Y+1, r24	; 0x01
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	9a 81       	ldd	r25, Y+2	; 0x02
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <main+0x10e>
    1dbc:	9a 83       	std	Y+2, r25	; 0x02
    1dbe:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(500);
		if(xTaskCreate(Led1,NULL,configMINIMAL_STACK_SIZE,NULL,3,NULL)==pdPASS)
    1dc0:	85 e1       	ldi	r24, 0x15	; 21
    1dc2:	9e e0       	ldi	r25, 0x0E	; 14
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	4a e5       	ldi	r20, 0x5A	; 90
    1dca:	50 e0       	ldi	r21, 0x00	; 0
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	03 e0       	ldi	r16, 0x03	; 3
    1dd2:	ee 24       	eor	r14, r14
    1dd4:	ff 24       	eor	r15, r15
    1dd6:	cc 24       	eor	r12, r12
    1dd8:	dd 24       	eor	r13, r13
    1dda:	aa 24       	eor	r10, r10
    1ddc:	bb 24       	eor	r11, r11
    1dde:	0e 94 92 16 	call	0x2d24	; 0x2d24 <xTaskGenericCreate>
    1de2:	81 30       	cpi	r24, 0x01	; 1
    1de4:	29 f4       	brne	.+10     	; 0x1df0 <main+0x146>
		{
				DIO_VidSetPinValue(0,PIN6,HIGH);
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	66 e0       	ldi	r22, 0x06	; 6
    1dea:	41 e0       	ldi	r20, 0x01	; 1
    1dec:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		}
		xTaskCreate(Led2,NULL,configMINIMAL_STACK_SIZE,NULL,2,NULL);
    1df0:	85 e2       	ldi	r24, 0x25	; 37
    1df2:	9e e0       	ldi	r25, 0x0E	; 14
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	4a e5       	ldi	r20, 0x5A	; 90
    1dfa:	50 e0       	ldi	r21, 0x00	; 0
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	02 e0       	ldi	r16, 0x02	; 2
    1e02:	ee 24       	eor	r14, r14
    1e04:	ff 24       	eor	r15, r15
    1e06:	cc 24       	eor	r12, r12
    1e08:	dd 24       	eor	r13, r13
    1e0a:	aa 24       	eor	r10, r10
    1e0c:	bb 24       	eor	r11, r11
    1e0e:	0e 94 92 16 	call	0x2d24	; 0x2d24 <xTaskGenericCreate>
		xTaskCreate(Led3,NULL,configMINIMAL_STACK_SIZE,NULL,1,NULL);
    1e12:	85 e3       	ldi	r24, 0x35	; 53
    1e14:	9e e0       	ldi	r25, 0x0E	; 14
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	4a e5       	ldi	r20, 0x5A	; 90
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	01 e0       	ldi	r16, 0x01	; 1
    1e24:	ee 24       	eor	r14, r14
    1e26:	ff 24       	eor	r15, r15
    1e28:	cc 24       	eor	r12, r12
    1e2a:	dd 24       	eor	r13, r13
    1e2c:	aa 24       	eor	r10, r10
    1e2e:	bb 24       	eor	r11, r11
    1e30:	0e 94 92 16 	call	0x2d24	; 0x2d24 <xTaskGenericCreate>
		xTaskCreate(Led4,NULL,configMINIMAL_STACK_SIZE,NULL,0,NULL);
    1e34:	85 e4       	ldi	r24, 0x45	; 69
    1e36:	9e e0       	ldi	r25, 0x0E	; 14
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	4a e5       	ldi	r20, 0x5A	; 90
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	00 e0       	ldi	r16, 0x00	; 0
    1e46:	ee 24       	eor	r14, r14
    1e48:	ff 24       	eor	r15, r15
    1e4a:	cc 24       	eor	r12, r12
    1e4c:	dd 24       	eor	r13, r13
    1e4e:	aa 24       	eor	r10, r10
    1e50:	bb 24       	eor	r11, r11
    1e52:	0e 94 92 16 	call	0x2d24	; 0x2d24 <xTaskGenericCreate>
//	xTaskCreate(Led2,NULL,configMINIMAL_STACK_SIZE,NULL,2,NULL);
//	xTaskCreate(Led3,NULL,configMINIMAL_STACK_SIZE,NULL,1,NULL);
//	xTaskCreate(Led4,NULL,configMINIMAL_STACK_SIZE,NULL,0,NULL);


	vTaskStartScheduler();
    1e56:	0e 94 8b 18 	call	0x3116	; 0x3116 <vTaskStartScheduler>
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	90 e0       	ldi	r25, 0x00	; 0


}
    1e5e:	66 96       	adiw	r28, 0x16	; 22
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	0f 91       	pop	r16
    1e70:	ff 90       	pop	r15
    1e72:	ef 90       	pop	r14
    1e74:	df 90       	pop	r13
    1e76:	cf 90       	pop	r12
    1e78:	bf 90       	pop	r11
    1e7a:	af 90       	pop	r10
    1e7c:	08 95       	ret

00001e7e <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	28 97       	sbiw	r28, 0x08	; 8
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	9c 83       	std	Y+4, r25	; 0x04
    1e94:	8b 83       	std	Y+3, r24	; 0x03
    1e96:	7e 83       	std	Y+6, r23	; 0x06
    1e98:	6d 83       	std	Y+5, r22	; 0x05
    1e9a:	58 87       	std	Y+8, r21	; 0x08
    1e9c:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    1e9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea2:	81 e1       	ldi	r24, 0x11	; 17
    1ea4:	80 83       	st	Z, r24
	pxTopOfStack--;
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	9c 83       	std	Y+4, r25	; 0x04
    1eae:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    1eb0:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb2:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb4:	82 e2       	ldi	r24, 0x22	; 34
    1eb6:	80 83       	st	Z, r24
	pxTopOfStack--;
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    1ec2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec6:	83 e3       	ldi	r24, 0x33	; 51
    1ec8:	80 83       	st	Z, r24
	pxTopOfStack--;
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	9c 83       	std	Y+4, r25	; 0x04
    1ed2:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    1ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed8:	9a 83       	std	Y+2, r25	; 0x02
    1eda:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee2:	80 83       	st	Z, r24
	pxTopOfStack--;
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	9c 83       	std	Y+4, r25	; 0x04
    1eec:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef2:	89 2f       	mov	r24, r25
    1ef4:	99 27       	eor	r25, r25
    1ef6:	9a 83       	std	Y+2, r25	; 0x02
    1ef8:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	eb 81       	ldd	r30, Y+3	; 0x03
    1efe:	fc 81       	ldd	r31, Y+4	; 0x04
    1f00:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	9c 81       	ldd	r25, Y+4	; 0x04
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	9c 83       	std	Y+4, r25	; 0x04
    1f0a:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    1f0c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f0e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f10:	10 82       	st	Z, r1
	pxTopOfStack--;
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	9c 81       	ldd	r25, Y+4	; 0x04
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    1f1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f20:	80 e8       	ldi	r24, 0x80	; 128
    1f22:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	9c 81       	ldd	r25, Y+4	; 0x04
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	9c 83       	std	Y+4, r25	; 0x04
    1f2c:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    1f2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f30:	fc 81       	ldd	r31, Y+4	; 0x04
    1f32:	10 82       	st	Z, r1
	pxTopOfStack--;
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	9c 83       	std	Y+4, r25	; 0x04
    1f3c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    1f3e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f40:	fc 81       	ldd	r31, Y+4	; 0x04
    1f42:	82 e0       	ldi	r24, 0x02	; 2
    1f44:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	9c 83       	std	Y+4, r25	; 0x04
    1f4e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    1f50:	eb 81       	ldd	r30, Y+3	; 0x03
    1f52:	fc 81       	ldd	r31, Y+4	; 0x04
    1f54:	83 e0       	ldi	r24, 0x03	; 3
    1f56:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	9c 83       	std	Y+4, r25	; 0x04
    1f60:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    1f62:	eb 81       	ldd	r30, Y+3	; 0x03
    1f64:	fc 81       	ldd	r31, Y+4	; 0x04
    1f66:	84 e0       	ldi	r24, 0x04	; 4
    1f68:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	9c 83       	std	Y+4, r25	; 0x04
    1f72:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    1f74:	eb 81       	ldd	r30, Y+3	; 0x03
    1f76:	fc 81       	ldd	r31, Y+4	; 0x04
    1f78:	85 e0       	ldi	r24, 0x05	; 5
    1f7a:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    1f86:	eb 81       	ldd	r30, Y+3	; 0x03
    1f88:	fc 81       	ldd	r31, Y+4	; 0x04
    1f8a:	86 e0       	ldi	r24, 0x06	; 6
    1f8c:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	9c 83       	std	Y+4, r25	; 0x04
    1f96:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    1f98:	eb 81       	ldd	r30, Y+3	; 0x03
    1f9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f9c:	87 e0       	ldi	r24, 0x07	; 7
    1f9e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	9c 83       	std	Y+4, r25	; 0x04
    1fa8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    1faa:	eb 81       	ldd	r30, Y+3	; 0x03
    1fac:	fc 81       	ldd	r31, Y+4	; 0x04
    1fae:	88 e0       	ldi	r24, 0x08	; 8
    1fb0:	80 83       	st	Z, r24
	pxTopOfStack--;
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	9c 83       	std	Y+4, r25	; 0x04
    1fba:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    1fbc:	eb 81       	ldd	r30, Y+3	; 0x03
    1fbe:	fc 81       	ldd	r31, Y+4	; 0x04
    1fc0:	89 e0       	ldi	r24, 0x09	; 9
    1fc2:	80 83       	st	Z, r24
	pxTopOfStack--;
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	9c 83       	std	Y+4, r25	; 0x04
    1fcc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    1fce:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd0:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd2:	80 e1       	ldi	r24, 0x10	; 16
    1fd4:	80 83       	st	Z, r24
	pxTopOfStack--;
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	9c 83       	std	Y+4, r25	; 0x04
    1fde:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    1fe0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe4:	81 e1       	ldi	r24, 0x11	; 17
    1fe6:	80 83       	st	Z, r24
	pxTopOfStack--;
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	9c 83       	std	Y+4, r25	; 0x04
    1ff0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    1ff2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff6:	82 e1       	ldi	r24, 0x12	; 18
    1ff8:	80 83       	st	Z, r24
	pxTopOfStack--;
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	9c 83       	std	Y+4, r25	; 0x04
    2002:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    2004:	eb 81       	ldd	r30, Y+3	; 0x03
    2006:	fc 81       	ldd	r31, Y+4	; 0x04
    2008:	83 e1       	ldi	r24, 0x13	; 19
    200a:	80 83       	st	Z, r24
	pxTopOfStack--;
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	9c 81       	ldd	r25, Y+4	; 0x04
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	9c 83       	std	Y+4, r25	; 0x04
    2014:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    2016:	eb 81       	ldd	r30, Y+3	; 0x03
    2018:	fc 81       	ldd	r31, Y+4	; 0x04
    201a:	84 e1       	ldi	r24, 0x14	; 20
    201c:	80 83       	st	Z, r24
	pxTopOfStack--;
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	9c 81       	ldd	r25, Y+4	; 0x04
    2022:	01 97       	sbiw	r24, 0x01	; 1
    2024:	9c 83       	std	Y+4, r25	; 0x04
    2026:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    2028:	eb 81       	ldd	r30, Y+3	; 0x03
    202a:	fc 81       	ldd	r31, Y+4	; 0x04
    202c:	85 e1       	ldi	r24, 0x15	; 21
    202e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	9c 81       	ldd	r25, Y+4	; 0x04
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	9c 83       	std	Y+4, r25	; 0x04
    2038:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    203a:	eb 81       	ldd	r30, Y+3	; 0x03
    203c:	fc 81       	ldd	r31, Y+4	; 0x04
    203e:	86 e1       	ldi	r24, 0x16	; 22
    2040:	80 83       	st	Z, r24
	pxTopOfStack--;
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	9c 81       	ldd	r25, Y+4	; 0x04
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	9c 83       	std	Y+4, r25	; 0x04
    204a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    204c:	eb 81       	ldd	r30, Y+3	; 0x03
    204e:	fc 81       	ldd	r31, Y+4	; 0x04
    2050:	87 e1       	ldi	r24, 0x17	; 23
    2052:	80 83       	st	Z, r24
	pxTopOfStack--;
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	9c 81       	ldd	r25, Y+4	; 0x04
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    205e:	eb 81       	ldd	r30, Y+3	; 0x03
    2060:	fc 81       	ldd	r31, Y+4	; 0x04
    2062:	88 e1       	ldi	r24, 0x18	; 24
    2064:	80 83       	st	Z, r24
	pxTopOfStack--;
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	9c 83       	std	Y+4, r25	; 0x04
    206e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    2070:	eb 81       	ldd	r30, Y+3	; 0x03
    2072:	fc 81       	ldd	r31, Y+4	; 0x04
    2074:	89 e1       	ldi	r24, 0x19	; 25
    2076:	80 83       	st	Z, r24
	pxTopOfStack--;
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	9c 81       	ldd	r25, Y+4	; 0x04
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	9c 83       	std	Y+4, r25	; 0x04
    2080:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    2082:	eb 81       	ldd	r30, Y+3	; 0x03
    2084:	fc 81       	ldd	r31, Y+4	; 0x04
    2086:	80 e2       	ldi	r24, 0x20	; 32
    2088:	80 83       	st	Z, r24
	pxTopOfStack--;
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	9c 83       	std	Y+4, r25	; 0x04
    2092:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    2094:	eb 81       	ldd	r30, Y+3	; 0x03
    2096:	fc 81       	ldd	r31, Y+4	; 0x04
    2098:	81 e2       	ldi	r24, 0x21	; 33
    209a:	80 83       	st	Z, r24
	pxTopOfStack--;
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	9c 83       	std	Y+4, r25	; 0x04
    20a4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    20a6:	eb 81       	ldd	r30, Y+3	; 0x03
    20a8:	fc 81       	ldd	r31, Y+4	; 0x04
    20aa:	82 e2       	ldi	r24, 0x22	; 34
    20ac:	80 83       	st	Z, r24
	pxTopOfStack--;
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	9c 81       	ldd	r25, Y+4	; 0x04
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	9c 83       	std	Y+4, r25	; 0x04
    20b6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    20b8:	eb 81       	ldd	r30, Y+3	; 0x03
    20ba:	fc 81       	ldd	r31, Y+4	; 0x04
    20bc:	83 e2       	ldi	r24, 0x23	; 35
    20be:	80 83       	st	Z, r24
	pxTopOfStack--;
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9c 83       	std	Y+4, r25	; 0x04
    20c8:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    20ca:	8f 81       	ldd	r24, Y+7	; 0x07
    20cc:	98 85       	ldd	r25, Y+8	; 0x08
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	eb 81       	ldd	r30, Y+3	; 0x03
    20d6:	fc 81       	ldd	r31, Y+4	; 0x04
    20d8:	80 83       	st	Z, r24
	pxTopOfStack--;
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	9c 81       	ldd	r25, Y+4	; 0x04
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	9c 83       	std	Y+4, r25	; 0x04
    20e2:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	9a 81       	ldd	r25, Y+2	; 0x02
    20e8:	89 2f       	mov	r24, r25
    20ea:	99 27       	eor	r25, r25
    20ec:	9a 83       	std	Y+2, r25	; 0x02
    20ee:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	eb 81       	ldd	r30, Y+3	; 0x03
    20f4:	fc 81       	ldd	r31, Y+4	; 0x04
    20f6:	80 83       	st	Z, r24
	pxTopOfStack--;
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	9c 81       	ldd	r25, Y+4	; 0x04
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	9c 83       	std	Y+4, r25	; 0x04
    2100:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    2102:	eb 81       	ldd	r30, Y+3	; 0x03
    2104:	fc 81       	ldd	r31, Y+4	; 0x04
    2106:	86 e2       	ldi	r24, 0x26	; 38
    2108:	80 83       	st	Z, r24
	pxTopOfStack--;
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	9c 83       	std	Y+4, r25	; 0x04
    2112:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    2114:	eb 81       	ldd	r30, Y+3	; 0x03
    2116:	fc 81       	ldd	r31, Y+4	; 0x04
    2118:	87 e2       	ldi	r24, 0x27	; 39
    211a:	80 83       	st	Z, r24
	pxTopOfStack--;
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	9c 83       	std	Y+4, r25	; 0x04
    2124:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    2126:	eb 81       	ldd	r30, Y+3	; 0x03
    2128:	fc 81       	ldd	r31, Y+4	; 0x04
    212a:	88 e2       	ldi	r24, 0x28	; 40
    212c:	80 83       	st	Z, r24
	pxTopOfStack--;
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	9c 81       	ldd	r25, Y+4	; 0x04
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	9c 83       	std	Y+4, r25	; 0x04
    2136:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    2138:	eb 81       	ldd	r30, Y+3	; 0x03
    213a:	fc 81       	ldd	r31, Y+4	; 0x04
    213c:	89 e2       	ldi	r24, 0x29	; 41
    213e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	9c 81       	ldd	r25, Y+4	; 0x04
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	9c 83       	std	Y+4, r25	; 0x04
    2148:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    214a:	eb 81       	ldd	r30, Y+3	; 0x03
    214c:	fc 81       	ldd	r31, Y+4	; 0x04
    214e:	80 e3       	ldi	r24, 0x30	; 48
    2150:	80 83       	st	Z, r24
	pxTopOfStack--;
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	9c 83       	std	Y+4, r25	; 0x04
    215a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    215c:	eb 81       	ldd	r30, Y+3	; 0x03
    215e:	fc 81       	ldd	r31, Y+4	; 0x04
    2160:	81 e3       	ldi	r24, 0x31	; 49
    2162:	80 83       	st	Z, r24
	pxTopOfStack--;
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	9c 81       	ldd	r25, Y+4	; 0x04
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	9c 83       	std	Y+4, r25	; 0x04
    216c:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2172:	28 96       	adiw	r28, 0x08	; 8
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    218c:	0e 94 b2 11 	call	0x2364	; 0x2364 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    2190:	a0 91 ec 06 	lds	r26, 0x06EC
    2194:	b0 91 ed 06 	lds	r27, 0x06ED
    2198:	cd 91       	ld	r28, X+
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	dd 91       	ld	r29, X+
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	ff 91       	pop	r31
    21a2:	ef 91       	pop	r30
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	bf 91       	pop	r27
    21aa:	af 91       	pop	r26
    21ac:	9f 91       	pop	r25
    21ae:	8f 91       	pop	r24
    21b0:	7f 91       	pop	r23
    21b2:	6f 91       	pop	r22
    21b4:	5f 91       	pop	r21
    21b6:	4f 91       	pop	r20
    21b8:	3f 91       	pop	r19
    21ba:	2f 91       	pop	r18
    21bc:	1f 91       	pop	r17
    21be:	0f 91       	pop	r16
    21c0:	ff 90       	pop	r15
    21c2:	ef 90       	pop	r14
    21c4:	df 90       	pop	r13
    21c6:	cf 90       	pop	r12
    21c8:	bf 90       	pop	r11
    21ca:	af 90       	pop	r10
    21cc:	9f 90       	pop	r9
    21ce:	8f 90       	pop	r8
    21d0:	7f 90       	pop	r7
    21d2:	6f 90       	pop	r6
    21d4:	5f 90       	pop	r5
    21d6:	4f 90       	pop	r4
    21d8:	3f 90       	pop	r3
    21da:	2f 90       	pop	r2
    21dc:	1f 90       	pop	r1
    21de:	0f 90       	pop	r0
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    21e4:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
}
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    21fc:	0f 92       	push	r0
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	0f 92       	push	r0
    2204:	1f 92       	push	r1
    2206:	11 24       	eor	r1, r1
    2208:	2f 92       	push	r2
    220a:	3f 92       	push	r3
    220c:	4f 92       	push	r4
    220e:	5f 92       	push	r5
    2210:	6f 92       	push	r6
    2212:	7f 92       	push	r7
    2214:	8f 92       	push	r8
    2216:	9f 92       	push	r9
    2218:	af 92       	push	r10
    221a:	bf 92       	push	r11
    221c:	cf 92       	push	r12
    221e:	df 92       	push	r13
    2220:	ef 92       	push	r14
    2222:	ff 92       	push	r15
    2224:	0f 93       	push	r16
    2226:	1f 93       	push	r17
    2228:	2f 93       	push	r18
    222a:	3f 93       	push	r19
    222c:	4f 93       	push	r20
    222e:	5f 93       	push	r21
    2230:	6f 93       	push	r22
    2232:	7f 93       	push	r23
    2234:	8f 93       	push	r24
    2236:	9f 93       	push	r25
    2238:	af 93       	push	r26
    223a:	bf 93       	push	r27
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	ef 93       	push	r30
    2242:	ff 93       	push	r31
    2244:	a0 91 ec 06 	lds	r26, 0x06EC
    2248:	b0 91 ed 06 	lds	r27, 0x06ED
    224c:	0d b6       	in	r0, 0x3d	; 61
    224e:	0d 92       	st	X+, r0
    2250:	0e b6       	in	r0, 0x3e	; 62
    2252:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2254:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2258:	a0 91 ec 06 	lds	r26, 0x06EC
    225c:	b0 91 ed 06 	lds	r27, 0x06ED
    2260:	cd 91       	ld	r28, X+
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	dd 91       	ld	r29, X+
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	ff 91       	pop	r31
    226a:	ef 91       	pop	r30
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	bf 91       	pop	r27
    2272:	af 91       	pop	r26
    2274:	9f 91       	pop	r25
    2276:	8f 91       	pop	r24
    2278:	7f 91       	pop	r23
    227a:	6f 91       	pop	r22
    227c:	5f 91       	pop	r21
    227e:	4f 91       	pop	r20
    2280:	3f 91       	pop	r19
    2282:	2f 91       	pop	r18
    2284:	1f 91       	pop	r17
    2286:	0f 91       	pop	r16
    2288:	ff 90       	pop	r15
    228a:	ef 90       	pop	r14
    228c:	df 90       	pop	r13
    228e:	cf 90       	pop	r12
    2290:	bf 90       	pop	r11
    2292:	af 90       	pop	r10
    2294:	9f 90       	pop	r9
    2296:	8f 90       	pop	r8
    2298:	7f 90       	pop	r7
    229a:	6f 90       	pop	r6
    229c:	5f 90       	pop	r5
    229e:	4f 90       	pop	r4
    22a0:	3f 90       	pop	r3
    22a2:	2f 90       	pop	r2
    22a4:	1f 90       	pop	r1
    22a6:	0f 90       	pop	r0
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	0f 90       	pop	r0

	asm volatile ( "ret" );
    22ac:	08 95       	ret

000022ae <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    22ae:	0f 92       	push	r0
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	0f 92       	push	r0
    22b6:	1f 92       	push	r1
    22b8:	11 24       	eor	r1, r1
    22ba:	2f 92       	push	r2
    22bc:	3f 92       	push	r3
    22be:	4f 92       	push	r4
    22c0:	5f 92       	push	r5
    22c2:	6f 92       	push	r6
    22c4:	7f 92       	push	r7
    22c6:	8f 92       	push	r8
    22c8:	9f 92       	push	r9
    22ca:	af 92       	push	r10
    22cc:	bf 92       	push	r11
    22ce:	cf 92       	push	r12
    22d0:	df 92       	push	r13
    22d2:	ef 92       	push	r14
    22d4:	ff 92       	push	r15
    22d6:	0f 93       	push	r16
    22d8:	1f 93       	push	r17
    22da:	2f 93       	push	r18
    22dc:	3f 93       	push	r19
    22de:	4f 93       	push	r20
    22e0:	5f 93       	push	r21
    22e2:	6f 93       	push	r22
    22e4:	7f 93       	push	r23
    22e6:	8f 93       	push	r24
    22e8:	9f 93       	push	r25
    22ea:	af 93       	push	r26
    22ec:	bf 93       	push	r27
    22ee:	cf 93       	push	r28
    22f0:	df 93       	push	r29
    22f2:	ef 93       	push	r30
    22f4:	ff 93       	push	r31
    22f6:	a0 91 ec 06 	lds	r26, 0x06EC
    22fa:	b0 91 ed 06 	lds	r27, 0x06ED
    22fe:	0d b6       	in	r0, 0x3d	; 61
    2300:	0d 92       	st	X+, r0
    2302:	0e b6       	in	r0, 0x3e	; 62
    2304:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    2306:	0e 94 99 19 	call	0x3332	; 0x3332 <vTaskIncrementTick>
	vTaskSwitchContext();
    230a:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    230e:	a0 91 ec 06 	lds	r26, 0x06EC
    2312:	b0 91 ed 06 	lds	r27, 0x06ED
    2316:	cd 91       	ld	r28, X+
    2318:	cd bf       	out	0x3d, r28	; 61
    231a:	dd 91       	ld	r29, X+
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	ff 91       	pop	r31
    2320:	ef 91       	pop	r30
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	bf 91       	pop	r27
    2328:	af 91       	pop	r26
    232a:	9f 91       	pop	r25
    232c:	8f 91       	pop	r24
    232e:	7f 91       	pop	r23
    2330:	6f 91       	pop	r22
    2332:	5f 91       	pop	r21
    2334:	4f 91       	pop	r20
    2336:	3f 91       	pop	r19
    2338:	2f 91       	pop	r18
    233a:	1f 91       	pop	r17
    233c:	0f 91       	pop	r16
    233e:	ff 90       	pop	r15
    2340:	ef 90       	pop	r14
    2342:	df 90       	pop	r13
    2344:	cf 90       	pop	r12
    2346:	bf 90       	pop	r11
    2348:	af 90       	pop	r10
    234a:	9f 90       	pop	r9
    234c:	8f 90       	pop	r8
    234e:	7f 90       	pop	r7
    2350:	6f 90       	pop	r6
    2352:	5f 90       	pop	r5
    2354:	4f 90       	pop	r4
    2356:	3f 90       	pop	r3
    2358:	2f 90       	pop	r2
    235a:	1f 90       	pop	r1
    235c:	0f 90       	pop	r0
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2362:	08 95       	ret

00002364 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	00 d0       	rcall	.+0      	; 0x236a <prvSetupTimerInterrupt+0x6>
    236a:	00 d0       	rcall	.+0      	; 0x236c <prvSetupTimerInterrupt+0x8>
    236c:	00 d0       	rcall	.+0      	; 0x236e <prvSetupTimerInterrupt+0xa>
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    2372:	80 e4       	ldi	r24, 0x40	; 64
    2374:	9f e1       	ldi	r25, 0x1F	; 31
    2376:	a0 e0       	ldi	r26, 0x00	; 0
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	8b 83       	std	Y+3, r24	; 0x03
    237c:	9c 83       	std	Y+4, r25	; 0x04
    237e:	ad 83       	std	Y+5, r26	; 0x05
    2380:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	9c 81       	ldd	r25, Y+4	; 0x04
    2386:	ad 81       	ldd	r26, Y+5	; 0x05
    2388:	be 81       	ldd	r27, Y+6	; 0x06
    238a:	68 94       	set
    238c:	15 f8       	bld	r1, 5
    238e:	b6 95       	lsr	r27
    2390:	a7 95       	ror	r26
    2392:	97 95       	ror	r25
    2394:	87 95       	ror	r24
    2396:	16 94       	lsr	r1
    2398:	d1 f7       	brne	.-12     	; 0x238e <prvSetupTimerInterrupt+0x2a>
    239a:	8b 83       	std	Y+3, r24	; 0x03
    239c:	9c 83       	std	Y+4, r25	; 0x04
    239e:	ad 83       	std	Y+5, r26	; 0x05
    23a0:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	9c 81       	ldd	r25, Y+4	; 0x04
    23a6:	ad 81       	ldd	r26, Y+5	; 0x05
    23a8:	be 81       	ldd	r27, Y+6	; 0x06
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	a1 09       	sbc	r26, r1
    23ae:	b1 09       	sbc	r27, r1
    23b0:	8b 83       	std	Y+3, r24	; 0x03
    23b2:	9c 83       	std	Y+4, r25	; 0x04
    23b4:	ad 83       	std	Y+5, r26	; 0x05
    23b6:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	ad 81       	ldd	r26, Y+5	; 0x05
    23c2:	be 81       	ldd	r27, Y+6	; 0x06
    23c4:	89 2f       	mov	r24, r25
    23c6:	9a 2f       	mov	r25, r26
    23c8:	ab 2f       	mov	r26, r27
    23ca:	bb 27       	eor	r27, r27
    23cc:	8b 83       	std	Y+3, r24	; 0x03
    23ce:	9c 83       	std	Y+4, r25	; 0x04
    23d0:	ad 83       	std	Y+5, r26	; 0x05
    23d2:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    23d8:	eb e4       	ldi	r30, 0x4B	; 75
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	8a 81       	ldd	r24, Y+2	; 0x02
    23de:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    23e0:	ea e4       	ldi	r30, 0x4A	; 74
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    23e8:	8b e0       	ldi	r24, 0x0B	; 11
    23ea:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    23ec:	ee e4       	ldi	r30, 0x4E	; 78
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    23f4:	e9 e5       	ldi	r30, 0x59	; 89
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	80 61       	ori	r24, 0x10	; 16
    2400:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    2402:	e9 e5       	ldi	r30, 0x59	; 89
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	80 83       	st	Z, r24
}
    240a:	26 96       	adiw	r28, 0x06	; 6
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    241c:	0e 94 57 11 	call	0x22ae	; 0x22ae <vPortYieldFromTick>
		asm volatile ( "reti" );
    2420:	18 95       	reti

00002422 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	28 97       	sbiw	r28, 0x08	; 8
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	8f 83       	std	Y+7, r24	; 0x07
    2438:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    243a:	1a 82       	std	Y+2, r1	; 0x02
    243c:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    243e:	8f 81       	ldd	r24, Y+7	; 0x07
    2440:	88 23       	and	r24, r24
    2442:	09 f4       	brne	.+2      	; 0x2446 <xQueueCreate+0x24>
    2444:	8c c0       	rjmp	.+280    	; 0x255e <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2446:	8f e1       	ldi	r24, 0x1F	; 31
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <pvPortMalloc>
    244e:	9e 83       	std	Y+6, r25	; 0x06
    2450:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    2452:	8d 81       	ldd	r24, Y+5	; 0x05
    2454:	9e 81       	ldd	r25, Y+6	; 0x06
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	09 f4       	brne	.+2      	; 0x245c <xQueueCreate+0x3a>
    245a:	81 c0       	rjmp	.+258    	; 0x255e <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    245c:	8f 81       	ldd	r24, Y+7	; 0x07
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	88 85       	ldd	r24, Y+8	; 0x08
    2464:	88 2f       	mov	r24, r24
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	ac 01       	movw	r20, r24
    246a:	24 9f       	mul	r18, r20
    246c:	c0 01       	movw	r24, r0
    246e:	25 9f       	mul	r18, r21
    2470:	90 0d       	add	r25, r0
    2472:	34 9f       	mul	r19, r20
    2474:	90 0d       	add	r25, r0
    2476:	11 24       	eor	r1, r1
    2478:	01 96       	adiw	r24, 0x01	; 1
    247a:	9c 83       	std	Y+4, r25	; 0x04
    247c:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	9c 81       	ldd	r25, Y+4	; 0x04
    2482:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <pvPortMalloc>
    2486:	ed 81       	ldd	r30, Y+5	; 0x05
    2488:	fe 81       	ldd	r31, Y+6	; 0x06
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    248e:	ed 81       	ldd	r30, Y+5	; 0x05
    2490:	fe 81       	ldd	r31, Y+6	; 0x06
    2492:	80 81       	ld	r24, Z
    2494:	91 81       	ldd	r25, Z+1	; 0x01
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	09 f4       	brne	.+2      	; 0x249c <xQueueCreate+0x7a>
    249a:	5d c0       	rjmp	.+186    	; 0x2556 <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    249c:	ed 81       	ldd	r30, Y+5	; 0x05
    249e:	fe 81       	ldd	r31, Y+6	; 0x06
    24a0:	40 81       	ld	r20, Z
    24a2:	51 81       	ldd	r21, Z+1	; 0x01
    24a4:	8f 81       	ldd	r24, Y+7	; 0x07
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	88 85       	ldd	r24, Y+8	; 0x08
    24ac:	88 2f       	mov	r24, r24
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	bc 01       	movw	r22, r24
    24b2:	26 9f       	mul	r18, r22
    24b4:	c0 01       	movw	r24, r0
    24b6:	27 9f       	mul	r18, r23
    24b8:	90 0d       	add	r25, r0
    24ba:	36 9f       	mul	r19, r22
    24bc:	90 0d       	add	r25, r0
    24be:	11 24       	eor	r1, r1
    24c0:	84 0f       	add	r24, r20
    24c2:	95 1f       	adc	r25, r21
    24c4:	ed 81       	ldd	r30, Y+5	; 0x05
    24c6:	fe 81       	ldd	r31, Y+6	; 0x06
    24c8:	93 83       	std	Z+3, r25	; 0x03
    24ca:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    24cc:	ed 81       	ldd	r30, Y+5	; 0x05
    24ce:	fe 81       	ldd	r31, Y+6	; 0x06
    24d0:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    24d2:	ed 81       	ldd	r30, Y+5	; 0x05
    24d4:	fe 81       	ldd	r31, Y+6	; 0x06
    24d6:	80 81       	ld	r24, Z
    24d8:	91 81       	ldd	r25, Z+1	; 0x01
    24da:	ed 81       	ldd	r30, Y+5	; 0x05
    24dc:	fe 81       	ldd	r31, Y+6	; 0x06
    24de:	95 83       	std	Z+5, r25	; 0x05
    24e0:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    24e2:	ed 81       	ldd	r30, Y+5	; 0x05
    24e4:	fe 81       	ldd	r31, Y+6	; 0x06
    24e6:	40 81       	ld	r20, Z
    24e8:	51 81       	ldd	r21, Z+1	; 0x01
    24ea:	8f 81       	ldd	r24, Y+7	; 0x07
    24ec:	88 2f       	mov	r24, r24
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	9c 01       	movw	r18, r24
    24f2:	21 50       	subi	r18, 0x01	; 1
    24f4:	30 40       	sbci	r19, 0x00	; 0
    24f6:	88 85       	ldd	r24, Y+8	; 0x08
    24f8:	88 2f       	mov	r24, r24
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	bc 01       	movw	r22, r24
    24fe:	26 9f       	mul	r18, r22
    2500:	c0 01       	movw	r24, r0
    2502:	27 9f       	mul	r18, r23
    2504:	90 0d       	add	r25, r0
    2506:	36 9f       	mul	r19, r22
    2508:	90 0d       	add	r25, r0
    250a:	11 24       	eor	r1, r1
    250c:	84 0f       	add	r24, r20
    250e:	95 1f       	adc	r25, r21
    2510:	ed 81       	ldd	r30, Y+5	; 0x05
    2512:	fe 81       	ldd	r31, Y+6	; 0x06
    2514:	97 83       	std	Z+7, r25	; 0x07
    2516:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    2518:	ed 81       	ldd	r30, Y+5	; 0x05
    251a:	fe 81       	ldd	r31, Y+6	; 0x06
    251c:	8f 81       	ldd	r24, Y+7	; 0x07
    251e:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    2520:	ed 81       	ldd	r30, Y+5	; 0x05
    2522:	fe 81       	ldd	r31, Y+6	; 0x06
    2524:	88 85       	ldd	r24, Y+8	; 0x08
    2526:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    2528:	ed 81       	ldd	r30, Y+5	; 0x05
    252a:	fe 81       	ldd	r31, Y+6	; 0x06
    252c:	8f ef       	ldi	r24, 0xFF	; 255
    252e:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    2530:	ed 81       	ldd	r30, Y+5	; 0x05
    2532:	fe 81       	ldd	r31, Y+6	; 0x06
    2534:	8f ef       	ldi	r24, 0xFF	; 255
    2536:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2538:	8d 81       	ldd	r24, Y+5	; 0x05
    253a:	9e 81       	ldd	r25, Y+6	; 0x06
    253c:	08 96       	adiw	r24, 0x08	; 8
    253e:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	9e 81       	ldd	r25, Y+6	; 0x06
    2546:	41 96       	adiw	r24, 0x11	; 17
    2548:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	9a 83       	std	Y+2, r25	; 0x02
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	04 c0       	rjmp	.+8      	; 0x255e <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    2556:	8d 81       	ldd	r24, Y+5	; 0x05
    2558:	9e 81       	ldd	r25, Y+6	; 0x06
    255a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2562:	28 96       	adiw	r28, 0x08	; 8
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	2c 97       	sbiw	r28, 0x0c	; 12
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	9e 83       	std	Y+6, r25	; 0x06
    258a:	8d 83       	std	Y+5, r24	; 0x05
    258c:	78 87       	std	Y+8, r23	; 0x08
    258e:	6f 83       	std	Y+7, r22	; 0x07
    2590:	5a 87       	std	Y+10, r21	; 0x0a
    2592:	49 87       	std	Y+9, r20	; 0x09
    2594:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2596:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    259e:	ed 81       	ldd	r30, Y+5	; 0x05
    25a0:	fe 81       	ldd	r31, Y+6	; 0x06
    25a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    25a4:	ed 81       	ldd	r30, Y+5	; 0x05
    25a6:	fe 81       	ldd	r31, Y+6	; 0x06
    25a8:	83 8d       	ldd	r24, Z+27	; 0x1b
    25aa:	98 17       	cp	r25, r24
    25ac:	d8 f4       	brcc	.+54     	; 0x25e4 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    25ae:	8d 81       	ldd	r24, Y+5	; 0x05
    25b0:	9e 81       	ldd	r25, Y+6	; 0x06
    25b2:	2f 81       	ldd	r18, Y+7	; 0x07
    25b4:	38 85       	ldd	r19, Y+8	; 0x08
    25b6:	b9 01       	movw	r22, r18
    25b8:	4b 85       	ldd	r20, Y+11	; 0x0b
    25ba:	0e 94 f5 14 	call	0x29ea	; 0x29ea <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    25be:	ed 81       	ldd	r30, Y+5	; 0x05
    25c0:	fe 81       	ldd	r31, Y+6	; 0x06
    25c2:	81 89       	ldd	r24, Z+17	; 0x11
    25c4:	88 23       	and	r24, r24
    25c6:	49 f0       	breq	.+18     	; 0x25da <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    25c8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ca:	9e 81       	ldd	r25, Y+6	; 0x06
    25cc:	41 96       	adiw	r24, 0x11	; 17
    25ce:	0e 94 0a 1b 	call	0x3614	; 0x3614 <xTaskRemoveFromEventList>
    25d2:	81 30       	cpi	r24, 0x01	; 1
    25d4:	11 f4       	brne	.+4      	; 0x25da <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    25d6:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    25da:	0f 90       	pop	r0
    25dc:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	8c 87       	std	Y+12, r24	; 0x0c
    25e2:	5c c0       	rjmp	.+184    	; 0x269c <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    25e4:	89 85       	ldd	r24, Y+9	; 0x09
    25e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	21 f4       	brne	.+8      	; 0x25f4 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    25ec:	0f 90       	pop	r0
    25ee:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    25f0:	1c 86       	std	Y+12, r1	; 0x0c
    25f2:	54 c0       	rjmp	.+168    	; 0x269c <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	88 23       	and	r24, r24
    25f8:	31 f4       	brne	.+12     	; 0x2606 <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    25fa:	ce 01       	movw	r24, r28
    25fc:	02 96       	adiw	r24, 0x02	; 2
    25fe:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    2606:	0f 90       	pop	r0
    2608:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    260a:	0e 94 ce 18 	call	0x319c	; 0x319c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	0f 92       	push	r0
    2614:	ed 81       	ldd	r30, Y+5	; 0x05
    2616:	fe 81       	ldd	r31, Y+6	; 0x06
    2618:	85 8d       	ldd	r24, Z+29	; 0x1d
    261a:	8f 3f       	cpi	r24, 0xFF	; 255
    261c:	19 f4       	brne	.+6      	; 0x2624 <xQueueGenericSend+0xb0>
    261e:	ed 81       	ldd	r30, Y+5	; 0x05
    2620:	fe 81       	ldd	r31, Y+6	; 0x06
    2622:	15 8e       	std	Z+29, r1	; 0x1d
    2624:	ed 81       	ldd	r30, Y+5	; 0x05
    2626:	fe 81       	ldd	r31, Y+6	; 0x06
    2628:	86 8d       	ldd	r24, Z+30	; 0x1e
    262a:	8f 3f       	cpi	r24, 0xFF	; 255
    262c:	19 f4       	brne	.+6      	; 0x2634 <xQueueGenericSend+0xc0>
    262e:	ed 81       	ldd	r30, Y+5	; 0x05
    2630:	fe 81       	ldd	r31, Y+6	; 0x06
    2632:	16 8e       	std	Z+30, r1	; 0x1e
    2634:	0f 90       	pop	r0
    2636:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2638:	ce 01       	movw	r24, r28
    263a:	02 96       	adiw	r24, 0x02	; 2
    263c:	9e 01       	movw	r18, r28
    263e:	27 5f       	subi	r18, 0xF7	; 247
    2640:	3f 4f       	sbci	r19, 0xFF	; 255
    2642:	b9 01       	movw	r22, r18
    2644:	0e 94 8b 1b 	call	0x3716	; 0x3716 <xTaskCheckForTimeOut>
    2648:	88 23       	and	r24, r24
    264a:	09 f5       	brne	.+66     	; 0x268e <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    264c:	8d 81       	ldd	r24, Y+5	; 0x05
    264e:	9e 81       	ldd	r25, Y+6	; 0x06
    2650:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <prvIsQueueFull>
    2654:	88 23       	and	r24, r24
    2656:	a1 f0       	breq	.+40     	; 0x2680 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2658:	8d 81       	ldd	r24, Y+5	; 0x05
    265a:	9e 81       	ldd	r25, Y+6	; 0x06
    265c:	08 96       	adiw	r24, 0x08	; 8
    265e:	29 85       	ldd	r18, Y+9	; 0x09
    2660:	3a 85       	ldd	r19, Y+10	; 0x0a
    2662:	b9 01       	movw	r22, r18
    2664:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2668:	8d 81       	ldd	r24, Y+5	; 0x05
    266a:	9e 81       	ldd	r25, Y+6	; 0x06
    266c:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2670:	0e 94 da 18 	call	0x31b4	; 0x31b4 <xTaskResumeAll>
    2674:	88 23       	and	r24, r24
    2676:	09 f0       	breq	.+2      	; 0x267a <xQueueGenericSend+0x106>
    2678:	8f cf       	rjmp	.-226    	; 0x2598 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    267a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vPortYield>
    267e:	8c cf       	rjmp	.-232    	; 0x2598 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2680:	8d 81       	ldd	r24, Y+5	; 0x05
    2682:	9e 81       	ldd	r25, Y+6	; 0x06
    2684:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2688:	0e 94 da 18 	call	0x31b4	; 0x31b4 <xTaskResumeAll>
    268c:	85 cf       	rjmp	.-246    	; 0x2598 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2696:	0e 94 da 18 	call	0x31b4	; 0x31b4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    269a:	1c 86       	std	Y+12, r1	; 0x0c
    269c:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    269e:	2c 96       	adiw	r28, 0x0c	; 12
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	29 97       	sbiw	r28, 0x09	; 9
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	f8 94       	cli
    26be:	de bf       	out	0x3e, r29	; 62
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	cd bf       	out	0x3d, r28	; 61
    26c4:	9c 83       	std	Y+4, r25	; 0x04
    26c6:	8b 83       	std	Y+3, r24	; 0x03
    26c8:	7e 83       	std	Y+6, r23	; 0x06
    26ca:	6d 83       	std	Y+5, r22	; 0x05
    26cc:	58 87       	std	Y+8, r21	; 0x08
    26ce:	4f 83       	std	Y+7, r20	; 0x07
    26d0:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    26d2:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    26d4:	eb 81       	ldd	r30, Y+3	; 0x03
    26d6:	fc 81       	ldd	r31, Y+4	; 0x04
    26d8:	92 8d       	ldd	r25, Z+26	; 0x1a
    26da:	eb 81       	ldd	r30, Y+3	; 0x03
    26dc:	fc 81       	ldd	r31, Y+4	; 0x04
    26de:	83 8d       	ldd	r24, Z+27	; 0x1b
    26e0:	98 17       	cp	r25, r24
    26e2:	40 f5       	brcc	.+80     	; 0x2734 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    26e4:	8b 81       	ldd	r24, Y+3	; 0x03
    26e6:	9c 81       	ldd	r25, Y+4	; 0x04
    26e8:	2d 81       	ldd	r18, Y+5	; 0x05
    26ea:	3e 81       	ldd	r19, Y+6	; 0x06
    26ec:	b9 01       	movw	r22, r18
    26ee:	49 85       	ldd	r20, Y+9	; 0x09
    26f0:	0e 94 f5 14 	call	0x29ea	; 0x29ea <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    26f4:	eb 81       	ldd	r30, Y+3	; 0x03
    26f6:	fc 81       	ldd	r31, Y+4	; 0x04
    26f8:	86 8d       	ldd	r24, Z+30	; 0x1e
    26fa:	8f 3f       	cpi	r24, 0xFF	; 255
    26fc:	89 f4       	brne	.+34     	; 0x2720 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    26fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2700:	fc 81       	ldd	r31, Y+4	; 0x04
    2702:	81 89       	ldd	r24, Z+17	; 0x11
    2704:	88 23       	and	r24, r24
    2706:	99 f0       	breq	.+38     	; 0x272e <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	41 96       	adiw	r24, 0x11	; 17
    270e:	0e 94 0a 1b 	call	0x3614	; 0x3614 <xTaskRemoveFromEventList>
    2712:	88 23       	and	r24, r24
    2714:	61 f0       	breq	.+24     	; 0x272e <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2716:	ef 81       	ldd	r30, Y+7	; 0x07
    2718:	f8 85       	ldd	r31, Y+8	; 0x08
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	80 83       	st	Z, r24
    271e:	07 c0       	rjmp	.+14     	; 0x272e <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2720:	eb 81       	ldd	r30, Y+3	; 0x03
    2722:	fc 81       	ldd	r31, Y+4	; 0x04
    2724:	86 8d       	ldd	r24, Z+30	; 0x1e
    2726:	8f 5f       	subi	r24, 0xFF	; 255
    2728:	eb 81       	ldd	r30, Y+3	; 0x03
    272a:	fc 81       	ldd	r31, Y+4	; 0x04
    272c:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	8a 83       	std	Y+2, r24	; 0x02
    2732:	01 c0       	rjmp	.+2      	; 0x2736 <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2734:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2738:	29 96       	adiw	r28, 0x09	; 9
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret

0000274a <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
    2752:	2e 97       	sbiw	r28, 0x0e	; 14
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	de bf       	out	0x3e, r29	; 62
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	cd bf       	out	0x3d, r28	; 61
    275e:	98 87       	std	Y+8, r25	; 0x08
    2760:	8f 83       	std	Y+7, r24	; 0x07
    2762:	7a 87       	std	Y+10, r23	; 0x0a
    2764:	69 87       	std	Y+9, r22	; 0x09
    2766:	5c 87       	std	Y+12, r21	; 0x0c
    2768:	4b 87       	std	Y+11, r20	; 0x0b
    276a:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    276c:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2774:	ef 81       	ldd	r30, Y+7	; 0x07
    2776:	f8 85       	ldd	r31, Y+8	; 0x08
    2778:	82 8d       	ldd	r24, Z+26	; 0x1a
    277a:	88 23       	and	r24, r24
    277c:	09 f4       	brne	.+2      	; 0x2780 <xQueueGenericReceive+0x36>
    277e:	3f c0       	rjmp	.+126    	; 0x27fe <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2780:	ef 81       	ldd	r30, Y+7	; 0x07
    2782:	f8 85       	ldd	r31, Y+8	; 0x08
    2784:	86 81       	ldd	r24, Z+6	; 0x06
    2786:	97 81       	ldd	r25, Z+7	; 0x07
    2788:	9a 83       	std	Y+2, r25	; 0x02
    278a:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    278c:	8f 81       	ldd	r24, Y+7	; 0x07
    278e:	98 85       	ldd	r25, Y+8	; 0x08
    2790:	29 85       	ldd	r18, Y+9	; 0x09
    2792:	3a 85       	ldd	r19, Y+10	; 0x0a
    2794:	b9 01       	movw	r22, r18
    2796:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    279a:	8d 85       	ldd	r24, Y+13	; 0x0d
    279c:	88 23       	and	r24, r24
    279e:	b1 f4       	brne	.+44     	; 0x27cc <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    27a0:	ef 81       	ldd	r30, Y+7	; 0x07
    27a2:	f8 85       	ldd	r31, Y+8	; 0x08
    27a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    27a6:	81 50       	subi	r24, 0x01	; 1
    27a8:	ef 81       	ldd	r30, Y+7	; 0x07
    27aa:	f8 85       	ldd	r31, Y+8	; 0x08
    27ac:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    27ae:	ef 81       	ldd	r30, Y+7	; 0x07
    27b0:	f8 85       	ldd	r31, Y+8	; 0x08
    27b2:	80 85       	ldd	r24, Z+8	; 0x08
    27b4:	88 23       	and	r24, r24
    27b6:	f1 f0       	breq	.+60     	; 0x27f4 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    27b8:	8f 81       	ldd	r24, Y+7	; 0x07
    27ba:	98 85       	ldd	r25, Y+8	; 0x08
    27bc:	08 96       	adiw	r24, 0x08	; 8
    27be:	0e 94 0a 1b 	call	0x3614	; 0x3614 <xTaskRemoveFromEventList>
    27c2:	81 30       	cpi	r24, 0x01	; 1
    27c4:	b9 f4       	brne	.+46     	; 0x27f4 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    27c6:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vPortYield>
    27ca:	14 c0       	rjmp	.+40     	; 0x27f4 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    27cc:	ef 81       	ldd	r30, Y+7	; 0x07
    27ce:	f8 85       	ldd	r31, Y+8	; 0x08
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	9a 81       	ldd	r25, Y+2	; 0x02
    27d4:	97 83       	std	Z+7, r25	; 0x07
    27d6:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    27d8:	ef 81       	ldd	r30, Y+7	; 0x07
    27da:	f8 85       	ldd	r31, Y+8	; 0x08
    27dc:	81 89       	ldd	r24, Z+17	; 0x11
    27de:	88 23       	and	r24, r24
    27e0:	49 f0       	breq	.+18     	; 0x27f4 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    27e2:	8f 81       	ldd	r24, Y+7	; 0x07
    27e4:	98 85       	ldd	r25, Y+8	; 0x08
    27e6:	41 96       	adiw	r24, 0x11	; 17
    27e8:	0e 94 0a 1b 	call	0x3614	; 0x3614 <xTaskRemoveFromEventList>
    27ec:	88 23       	and	r24, r24
    27ee:	11 f0       	breq	.+4      	; 0x27f4 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    27f0:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    27f4:	0f 90       	pop	r0
    27f6:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	8e 87       	std	Y+14, r24	; 0x0e
    27fc:	5c c0       	rjmp	.+184    	; 0x28b6 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    27fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2800:	9c 85       	ldd	r25, Y+12	; 0x0c
    2802:	00 97       	sbiw	r24, 0x00	; 0
    2804:	21 f4       	brne	.+8      	; 0x280e <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2806:	0f 90       	pop	r0
    2808:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    280a:	1e 86       	std	Y+14, r1	; 0x0e
    280c:	54 c0       	rjmp	.+168    	; 0x28b6 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    280e:	8b 81       	ldd	r24, Y+3	; 0x03
    2810:	88 23       	and	r24, r24
    2812:	31 f4       	brne	.+12     	; 0x2820 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2814:	ce 01       	movw	r24, r28
    2816:	04 96       	adiw	r24, 0x04	; 4
    2818:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    2820:	0f 90       	pop	r0
    2822:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2824:	0e 94 ce 18 	call	0x319c	; 0x319c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	0f 92       	push	r0
    282e:	ef 81       	ldd	r30, Y+7	; 0x07
    2830:	f8 85       	ldd	r31, Y+8	; 0x08
    2832:	85 8d       	ldd	r24, Z+29	; 0x1d
    2834:	8f 3f       	cpi	r24, 0xFF	; 255
    2836:	19 f4       	brne	.+6      	; 0x283e <xQueueGenericReceive+0xf4>
    2838:	ef 81       	ldd	r30, Y+7	; 0x07
    283a:	f8 85       	ldd	r31, Y+8	; 0x08
    283c:	15 8e       	std	Z+29, r1	; 0x1d
    283e:	ef 81       	ldd	r30, Y+7	; 0x07
    2840:	f8 85       	ldd	r31, Y+8	; 0x08
    2842:	86 8d       	ldd	r24, Z+30	; 0x1e
    2844:	8f 3f       	cpi	r24, 0xFF	; 255
    2846:	19 f4       	brne	.+6      	; 0x284e <xQueueGenericReceive+0x104>
    2848:	ef 81       	ldd	r30, Y+7	; 0x07
    284a:	f8 85       	ldd	r31, Y+8	; 0x08
    284c:	16 8e       	std	Z+30, r1	; 0x1e
    284e:	0f 90       	pop	r0
    2850:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2852:	ce 01       	movw	r24, r28
    2854:	04 96       	adiw	r24, 0x04	; 4
    2856:	9e 01       	movw	r18, r28
    2858:	25 5f       	subi	r18, 0xF5	; 245
    285a:	3f 4f       	sbci	r19, 0xFF	; 255
    285c:	b9 01       	movw	r22, r18
    285e:	0e 94 8b 1b 	call	0x3716	; 0x3716 <xTaskCheckForTimeOut>
    2862:	88 23       	and	r24, r24
    2864:	09 f5       	brne	.+66     	; 0x28a8 <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2866:	8f 81       	ldd	r24, Y+7	; 0x07
    2868:	98 85       	ldd	r25, Y+8	; 0x08
    286a:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <prvIsQueueEmpty>
    286e:	88 23       	and	r24, r24
    2870:	a1 f0       	breq	.+40     	; 0x289a <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2872:	8f 81       	ldd	r24, Y+7	; 0x07
    2874:	98 85       	ldd	r25, Y+8	; 0x08
    2876:	41 96       	adiw	r24, 0x11	; 17
    2878:	2b 85       	ldd	r18, Y+11	; 0x0b
    287a:	3c 85       	ldd	r19, Y+12	; 0x0c
    287c:	b9 01       	movw	r22, r18
    287e:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2882:	8f 81       	ldd	r24, Y+7	; 0x07
    2884:	98 85       	ldd	r25, Y+8	; 0x08
    2886:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    288a:	0e 94 da 18 	call	0x31b4	; 0x31b4 <xTaskResumeAll>
    288e:	88 23       	and	r24, r24
    2890:	09 f0       	breq	.+2      	; 0x2894 <xQueueGenericReceive+0x14a>
    2892:	6d cf       	rjmp	.-294    	; 0x276e <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    2894:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vPortYield>
    2898:	6a cf       	rjmp	.-300    	; 0x276e <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    289a:	8f 81       	ldd	r24, Y+7	; 0x07
    289c:	98 85       	ldd	r25, Y+8	; 0x08
    289e:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    28a2:	0e 94 da 18 	call	0x31b4	; 0x31b4 <xTaskResumeAll>
    28a6:	63 cf       	rjmp	.-314    	; 0x276e <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    28a8:	8f 81       	ldd	r24, Y+7	; 0x07
    28aa:	98 85       	ldd	r25, Y+8	; 0x08
    28ac:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    28b0:	0e 94 da 18 	call	0x31b4	; 0x31b4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    28b4:	1e 86       	std	Y+14, r1	; 0x0e
    28b6:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    28b8:	2e 96       	adiw	r28, 0x0e	; 14
    28ba:	0f b6       	in	r0, 0x3f	; 63
    28bc:	f8 94       	cli
    28be:	de bf       	out	0x3e, r29	; 62
    28c0:	0f be       	out	0x3f, r0	; 63
    28c2:	cd bf       	out	0x3d, r28	; 61
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	08 95       	ret

000028ca <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
    28d2:	28 97       	sbiw	r28, 0x08	; 8
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	f8 94       	cli
    28d8:	de bf       	out	0x3e, r29	; 62
    28da:	0f be       	out	0x3f, r0	; 63
    28dc:	cd bf       	out	0x3d, r28	; 61
    28de:	9c 83       	std	Y+4, r25	; 0x04
    28e0:	8b 83       	std	Y+3, r24	; 0x03
    28e2:	7e 83       	std	Y+6, r23	; 0x06
    28e4:	6d 83       	std	Y+5, r22	; 0x05
    28e6:	58 87       	std	Y+8, r21	; 0x08
    28e8:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    28ea:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    28ec:	eb 81       	ldd	r30, Y+3	; 0x03
    28ee:	fc 81       	ldd	r31, Y+4	; 0x04
    28f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    28f2:	88 23       	and	r24, r24
    28f4:	71 f1       	breq	.+92     	; 0x2952 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	9c 81       	ldd	r25, Y+4	; 0x04
    28fa:	2d 81       	ldd	r18, Y+5	; 0x05
    28fc:	3e 81       	ldd	r19, Y+6	; 0x06
    28fe:	b9 01       	movw	r22, r18
    2900:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    2904:	eb 81       	ldd	r30, Y+3	; 0x03
    2906:	fc 81       	ldd	r31, Y+4	; 0x04
    2908:	82 8d       	ldd	r24, Z+26	; 0x1a
    290a:	81 50       	subi	r24, 0x01	; 1
    290c:	eb 81       	ldd	r30, Y+3	; 0x03
    290e:	fc 81       	ldd	r31, Y+4	; 0x04
    2910:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2912:	eb 81       	ldd	r30, Y+3	; 0x03
    2914:	fc 81       	ldd	r31, Y+4	; 0x04
    2916:	85 8d       	ldd	r24, Z+29	; 0x1d
    2918:	8f 3f       	cpi	r24, 0xFF	; 255
    291a:	89 f4       	brne	.+34     	; 0x293e <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    291c:	eb 81       	ldd	r30, Y+3	; 0x03
    291e:	fc 81       	ldd	r31, Y+4	; 0x04
    2920:	80 85       	ldd	r24, Z+8	; 0x08
    2922:	88 23       	and	r24, r24
    2924:	99 f0       	breq	.+38     	; 0x294c <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	9c 81       	ldd	r25, Y+4	; 0x04
    292a:	08 96       	adiw	r24, 0x08	; 8
    292c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <xTaskRemoveFromEventList>
    2930:	88 23       	and	r24, r24
    2932:	61 f0       	breq	.+24     	; 0x294c <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    2934:	ef 81       	ldd	r30, Y+7	; 0x07
    2936:	f8 85       	ldd	r31, Y+8	; 0x08
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	80 83       	st	Z, r24
    293c:	07 c0       	rjmp	.+14     	; 0x294c <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    293e:	eb 81       	ldd	r30, Y+3	; 0x03
    2940:	fc 81       	ldd	r31, Y+4	; 0x04
    2942:	85 8d       	ldd	r24, Z+29	; 0x1d
    2944:	8f 5f       	subi	r24, 0xFF	; 255
    2946:	eb 81       	ldd	r30, Y+3	; 0x03
    2948:	fc 81       	ldd	r31, Y+4	; 0x04
    294a:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	8a 83       	std	Y+2, r24	; 0x02
    2950:	01 c0       	rjmp	.+2      	; 0x2954 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    2952:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2954:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2956:	28 96       	adiw	r28, 0x08	; 8
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	08 95       	ret

00002968 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	00 d0       	rcall	.+0      	; 0x296e <uxQueueMessagesWaiting+0x6>
    296e:	0f 92       	push	r0
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	9b 83       	std	Y+3, r25	; 0x03
    2976:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    297e:	ea 81       	ldd	r30, Y+2	; 0x02
    2980:	fb 81       	ldd	r31, Y+3	; 0x03
    2982:	82 8d       	ldd	r24, Z+26	; 0x1a
    2984:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    2986:	0f 90       	pop	r0
    2988:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    298a:	89 81       	ldd	r24, Y+1	; 0x01
}
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	cf 91       	pop	r28
    2994:	df 91       	pop	r29
    2996:	08 95       	ret

00002998 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    2998:	df 93       	push	r29
    299a:	cf 93       	push	r28
    299c:	00 d0       	rcall	.+0      	; 0x299e <uxQueueMessagesWaitingFromISR+0x6>
    299e:	0f 92       	push	r0
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
    29a4:	9b 83       	std	Y+3, r25	; 0x03
    29a6:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    29a8:	ea 81       	ldd	r30, Y+2	; 0x02
    29aa:	fb 81       	ldd	r31, Y+3	; 0x03
    29ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    29ae:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	cf 91       	pop	r28
    29ba:	df 91       	pop	r29
    29bc:	08 95       	ret

000029be <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	00 d0       	rcall	.+0      	; 0x29c4 <vQueueDelete+0x6>
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
    29c8:	9a 83       	std	Y+2, r25	; 0x02
    29ca:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    29cc:	e9 81       	ldd	r30, Y+1	; 0x01
    29ce:	fa 81       	ldd	r31, Y+2	; 0x02
    29d0:	80 81       	ld	r24, Z
    29d2:	91 81       	ldd	r25, Z+1	; 0x01
    29d4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <vPortFree>
	vPortFree( pxQueue );
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	9a 81       	ldd	r25, Y+2	; 0x02
    29dc:	0e 94 b4 0c 	call	0x1968	; 0x1968 <vPortFree>
}
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <prvCopyDataToQueue+0x6>
    29f0:	00 d0       	rcall	.+0      	; 0x29f2 <prvCopyDataToQueue+0x8>
    29f2:	0f 92       	push	r0
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	9a 83       	std	Y+2, r25	; 0x02
    29fa:	89 83       	std	Y+1, r24	; 0x01
    29fc:	7c 83       	std	Y+4, r23	; 0x04
    29fe:	6b 83       	std	Y+3, r22	; 0x03
    2a00:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    2a02:	e9 81       	ldd	r30, Y+1	; 0x01
    2a04:	fa 81       	ldd	r31, Y+2	; 0x02
    2a06:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a08:	88 23       	and	r24, r24
    2a0a:	09 f4       	brne	.+2      	; 0x2a0e <prvCopyDataToQueue+0x24>
    2a0c:	74 c0       	rjmp	.+232    	; 0x2af6 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    2a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a10:	88 23       	and	r24, r24
    2a12:	99 f5       	brne	.+102    	; 0x2a7a <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    2a14:	e9 81       	ldd	r30, Y+1	; 0x01
    2a16:	fa 81       	ldd	r31, Y+2	; 0x02
    2a18:	64 81       	ldd	r22, Z+4	; 0x04
    2a1a:	75 81       	ldd	r23, Z+5	; 0x05
    2a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a20:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a22:	48 2f       	mov	r20, r24
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	2b 81       	ldd	r18, Y+3	; 0x03
    2a28:	3c 81       	ldd	r19, Y+4	; 0x04
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	b9 01       	movw	r22, r18
    2a2e:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2a32:	e9 81       	ldd	r30, Y+1	; 0x01
    2a34:	fa 81       	ldd	r31, Y+2	; 0x02
    2a36:	24 81       	ldd	r18, Z+4	; 0x04
    2a38:	35 81       	ldd	r19, Z+5	; 0x05
    2a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a3e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a40:	88 2f       	mov	r24, r24
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	82 0f       	add	r24, r18
    2a46:	93 1f       	adc	r25, r19
    2a48:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4c:	95 83       	std	Z+5, r25	; 0x05
    2a4e:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    2a50:	e9 81       	ldd	r30, Y+1	; 0x01
    2a52:	fa 81       	ldd	r31, Y+2	; 0x02
    2a54:	24 81       	ldd	r18, Z+4	; 0x04
    2a56:	35 81       	ldd	r19, Z+5	; 0x05
    2a58:	e9 81       	ldd	r30, Y+1	; 0x01
    2a5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5c:	82 81       	ldd	r24, Z+2	; 0x02
    2a5e:	93 81       	ldd	r25, Z+3	; 0x03
    2a60:	28 17       	cp	r18, r24
    2a62:	39 07       	cpc	r19, r25
    2a64:	08 f4       	brcc	.+2      	; 0x2a68 <prvCopyDataToQueue+0x7e>
    2a66:	47 c0       	rjmp	.+142    	; 0x2af6 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2a68:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6c:	80 81       	ld	r24, Z
    2a6e:	91 81       	ldd	r25, Z+1	; 0x01
    2a70:	e9 81       	ldd	r30, Y+1	; 0x01
    2a72:	fa 81       	ldd	r31, Y+2	; 0x02
    2a74:	95 83       	std	Z+5, r25	; 0x05
    2a76:	84 83       	std	Z+4, r24	; 0x04
    2a78:	3e c0       	rjmp	.+124    	; 0x2af6 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    2a7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a7e:	66 81       	ldd	r22, Z+6	; 0x06
    2a80:	77 81       	ldd	r23, Z+7	; 0x07
    2a82:	e9 81       	ldd	r30, Y+1	; 0x01
    2a84:	fa 81       	ldd	r31, Y+2	; 0x02
    2a86:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a88:	48 2f       	mov	r20, r24
    2a8a:	50 e0       	ldi	r21, 0x00	; 0
    2a8c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a8e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a90:	cb 01       	movw	r24, r22
    2a92:	b9 01       	movw	r22, r18
    2a94:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    2a98:	e9 81       	ldd	r30, Y+1	; 0x01
    2a9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a9c:	26 81       	ldd	r18, Z+6	; 0x06
    2a9e:	37 81       	ldd	r19, Z+7	; 0x07
    2aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa4:	84 8d       	ldd	r24, Z+28	; 0x1c
    2aa6:	88 2f       	mov	r24, r24
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	90 95       	com	r25
    2aac:	81 95       	neg	r24
    2aae:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab0:	82 0f       	add	r24, r18
    2ab2:	93 1f       	adc	r25, r19
    2ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab8:	97 83       	std	Z+7, r25	; 0x07
    2aba:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    2abc:	e9 81       	ldd	r30, Y+1	; 0x01
    2abe:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac0:	26 81       	ldd	r18, Z+6	; 0x06
    2ac2:	37 81       	ldd	r19, Z+7	; 0x07
    2ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac8:	80 81       	ld	r24, Z
    2aca:	91 81       	ldd	r25, Z+1	; 0x01
    2acc:	28 17       	cp	r18, r24
    2ace:	39 07       	cpc	r19, r25
    2ad0:	90 f4       	brcc	.+36     	; 0x2af6 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2ad2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad6:	22 81       	ldd	r18, Z+2	; 0x02
    2ad8:	33 81       	ldd	r19, Z+3	; 0x03
    2ada:	e9 81       	ldd	r30, Y+1	; 0x01
    2adc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ade:	84 8d       	ldd	r24, Z+28	; 0x1c
    2ae0:	88 2f       	mov	r24, r24
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	90 95       	com	r25
    2ae6:	81 95       	neg	r24
    2ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aea:	82 0f       	add	r24, r18
    2aec:	93 1f       	adc	r25, r19
    2aee:	e9 81       	ldd	r30, Y+1	; 0x01
    2af0:	fa 81       	ldd	r31, Y+2	; 0x02
    2af2:	97 83       	std	Z+7, r25	; 0x07
    2af4:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2af6:	e9 81       	ldd	r30, Y+1	; 0x01
    2af8:	fa 81       	ldd	r31, Y+2	; 0x02
    2afa:	82 8d       	ldd	r24, Z+26	; 0x1a
    2afc:	8f 5f       	subi	r24, 0xFF	; 255
    2afe:	e9 81       	ldd	r30, Y+1	; 0x01
    2b00:	fa 81       	ldd	r31, Y+2	; 0x02
    2b02:	82 8f       	std	Z+26, r24	; 0x1a
}
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	cf 91       	pop	r28
    2b10:	df 91       	pop	r29
    2b12:	08 95       	ret

00002b14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	00 d0       	rcall	.+0      	; 0x2b1a <prvCopyDataFromQueue+0x6>
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <prvCopyDataFromQueue+0x8>
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
    2b20:	9a 83       	std	Y+2, r25	; 0x02
    2b22:	89 83       	std	Y+1, r24	; 0x01
    2b24:	7c 83       	std	Y+4, r23	; 0x04
    2b26:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    2b28:	e9 81       	ldd	r30, Y+1	; 0x01
    2b2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2c:	80 81       	ld	r24, Z
    2b2e:	91 81       	ldd	r25, Z+1	; 0x01
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	89 f1       	breq	.+98     	; 0x2b96 <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    2b34:	e9 81       	ldd	r30, Y+1	; 0x01
    2b36:	fa 81       	ldd	r31, Y+2	; 0x02
    2b38:	26 81       	ldd	r18, Z+6	; 0x06
    2b3a:	37 81       	ldd	r19, Z+7	; 0x07
    2b3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b40:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b42:	88 2f       	mov	r24, r24
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	82 0f       	add	r24, r18
    2b48:	93 1f       	adc	r25, r19
    2b4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b4e:	97 83       	std	Z+7, r25	; 0x07
    2b50:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    2b52:	e9 81       	ldd	r30, Y+1	; 0x01
    2b54:	fa 81       	ldd	r31, Y+2	; 0x02
    2b56:	26 81       	ldd	r18, Z+6	; 0x06
    2b58:	37 81       	ldd	r19, Z+7	; 0x07
    2b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b5e:	82 81       	ldd	r24, Z+2	; 0x02
    2b60:	93 81       	ldd	r25, Z+3	; 0x03
    2b62:	28 17       	cp	r18, r24
    2b64:	39 07       	cpc	r19, r25
    2b66:	40 f0       	brcs	.+16     	; 0x2b78 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    2b68:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b6c:	80 81       	ld	r24, Z
    2b6e:	91 81       	ldd	r25, Z+1	; 0x01
    2b70:	e9 81       	ldd	r30, Y+1	; 0x01
    2b72:	fa 81       	ldd	r31, Y+2	; 0x02
    2b74:	97 83       	std	Z+7, r25	; 0x07
    2b76:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    2b78:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7c:	46 81       	ldd	r20, Z+6	; 0x06
    2b7e:	57 81       	ldd	r21, Z+7	; 0x07
    2b80:	e9 81       	ldd	r30, Y+1	; 0x01
    2b82:	fa 81       	ldd	r31, Y+2	; 0x02
    2b84:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8e:	ba 01       	movw	r22, r20
    2b90:	a9 01       	movw	r20, r18
    2b92:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <memcpy>
	}
}
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	00 d0       	rcall	.+0      	; 0x2baa <prvUnlockQueue+0x6>
    2baa:	cd b7       	in	r28, 0x3d	; 61
    2bac:	de b7       	in	r29, 0x3e	; 62
    2bae:	9a 83       	std	Y+2, r25	; 0x02
    2bb0:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	0f 92       	push	r0
    2bb8:	15 c0       	rjmp	.+42     	; 0x2be4 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2bba:	e9 81       	ldd	r30, Y+1	; 0x01
    2bbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2bbe:	81 89       	ldd	r24, Z+17	; 0x11
    2bc0:	88 23       	and	r24, r24
    2bc2:	a9 f0       	breq	.+42     	; 0x2bee <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc8:	41 96       	adiw	r24, 0x11	; 17
    2bca:	0e 94 0a 1b 	call	0x3614	; 0x3614 <xTaskRemoveFromEventList>
    2bce:	88 23       	and	r24, r24
    2bd0:	11 f0       	breq	.+4      	; 0x2bd6 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    2bd2:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    2bd6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bda:	86 8d       	ldd	r24, Z+30	; 0x1e
    2bdc:	81 50       	subi	r24, 0x01	; 1
    2bde:	e9 81       	ldd	r30, Y+1	; 0x01
    2be0:	fa 81       	ldd	r31, Y+2	; 0x02
    2be2:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2be4:	e9 81       	ldd	r30, Y+1	; 0x01
    2be6:	fa 81       	ldd	r31, Y+2	; 0x02
    2be8:	86 8d       	ldd	r24, Z+30	; 0x1e
    2bea:	18 16       	cp	r1, r24
    2bec:	34 f3       	brlt	.-52     	; 0x2bba <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2bee:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf2:	8f ef       	ldi	r24, 0xFF	; 255
    2bf4:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    2bf6:	0f 90       	pop	r0
    2bf8:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	0f 92       	push	r0
    2c00:	15 c0       	rjmp	.+42     	; 0x2c2c <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2c02:	e9 81       	ldd	r30, Y+1	; 0x01
    2c04:	fa 81       	ldd	r31, Y+2	; 0x02
    2c06:	80 85       	ldd	r24, Z+8	; 0x08
    2c08:	88 23       	and	r24, r24
    2c0a:	a9 f0       	breq	.+42     	; 0x2c36 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
    2c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c10:	08 96       	adiw	r24, 0x08	; 8
    2c12:	0e 94 0a 1b 	call	0x3614	; 0x3614 <xTaskRemoveFromEventList>
    2c16:	88 23       	and	r24, r24
    2c18:	11 f0       	breq	.+4      	; 0x2c1e <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    2c1a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    2c1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c20:	fa 81       	ldd	r31, Y+2	; 0x02
    2c22:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c24:	81 50       	subi	r24, 0x01	; 1
    2c26:	e9 81       	ldd	r30, Y+1	; 0x01
    2c28:	fa 81       	ldd	r31, Y+2	; 0x02
    2c2a:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2c2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c30:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c32:	18 16       	cp	r1, r24
    2c34:	34 f3       	brlt	.-52     	; 0x2c02 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2c36:	e9 81       	ldd	r30, Y+1	; 0x01
    2c38:	fa 81       	ldd	r31, Y+2	; 0x02
    2c3a:	8f ef       	ldi	r24, 0xFF	; 255
    2c3c:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    2c3e:	0f 90       	pop	r0
    2c40:	0f be       	out	0x3f, r0	; 63
}
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	08 95       	ret

00002c4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	00 d0       	rcall	.+0      	; 0x2c52 <prvIsQueueEmpty+0x6>
    2c52:	0f 92       	push	r0
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	9b 83       	std	Y+3, r25	; 0x03
    2c5a:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2c62:	ea 81       	ldd	r30, Y+2	; 0x02
    2c64:	fb 81       	ldd	r31, Y+3	; 0x03
    2c66:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c68:	19 82       	std	Y+1, r1	; 0x01
    2c6a:	88 23       	and	r24, r24
    2c6c:	11 f4       	brne	.+4      	; 0x2c72 <prvIsQueueEmpty+0x26>
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    2c72:	0f 90       	pop	r0
    2c74:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	08 95       	ret

00002c84 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    2c84:	df 93       	push	r29
    2c86:	cf 93       	push	r28
    2c88:	00 d0       	rcall	.+0      	; 0x2c8a <xQueueIsQueueEmptyFromISR+0x6>
    2c8a:	0f 92       	push	r0
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
    2c90:	9b 83       	std	Y+3, r25	; 0x03
    2c92:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2c94:	ea 81       	ldd	r30, Y+2	; 0x02
    2c96:	fb 81       	ldd	r31, Y+3	; 0x03
    2c98:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c9a:	19 82       	std	Y+1, r1	; 0x01
    2c9c:	88 23       	and	r24, r24
    2c9e:	11 f4       	brne	.+4      	; 0x2ca4 <xQueueIsQueueEmptyFromISR+0x20>
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <prvIsQueueFull+0x6>
    2cb8:	0f 92       	push	r0
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
    2cbe:	9b 83       	std	Y+3, r25	; 0x03
    2cc0:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    2cc2:	0f b6       	in	r0, 0x3f	; 63
    2cc4:	f8 94       	cli
    2cc6:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    2cc8:	ea 81       	ldd	r30, Y+2	; 0x02
    2cca:	fb 81       	ldd	r31, Y+3	; 0x03
    2ccc:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cce:	ea 81       	ldd	r30, Y+2	; 0x02
    2cd0:	fb 81       	ldd	r31, Y+3	; 0x03
    2cd2:	83 8d       	ldd	r24, Z+27	; 0x1b
    2cd4:	19 82       	std	Y+1, r1	; 0x01
    2cd6:	98 17       	cp	r25, r24
    2cd8:	11 f4       	brne	.+4      	; 0x2cde <prvIsQueueFull+0x2c>
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    2cde:	0f 90       	pop	r0
    2ce0:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	cf 91       	pop	r28
    2cec:	df 91       	pop	r29
    2cee:	08 95       	ret

00002cf0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	00 d0       	rcall	.+0      	; 0x2cf6 <xQueueIsQueueFullFromISR+0x6>
    2cf6:	0f 92       	push	r0
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
    2cfc:	9b 83       	std	Y+3, r25	; 0x03
    2cfe:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    2d00:	ea 81       	ldd	r30, Y+2	; 0x02
    2d02:	fb 81       	ldd	r31, Y+3	; 0x03
    2d04:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d06:	ea 81       	ldd	r30, Y+2	; 0x02
    2d08:	fb 81       	ldd	r31, Y+3	; 0x03
    2d0a:	83 8d       	ldd	r24, Z+27	; 0x1b
    2d0c:	19 82       	std	Y+1, r1	; 0x01
    2d0e:	98 17       	cp	r25, r24
    2d10:	11 f4       	brne	.+4      	; 0x2d16 <xQueueIsQueueFullFromISR+0x26>
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	cf 91       	pop	r28
    2d20:	df 91       	pop	r29
    2d22:	08 95       	ret

00002d24 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    2d24:	af 92       	push	r10
    2d26:	bf 92       	push	r11
    2d28:	cf 92       	push	r12
    2d2a:	df 92       	push	r13
    2d2c:	ef 92       	push	r14
    2d2e:	ff 92       	push	r15
    2d30:	0f 93       	push	r16
    2d32:	1f 93       	push	r17
    2d34:	df 93       	push	r29
    2d36:	cf 93       	push	r28
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	64 97       	sbiw	r28, 0x14	; 20
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
    2d48:	9f 83       	std	Y+7, r25	; 0x07
    2d4a:	8e 83       	std	Y+6, r24	; 0x06
    2d4c:	79 87       	std	Y+9, r23	; 0x09
    2d4e:	68 87       	std	Y+8, r22	; 0x08
    2d50:	5b 87       	std	Y+11, r21	; 0x0b
    2d52:	4a 87       	std	Y+10, r20	; 0x0a
    2d54:	3d 87       	std	Y+13, r19	; 0x0d
    2d56:	2c 87       	std	Y+12, r18	; 0x0c
    2d58:	0e 87       	std	Y+14, r16	; 0x0e
    2d5a:	f8 8a       	std	Y+16, r15	; 0x10
    2d5c:	ef 86       	std	Y+15, r14	; 0x0f
    2d5e:	da 8a       	std	Y+18, r13	; 0x12
    2d60:	c9 8a       	std	Y+17, r12	; 0x11
    2d62:	bc 8a       	std	Y+20, r11	; 0x14
    2d64:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    2d66:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d68:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d6a:	29 89       	ldd	r18, Y+17	; 0x11
    2d6c:	3a 89       	ldd	r19, Y+18	; 0x12
    2d6e:	b9 01       	movw	r22, r18
    2d70:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <prvAllocateTCBAndStack>
    2d74:	9c 83       	std	Y+4, r25	; 0x04
    2d76:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    2d78:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <xTaskGenericCreate+0x5e>
    2d80:	99 c0       	rjmp	.+306    	; 0x2eb4 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    2d82:	eb 81       	ldd	r30, Y+3	; 0x03
    2d84:	fc 81       	ldd	r31, Y+4	; 0x04
    2d86:	27 89       	ldd	r18, Z+23	; 0x17
    2d88:	30 8d       	ldd	r19, Z+24	; 0x18
    2d8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	82 0f       	add	r24, r18
    2d92:	93 1f       	adc	r25, r19
    2d94:	9a 83       	std	Y+2, r25	; 0x02
    2d96:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9c:	28 85       	ldd	r18, Y+8	; 0x08
    2d9e:	39 85       	ldd	r19, Y+9	; 0x09
    2da0:	eb 89       	ldd	r30, Y+19	; 0x13
    2da2:	fc 89       	ldd	r31, Y+20	; 0x14
    2da4:	aa 85       	ldd	r26, Y+10	; 0x0a
    2da6:	bb 85       	ldd	r27, Y+11	; 0x0b
    2da8:	b9 01       	movw	r22, r18
    2daa:	4e 85       	ldd	r20, Y+14	; 0x0e
    2dac:	9f 01       	movw	r18, r30
    2dae:	8d 01       	movw	r16, r26
    2db0:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	9a 81       	ldd	r25, Y+2	; 0x02
    2db8:	2e 81       	ldd	r18, Y+6	; 0x06
    2dba:	3f 81       	ldd	r19, Y+7	; 0x07
    2dbc:	4c 85       	ldd	r20, Y+12	; 0x0c
    2dbe:	5d 85       	ldd	r21, Y+13	; 0x0d
    2dc0:	b9 01       	movw	r22, r18
    2dc2:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <pxPortInitialiseStack>
    2dc6:	eb 81       	ldd	r30, Y+3	; 0x03
    2dc8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dca:	91 83       	std	Z+1, r25	; 0x01
    2dcc:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    2dce:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dd0:	98 89       	ldd	r25, Y+16	; 0x10
    2dd2:	00 97       	sbiw	r24, 0x00	; 0
    2dd4:	31 f0       	breq	.+12     	; 0x2de2 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    2dd6:	ef 85       	ldd	r30, Y+15	; 0x0f
    2dd8:	f8 89       	ldd	r31, Y+16	; 0x10
    2dda:	8b 81       	ldd	r24, Y+3	; 0x03
    2ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dde:	91 83       	std	Z+1, r25	; 0x01
    2de0:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    2de8:	80 91 ef 06 	lds	r24, 0x06EF
    2dec:	8f 5f       	subi	r24, 0xFF	; 255
    2dee:	80 93 ef 06 	sts	0x06EF, r24
			if( pxCurrentTCB == NULL )
    2df2:	80 91 ec 06 	lds	r24, 0x06EC
    2df6:	90 91 ed 06 	lds	r25, 0x06ED
    2dfa:	00 97       	sbiw	r24, 0x00	; 0
    2dfc:	69 f4       	brne	.+26     	; 0x2e18 <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    2dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2e00:	9c 81       	ldd	r25, Y+4	; 0x04
    2e02:	90 93 ed 06 	sts	0x06ED, r25
    2e06:	80 93 ec 06 	sts	0x06EC, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    2e0a:	80 91 ef 06 	lds	r24, 0x06EF
    2e0e:	81 30       	cpi	r24, 0x01	; 1
    2e10:	a9 f4       	brne	.+42     	; 0x2e3c <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    2e12:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <prvInitialiseTaskLists>
    2e16:	12 c0       	rjmp	.+36     	; 0x2e3c <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    2e18:	80 91 f4 06 	lds	r24, 0x06F4
    2e1c:	88 23       	and	r24, r24
    2e1e:	71 f4       	brne	.+28     	; 0x2e3c <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2e20:	e0 91 ec 06 	lds	r30, 0x06EC
    2e24:	f0 91 ed 06 	lds	r31, 0x06ED
    2e28:	96 89       	ldd	r25, Z+22	; 0x16
    2e2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e2c:	89 17       	cp	r24, r25
    2e2e:	30 f0       	brcs	.+12     	; 0x2e3c <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	9c 81       	ldd	r25, Y+4	; 0x04
    2e34:	90 93 ed 06 	sts	0x06ED, r25
    2e38:	80 93 ec 06 	sts	0x06EC, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    2e3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e40:	96 89       	ldd	r25, Z+22	; 0x16
    2e42:	80 91 f2 06 	lds	r24, 0x06F2
    2e46:	89 17       	cp	r24, r25
    2e48:	28 f4       	brcc	.+10     	; 0x2e54 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    2e4a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e4c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e4e:	86 89       	ldd	r24, Z+22	; 0x16
    2e50:	80 93 f2 06 	sts	0x06F2, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    2e54:	80 91 f9 06 	lds	r24, 0x06F9
    2e58:	8f 5f       	subi	r24, 0xFF	; 255
    2e5a:	80 93 f9 06 	sts	0x06F9, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    2e5e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e60:	fc 81       	ldd	r31, Y+4	; 0x04
    2e62:	96 89       	ldd	r25, Z+22	; 0x16
    2e64:	80 91 f3 06 	lds	r24, 0x06F3
    2e68:	89 17       	cp	r24, r25
    2e6a:	28 f4       	brcc	.+10     	; 0x2e76 <xTaskGenericCreate+0x152>
    2e6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e70:	86 89       	ldd	r24, Z+22	; 0x16
    2e72:	80 93 f3 06 	sts	0x06F3, r24
    2e76:	eb 81       	ldd	r30, Y+3	; 0x03
    2e78:	fc 81       	ldd	r31, Y+4	; 0x04
    2e7a:	86 89       	ldd	r24, Z+22	; 0x16
    2e7c:	28 2f       	mov	r18, r24
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	c9 01       	movw	r24, r18
    2e82:	88 0f       	add	r24, r24
    2e84:	99 1f       	adc	r25, r25
    2e86:	88 0f       	add	r24, r24
    2e88:	99 1f       	adc	r25, r25
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25
    2e8e:	82 0f       	add	r24, r18
    2e90:	93 1f       	adc	r25, r19
    2e92:	ac 01       	movw	r20, r24
    2e94:	46 50       	subi	r20, 0x06	; 6
    2e96:	59 4f       	sbci	r21, 0xF9	; 249
    2e98:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9c:	9c 01       	movw	r18, r24
    2e9e:	2e 5f       	subi	r18, 0xFE	; 254
    2ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea2:	ca 01       	movw	r24, r20
    2ea4:	b9 01       	movw	r22, r18
    2ea6:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vListInsertEnd>

			xReturn = pdPASS;
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    2eae:	0f 90       	pop	r0
    2eb0:	0f be       	out	0x3f, r0	; 63
    2eb2:	02 c0       	rjmp	.+4      	; 0x2eb8 <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2eb4:	8f ef       	ldi	r24, 0xFF	; 255
    2eb6:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    2eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eba:	81 30       	cpi	r24, 0x01	; 1
    2ebc:	71 f4       	brne	.+28     	; 0x2eda <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    2ebe:	80 91 f4 06 	lds	r24, 0x06F4
    2ec2:	88 23       	and	r24, r24
    2ec4:	51 f0       	breq	.+20     	; 0x2eda <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    2ec6:	e0 91 ec 06 	lds	r30, 0x06EC
    2eca:	f0 91 ed 06 	lds	r31, 0x06ED
    2ece:	96 89       	ldd	r25, Z+22	; 0x16
    2ed0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ed2:	98 17       	cp	r25, r24
    2ed4:	10 f4       	brcc	.+4      	; 0x2eda <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    2ed6:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vPortYield>
			}
		}
	}

	return xReturn;
    2eda:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2edc:	64 96       	adiw	r28, 0x14	; 20
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	cf 91       	pop	r28
    2eea:	df 91       	pop	r29
    2eec:	1f 91       	pop	r17
    2eee:	0f 91       	pop	r16
    2ef0:	ff 90       	pop	r15
    2ef2:	ef 90       	pop	r14
    2ef4:	df 90       	pop	r13
    2ef6:	cf 90       	pop	r12
    2ef8:	bf 90       	pop	r11
    2efa:	af 90       	pop	r10
    2efc:	08 95       	ret

00002efe <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <vTaskDelete+0x6>
    2f04:	00 d0       	rcall	.+0      	; 0x2f06 <vTaskDelete+0x8>
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <vTaskDelete+0xa>
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	9c 83       	std	Y+4, r25	; 0x04
    2f0e:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    2f16:	20 91 ec 06 	lds	r18, 0x06EC
    2f1a:	30 91 ed 06 	lds	r19, 0x06ED
    2f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f20:	9c 81       	ldd	r25, Y+4	; 0x04
    2f22:	82 17       	cp	r24, r18
    2f24:	93 07       	cpc	r25, r19
    2f26:	11 f4       	brne	.+4      	; 0x2f2c <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    2f28:	1c 82       	std	Y+4, r1	; 0x04
    2f2a:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	39 f4       	brne	.+14     	; 0x2f42 <vTaskDelete+0x44>
    2f34:	80 91 ec 06 	lds	r24, 0x06EC
    2f38:	90 91 ed 06 	lds	r25, 0x06ED
    2f3c:	9e 83       	std	Y+6, r25	; 0x06
    2f3e:	8d 83       	std	Y+5, r24	; 0x05
    2f40:	04 c0       	rjmp	.+8      	; 0x2f4a <vTaskDelete+0x4c>
    2f42:	8b 81       	ldd	r24, Y+3	; 0x03
    2f44:	9c 81       	ldd	r25, Y+4	; 0x04
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	8d 83       	std	Y+5, r24	; 0x05
    2f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4e:	9a 83       	std	Y+2, r25	; 0x02
    2f50:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	9a 81       	ldd	r25, Y+2	; 0x02
    2f56:	02 96       	adiw	r24, 0x02	; 2
    2f58:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    2f5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f60:	84 89       	ldd	r24, Z+20	; 0x14
    2f62:	95 89       	ldd	r25, Z+21	; 0x15
    2f64:	00 97       	sbiw	r24, 0x00	; 0
    2f66:	29 f0       	breq	.+10     	; 0x2f72 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6c:	0c 96       	adiw	r24, 0x0c	; 12
    2f6e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2f72:	89 81       	ldd	r24, Y+1	; 0x01
    2f74:	9a 81       	ldd	r25, Y+2	; 0x02
    2f76:	9c 01       	movw	r18, r24
    2f78:	2e 5f       	subi	r18, 0xFE	; 254
    2f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7c:	8a e6       	ldi	r24, 0x6A	; 106
    2f7e:	97 e0       	ldi	r25, 0x07	; 7
    2f80:	b9 01       	movw	r22, r18
    2f82:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    2f86:	80 91 ee 06 	lds	r24, 0x06EE
    2f8a:	8f 5f       	subi	r24, 0xFF	; 255
    2f8c:	80 93 ee 06 	sts	0x06EE, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    2f90:	80 91 f9 06 	lds	r24, 0x06F9
    2f94:	8f 5f       	subi	r24, 0xFF	; 255
    2f96:	80 93 f9 06 	sts	0x06F9, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    2f9a:	0f 90       	pop	r0
    2f9c:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    2f9e:	80 91 f4 06 	lds	r24, 0x06F4
    2fa2:	88 23       	and	r24, r24
    2fa4:	31 f0       	breq	.+12     	; 0x2fb2 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2faa:	00 97       	sbiw	r24, 0x00	; 0
    2fac:	11 f4       	brne	.+4      	; 0x2fb2 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    2fae:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vPortYield>
			}
		}
	}
    2fb2:	26 96       	adiw	r28, 0x06	; 6
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	f8 94       	cli
    2fb8:	de bf       	out	0x3e, r29	; 62
    2fba:	0f be       	out	0x3f, r0	; 63
    2fbc:	cd bf       	out	0x3d, r28	; 61
    2fbe:	cf 91       	pop	r28
    2fc0:	df 91       	pop	r29
    2fc2:	08 95       	ret

00002fc4 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
    2fcc:	28 97       	sbiw	r28, 0x08	; 8
    2fce:	0f b6       	in	r0, 0x3f	; 63
    2fd0:	f8 94       	cli
    2fd2:	de bf       	out	0x3e, r29	; 62
    2fd4:	0f be       	out	0x3f, r0	; 63
    2fd6:	cd bf       	out	0x3d, r28	; 61
    2fd8:	9e 83       	std	Y+6, r25	; 0x06
    2fda:	8d 83       	std	Y+5, r24	; 0x05
    2fdc:	78 87       	std	Y+8, r23	; 0x08
    2fde:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    2fe0:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    2fe2:	0e 94 ce 18 	call	0x319c	; 0x319c <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    2fe6:	ed 81       	ldd	r30, Y+5	; 0x05
    2fe8:	fe 81       	ldd	r31, Y+6	; 0x06
    2fea:	20 81       	ld	r18, Z
    2fec:	31 81       	ldd	r19, Z+1	; 0x01
    2fee:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff0:	98 85       	ldd	r25, Y+8	; 0x08
    2ff2:	82 0f       	add	r24, r18
    2ff4:	93 1f       	adc	r25, r19
    2ff6:	9c 83       	std	Y+4, r25	; 0x04
    2ff8:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    2ffa:	ed 81       	ldd	r30, Y+5	; 0x05
    2ffc:	fe 81       	ldd	r31, Y+6	; 0x06
    2ffe:	20 81       	ld	r18, Z
    3000:	31 81       	ldd	r19, Z+1	; 0x01
    3002:	80 91 f0 06 	lds	r24, 0x06F0
    3006:	90 91 f1 06 	lds	r25, 0x06F1
    300a:	82 17       	cp	r24, r18
    300c:	93 07       	cpc	r25, r19
    300e:	a8 f4       	brcc	.+42     	; 0x303a <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    3010:	ed 81       	ldd	r30, Y+5	; 0x05
    3012:	fe 81       	ldd	r31, Y+6	; 0x06
    3014:	20 81       	ld	r18, Z
    3016:	31 81       	ldd	r19, Z+1	; 0x01
    3018:	8b 81       	ldd	r24, Y+3	; 0x03
    301a:	9c 81       	ldd	r25, Y+4	; 0x04
    301c:	82 17       	cp	r24, r18
    301e:	93 07       	cpc	r25, r19
    3020:	00 f5       	brcc	.+64     	; 0x3062 <vTaskDelayUntil+0x9e>
    3022:	20 91 f0 06 	lds	r18, 0x06F0
    3026:	30 91 f1 06 	lds	r19, 0x06F1
    302a:	8b 81       	ldd	r24, Y+3	; 0x03
    302c:	9c 81       	ldd	r25, Y+4	; 0x04
    302e:	28 17       	cp	r18, r24
    3030:	39 07       	cpc	r19, r25
    3032:	b8 f4       	brcc	.+46     	; 0x3062 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	89 83       	std	Y+1, r24	; 0x01
    3038:	14 c0       	rjmp	.+40     	; 0x3062 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    303a:	ed 81       	ldd	r30, Y+5	; 0x05
    303c:	fe 81       	ldd	r31, Y+6	; 0x06
    303e:	20 81       	ld	r18, Z
    3040:	31 81       	ldd	r19, Z+1	; 0x01
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	9c 81       	ldd	r25, Y+4	; 0x04
    3046:	82 17       	cp	r24, r18
    3048:	93 07       	cpc	r25, r19
    304a:	48 f0       	brcs	.+18     	; 0x305e <vTaskDelayUntil+0x9a>
    304c:	20 91 f0 06 	lds	r18, 0x06F0
    3050:	30 91 f1 06 	lds	r19, 0x06F1
    3054:	8b 81       	ldd	r24, Y+3	; 0x03
    3056:	9c 81       	ldd	r25, Y+4	; 0x04
    3058:	28 17       	cp	r18, r24
    305a:	39 07       	cpc	r19, r25
    305c:	10 f4       	brcc	.+4      	; 0x3062 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3062:	ed 81       	ldd	r30, Y+5	; 0x05
    3064:	fe 81       	ldd	r31, Y+6	; 0x06
    3066:	8b 81       	ldd	r24, Y+3	; 0x03
    3068:	9c 81       	ldd	r25, Y+4	; 0x04
    306a:	91 83       	std	Z+1, r25	; 0x01
    306c:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    306e:	89 81       	ldd	r24, Y+1	; 0x01
    3070:	88 23       	and	r24, r24
    3072:	59 f0       	breq	.+22     	; 0x308a <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3074:	80 91 ec 06 	lds	r24, 0x06EC
    3078:	90 91 ed 06 	lds	r25, 0x06ED
    307c:	02 96       	adiw	r24, 0x02	; 2
    307e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3082:	8b 81       	ldd	r24, Y+3	; 0x03
    3084:	9c 81       	ldd	r25, Y+4	; 0x04
    3086:	0e 94 ce 1c 	call	0x399c	; 0x399c <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    308a:	0e 94 da 18 	call	0x31b4	; 0x31b4 <xTaskResumeAll>
    308e:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3090:	8a 81       	ldd	r24, Y+2	; 0x02
    3092:	88 23       	and	r24, r24
    3094:	11 f4       	brne	.+4      	; 0x309a <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    3096:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vPortYield>
		}
	}
    309a:	28 96       	adiw	r28, 0x08	; 8
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	cd bf       	out	0x3d, r28	; 61
    30a6:	cf 91       	pop	r28
    30a8:	df 91       	pop	r29
    30aa:	08 95       	ret

000030ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    30ac:	df 93       	push	r29
    30ae:	cf 93       	push	r28
    30b0:	00 d0       	rcall	.+0      	; 0x30b2 <vTaskDelay+0x6>
    30b2:	00 d0       	rcall	.+0      	; 0x30b4 <vTaskDelay+0x8>
    30b4:	0f 92       	push	r0
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
    30ba:	9d 83       	std	Y+5, r25	; 0x05
    30bc:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    30be:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    30c0:	8c 81       	ldd	r24, Y+4	; 0x04
    30c2:	9d 81       	ldd	r25, Y+5	; 0x05
    30c4:	00 97       	sbiw	r24, 0x00	; 0
    30c6:	d1 f0       	breq	.+52     	; 0x30fc <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    30c8:	0e 94 ce 18 	call	0x319c	; 0x319c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    30cc:	20 91 f0 06 	lds	r18, 0x06F0
    30d0:	30 91 f1 06 	lds	r19, 0x06F1
    30d4:	8c 81       	ldd	r24, Y+4	; 0x04
    30d6:	9d 81       	ldd	r25, Y+5	; 0x05
    30d8:	82 0f       	add	r24, r18
    30da:	93 1f       	adc	r25, r19
    30dc:	9b 83       	std	Y+3, r25	; 0x03
    30de:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    30e0:	80 91 ec 06 	lds	r24, 0x06EC
    30e4:	90 91 ed 06 	lds	r25, 0x06ED
    30e8:	02 96       	adiw	r24, 0x02	; 2
    30ea:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    30ee:	8a 81       	ldd	r24, Y+2	; 0x02
    30f0:	9b 81       	ldd	r25, Y+3	; 0x03
    30f2:	0e 94 ce 1c 	call	0x399c	; 0x399c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    30f6:	0e 94 da 18 	call	0x31b4	; 0x31b4 <xTaskResumeAll>
    30fa:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    30fc:	89 81       	ldd	r24, Y+1	; 0x01
    30fe:	88 23       	and	r24, r24
    3100:	11 f4       	brne	.+4      	; 0x3106 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    3102:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vPortYield>
		}
	}
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	0f 90       	pop	r0
    3110:	cf 91       	pop	r28
    3112:	df 91       	pop	r29
    3114:	08 95       	ret

00003116 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3116:	af 92       	push	r10
    3118:	bf 92       	push	r11
    311a:	cf 92       	push	r12
    311c:	df 92       	push	r13
    311e:	ef 92       	push	r14
    3120:	ff 92       	push	r15
    3122:	0f 93       	push	r16
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	0f 92       	push	r0
    312a:	cd b7       	in	r28, 0x3d	; 61
    312c:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    312e:	20 e6       	ldi	r18, 0x60	; 96
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	82 ef       	ldi	r24, 0xF2	; 242
    3134:	9b e1       	ldi	r25, 0x1B	; 27
    3136:	b9 01       	movw	r22, r18
    3138:	4a e5       	ldi	r20, 0x5A	; 90
    313a:	50 e0       	ldi	r21, 0x00	; 0
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	00 e0       	ldi	r16, 0x00	; 0
    3142:	ee 24       	eor	r14, r14
    3144:	ff 24       	eor	r15, r15
    3146:	cc 24       	eor	r12, r12
    3148:	dd 24       	eor	r13, r13
    314a:	aa 24       	eor	r10, r10
    314c:	bb 24       	eor	r11, r11
    314e:	0e 94 92 16 	call	0x2d24	; 0x2d24 <xTaskGenericCreate>
    3152:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	81 30       	cpi	r24, 0x01	; 1
    3158:	51 f4       	brne	.+20     	; 0x316e <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    315a:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	80 93 f4 06 	sts	0x06F4, r24
		xTickCount = ( portTickType ) 0U;
    3162:	10 92 f1 06 	sts	0x06F1, r1
    3166:	10 92 f0 06 	sts	0x06F0, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    316a:	0e 94 c2 10 	call	0x2184	; 0x2184 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    316e:	0f 90       	pop	r0
    3170:	cf 91       	pop	r28
    3172:	df 91       	pop	r29
    3174:	0f 91       	pop	r16
    3176:	ff 90       	pop	r15
    3178:	ef 90       	pop	r14
    317a:	df 90       	pop	r13
    317c:	cf 90       	pop	r12
    317e:	bf 90       	pop	r11
    3180:	af 90       	pop	r10
    3182:	08 95       	ret

00003184 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3184:	df 93       	push	r29
    3186:	cf 93       	push	r28
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    318c:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    318e:	10 92 f4 06 	sts	0x06F4, r1
	vPortEndScheduler();
    3192:	0e 94 f7 10 	call	0x21ee	; 0x21ee <vPortEndScheduler>
}
    3196:	cf 91       	pop	r28
    3198:	df 91       	pop	r29
    319a:	08 95       	ret

0000319c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    319c:	df 93       	push	r29
    319e:	cf 93       	push	r28
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    31a4:	80 91 f5 06 	lds	r24, 0x06F5
    31a8:	8f 5f       	subi	r24, 0xFF	; 255
    31aa:	80 93 f5 06 	sts	0x06F5, r24
}
    31ae:	cf 91       	pop	r28
    31b0:	df 91       	pop	r29
    31b2:	08 95       	ret

000031b4 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    31b4:	df 93       	push	r29
    31b6:	cf 93       	push	r28
    31b8:	00 d0       	rcall	.+0      	; 0x31ba <xTaskResumeAll+0x6>
    31ba:	00 d0       	rcall	.+0      	; 0x31bc <xTaskResumeAll+0x8>
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    31c0:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    31c8:	80 91 f5 06 	lds	r24, 0x06F5
    31cc:	81 50       	subi	r24, 0x01	; 1
    31ce:	80 93 f5 06 	sts	0x06F5, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    31d2:	80 91 f5 06 	lds	r24, 0x06F5
    31d6:	88 23       	and	r24, r24
    31d8:	09 f0       	breq	.+2      	; 0x31dc <xTaskResumeAll+0x28>
    31da:	6c c0       	rjmp	.+216    	; 0x32b4 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    31dc:	80 91 ef 06 	lds	r24, 0x06EF
    31e0:	88 23       	and	r24, r24
    31e2:	09 f4       	brne	.+2      	; 0x31e6 <xTaskResumeAll+0x32>
    31e4:	67 c0       	rjmp	.+206    	; 0x32b4 <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    31e6:	19 82       	std	Y+1, r1	; 0x01
    31e8:	41 c0       	rjmp	.+130    	; 0x326c <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    31ea:	e0 91 66 07 	lds	r30, 0x0766
    31ee:	f0 91 67 07 	lds	r31, 0x0767
    31f2:	86 81       	ldd	r24, Z+6	; 0x06
    31f4:	97 81       	ldd	r25, Z+7	; 0x07
    31f6:	9c 83       	std	Y+4, r25	; 0x04
    31f8:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    31fa:	8b 81       	ldd	r24, Y+3	; 0x03
    31fc:	9c 81       	ldd	r25, Y+4	; 0x04
    31fe:	0c 96       	adiw	r24, 0x0c	; 12
    3200:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3204:	8b 81       	ldd	r24, Y+3	; 0x03
    3206:	9c 81       	ldd	r25, Y+4	; 0x04
    3208:	02 96       	adiw	r24, 0x02	; 2
    320a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    320e:	eb 81       	ldd	r30, Y+3	; 0x03
    3210:	fc 81       	ldd	r31, Y+4	; 0x04
    3212:	96 89       	ldd	r25, Z+22	; 0x16
    3214:	80 91 f3 06 	lds	r24, 0x06F3
    3218:	89 17       	cp	r24, r25
    321a:	28 f4       	brcc	.+10     	; 0x3226 <xTaskResumeAll+0x72>
    321c:	eb 81       	ldd	r30, Y+3	; 0x03
    321e:	fc 81       	ldd	r31, Y+4	; 0x04
    3220:	86 89       	ldd	r24, Z+22	; 0x16
    3222:	80 93 f3 06 	sts	0x06F3, r24
    3226:	eb 81       	ldd	r30, Y+3	; 0x03
    3228:	fc 81       	ldd	r31, Y+4	; 0x04
    322a:	86 89       	ldd	r24, Z+22	; 0x16
    322c:	28 2f       	mov	r18, r24
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	c9 01       	movw	r24, r18
    3232:	88 0f       	add	r24, r24
    3234:	99 1f       	adc	r25, r25
    3236:	88 0f       	add	r24, r24
    3238:	99 1f       	adc	r25, r25
    323a:	88 0f       	add	r24, r24
    323c:	99 1f       	adc	r25, r25
    323e:	82 0f       	add	r24, r18
    3240:	93 1f       	adc	r25, r19
    3242:	86 50       	subi	r24, 0x06	; 6
    3244:	99 4f       	sbci	r25, 0xF9	; 249
    3246:	2b 81       	ldd	r18, Y+3	; 0x03
    3248:	3c 81       	ldd	r19, Y+4	; 0x04
    324a:	2e 5f       	subi	r18, 0xFE	; 254
    324c:	3f 4f       	sbci	r19, 0xFF	; 255
    324e:	b9 01       	movw	r22, r18
    3250:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3254:	eb 81       	ldd	r30, Y+3	; 0x03
    3256:	fc 81       	ldd	r31, Y+4	; 0x04
    3258:	96 89       	ldd	r25, Z+22	; 0x16
    325a:	e0 91 ec 06 	lds	r30, 0x06EC
    325e:	f0 91 ed 06 	lds	r31, 0x06ED
    3262:	86 89       	ldd	r24, Z+22	; 0x16
    3264:	98 17       	cp	r25, r24
    3266:	10 f0       	brcs	.+4      	; 0x326c <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    326c:	80 91 61 07 	lds	r24, 0x0761
    3270:	88 23       	and	r24, r24
    3272:	09 f0       	breq	.+2      	; 0x3276 <xTaskResumeAll+0xc2>
    3274:	ba cf       	rjmp	.-140    	; 0x31ea <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3276:	80 91 f6 06 	lds	r24, 0x06F6
    327a:	88 23       	and	r24, r24
    327c:	71 f0       	breq	.+28     	; 0x329a <xTaskResumeAll+0xe6>
    327e:	07 c0       	rjmp	.+14     	; 0x328e <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    3280:	0e 94 99 19 	call	0x3332	; 0x3332 <vTaskIncrementTick>
						--uxMissedTicks;
    3284:	80 91 f6 06 	lds	r24, 0x06F6
    3288:	81 50       	subi	r24, 0x01	; 1
    328a:	80 93 f6 06 	sts	0x06F6, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    328e:	80 91 f6 06 	lds	r24, 0x06F6
    3292:	88 23       	and	r24, r24
    3294:	a9 f7       	brne	.-22     	; 0x3280 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	81 30       	cpi	r24, 0x01	; 1
    329e:	21 f0       	breq	.+8      	; 0x32a8 <xTaskResumeAll+0xf4>
    32a0:	80 91 f7 06 	lds	r24, 0x06F7
    32a4:	81 30       	cpi	r24, 0x01	; 1
    32a6:	31 f4       	brne	.+12     	; 0x32b4 <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    32ac:	10 92 f7 06 	sts	0x06F7, r1
					portYIELD_WITHIN_API();
    32b0:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    32b4:	0f 90       	pop	r0
    32b6:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    32b8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	cf 91       	pop	r28
    32c4:	df 91       	pop	r29
    32c6:	08 95       	ret

000032c8 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    32c8:	df 93       	push	r29
    32ca:	cf 93       	push	r28
    32cc:	00 d0       	rcall	.+0      	; 0x32ce <xTaskGetTickCount+0x6>
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	f8 94       	cli
    32d6:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    32d8:	80 91 f0 06 	lds	r24, 0x06F0
    32dc:	90 91 f1 06 	lds	r25, 0x06F1
    32e0:	9a 83       	std	Y+2, r25	; 0x02
    32e2:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    32e4:	0f 90       	pop	r0
    32e6:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    32e8:	89 81       	ldd	r24, Y+1	; 0x01
    32ea:	9a 81       	ldd	r25, Y+2	; 0x02
}
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	cf 91       	pop	r28
    32f2:	df 91       	pop	r29
    32f4:	08 95       	ret

000032f6 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    32f6:	df 93       	push	r29
    32f8:	cf 93       	push	r28
    32fa:	00 d0       	rcall	.+0      	; 0x32fc <xTaskGetTickCountFromISR+0x6>
    32fc:	0f 92       	push	r0
    32fe:	cd b7       	in	r28, 0x3d	; 61
    3300:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3302:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    3304:	80 91 f0 06 	lds	r24, 0x06F0
    3308:	90 91 f1 06 	lds	r25, 0x06F1
    330c:	9b 83       	std	Y+3, r25	; 0x03
    330e:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3310:	8a 81       	ldd	r24, Y+2	; 0x02
    3312:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3314:	0f 90       	pop	r0
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	cf 91       	pop	r28
    331c:	df 91       	pop	r29
    331e:	08 95       	ret

00003320 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3320:	df 93       	push	r29
    3322:	cf 93       	push	r28
    3324:	cd b7       	in	r28, 0x3d	; 61
    3326:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3328:	80 91 ef 06 	lds	r24, 0x06EF
}
    332c:	cf 91       	pop	r28
    332e:	df 91       	pop	r29
    3330:	08 95       	ret

00003332 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3332:	df 93       	push	r29
    3334:	cf 93       	push	r28
    3336:	00 d0       	rcall	.+0      	; 0x3338 <vTaskIncrementTick+0x6>
    3338:	00 d0       	rcall	.+0      	; 0x333a <vTaskIncrementTick+0x8>
    333a:	00 d0       	rcall	.+0      	; 0x333c <vTaskIncrementTick+0xa>
    333c:	cd b7       	in	r28, 0x3d	; 61
    333e:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3340:	80 91 f5 06 	lds	r24, 0x06F5
    3344:	88 23       	and	r24, r24
    3346:	09 f0       	breq	.+2      	; 0x334a <vTaskIncrementTick+0x18>
    3348:	bb c0       	rjmp	.+374    	; 0x34c0 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    334a:	80 91 f0 06 	lds	r24, 0x06F0
    334e:	90 91 f1 06 	lds	r25, 0x06F1
    3352:	01 96       	adiw	r24, 0x01	; 1
    3354:	90 93 f1 06 	sts	0x06F1, r25
    3358:	80 93 f0 06 	sts	0x06F0, r24
		if( xTickCount == ( portTickType ) 0U )
    335c:	80 91 f0 06 	lds	r24, 0x06F0
    3360:	90 91 f1 06 	lds	r25, 0x06F1
    3364:	00 97       	sbiw	r24, 0x00	; 0
    3366:	d1 f5       	brne	.+116    	; 0x33dc <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3368:	80 91 5d 07 	lds	r24, 0x075D
    336c:	90 91 5e 07 	lds	r25, 0x075E
    3370:	9c 83       	std	Y+4, r25	; 0x04
    3372:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3374:	80 91 5f 07 	lds	r24, 0x075F
    3378:	90 91 60 07 	lds	r25, 0x0760
    337c:	90 93 5e 07 	sts	0x075E, r25
    3380:	80 93 5d 07 	sts	0x075D, r24
			pxOverflowDelayedTaskList = pxTemp;
    3384:	8b 81       	ldd	r24, Y+3	; 0x03
    3386:	9c 81       	ldd	r25, Y+4	; 0x04
    3388:	90 93 60 07 	sts	0x0760, r25
    338c:	80 93 5f 07 	sts	0x075F, r24
			xNumOfOverflows++;
    3390:	80 91 f8 06 	lds	r24, 0x06F8
    3394:	8f 5f       	subi	r24, 0xFF	; 255
    3396:	80 93 f8 06 	sts	0x06F8, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    339a:	e0 91 5d 07 	lds	r30, 0x075D
    339e:	f0 91 5e 07 	lds	r31, 0x075E
    33a2:	80 81       	ld	r24, Z
    33a4:	88 23       	and	r24, r24
    33a6:	39 f4       	brne	.+14     	; 0x33b6 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    33a8:	8f ef       	ldi	r24, 0xFF	; 255
    33aa:	9f ef       	ldi	r25, 0xFF	; 255
    33ac:	90 93 6e 00 	sts	0x006E, r25
    33b0:	80 93 6d 00 	sts	0x006D, r24
    33b4:	13 c0       	rjmp	.+38     	; 0x33dc <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    33b6:	e0 91 5d 07 	lds	r30, 0x075D
    33ba:	f0 91 5e 07 	lds	r31, 0x075E
    33be:	05 80       	ldd	r0, Z+5	; 0x05
    33c0:	f6 81       	ldd	r31, Z+6	; 0x06
    33c2:	e0 2d       	mov	r30, r0
    33c4:	86 81       	ldd	r24, Z+6	; 0x06
    33c6:	97 81       	ldd	r25, Z+7	; 0x07
    33c8:	9e 83       	std	Y+6, r25	; 0x06
    33ca:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    33cc:	ed 81       	ldd	r30, Y+5	; 0x05
    33ce:	fe 81       	ldd	r31, Y+6	; 0x06
    33d0:	82 81       	ldd	r24, Z+2	; 0x02
    33d2:	93 81       	ldd	r25, Z+3	; 0x03
    33d4:	90 93 6e 00 	sts	0x006E, r25
    33d8:	80 93 6d 00 	sts	0x006D, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    33dc:	20 91 f0 06 	lds	r18, 0x06F0
    33e0:	30 91 f1 06 	lds	r19, 0x06F1
    33e4:	80 91 6d 00 	lds	r24, 0x006D
    33e8:	90 91 6e 00 	lds	r25, 0x006E
    33ec:	28 17       	cp	r18, r24
    33ee:	39 07       	cpc	r19, r25
    33f0:	08 f4       	brcc	.+2      	; 0x33f4 <vTaskIncrementTick+0xc2>
    33f2:	6b c0       	rjmp	.+214    	; 0x34ca <vTaskIncrementTick+0x198>
    33f4:	e0 91 5d 07 	lds	r30, 0x075D
    33f8:	f0 91 5e 07 	lds	r31, 0x075E
    33fc:	80 81       	ld	r24, Z
    33fe:	88 23       	and	r24, r24
    3400:	39 f4       	brne	.+14     	; 0x3410 <vTaskIncrementTick+0xde>
    3402:	8f ef       	ldi	r24, 0xFF	; 255
    3404:	9f ef       	ldi	r25, 0xFF	; 255
    3406:	90 93 6e 00 	sts	0x006E, r25
    340a:	80 93 6d 00 	sts	0x006D, r24
    340e:	5d c0       	rjmp	.+186    	; 0x34ca <vTaskIncrementTick+0x198>
    3410:	e0 91 5d 07 	lds	r30, 0x075D
    3414:	f0 91 5e 07 	lds	r31, 0x075E
    3418:	05 80       	ldd	r0, Z+5	; 0x05
    341a:	f6 81       	ldd	r31, Z+6	; 0x06
    341c:	e0 2d       	mov	r30, r0
    341e:	86 81       	ldd	r24, Z+6	; 0x06
    3420:	97 81       	ldd	r25, Z+7	; 0x07
    3422:	9e 83       	std	Y+6, r25	; 0x06
    3424:	8d 83       	std	Y+5, r24	; 0x05
    3426:	ed 81       	ldd	r30, Y+5	; 0x05
    3428:	fe 81       	ldd	r31, Y+6	; 0x06
    342a:	82 81       	ldd	r24, Z+2	; 0x02
    342c:	93 81       	ldd	r25, Z+3	; 0x03
    342e:	9a 83       	std	Y+2, r25	; 0x02
    3430:	89 83       	std	Y+1, r24	; 0x01
    3432:	20 91 f0 06 	lds	r18, 0x06F0
    3436:	30 91 f1 06 	lds	r19, 0x06F1
    343a:	89 81       	ldd	r24, Y+1	; 0x01
    343c:	9a 81       	ldd	r25, Y+2	; 0x02
    343e:	28 17       	cp	r18, r24
    3440:	39 07       	cpc	r19, r25
    3442:	38 f4       	brcc	.+14     	; 0x3452 <vTaskIncrementTick+0x120>
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	9a 81       	ldd	r25, Y+2	; 0x02
    3448:	90 93 6e 00 	sts	0x006E, r25
    344c:	80 93 6d 00 	sts	0x006D, r24
    3450:	3c c0       	rjmp	.+120    	; 0x34ca <vTaskIncrementTick+0x198>
    3452:	8d 81       	ldd	r24, Y+5	; 0x05
    3454:	9e 81       	ldd	r25, Y+6	; 0x06
    3456:	02 96       	adiw	r24, 0x02	; 2
    3458:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>
    345c:	ed 81       	ldd	r30, Y+5	; 0x05
    345e:	fe 81       	ldd	r31, Y+6	; 0x06
    3460:	84 89       	ldd	r24, Z+20	; 0x14
    3462:	95 89       	ldd	r25, Z+21	; 0x15
    3464:	00 97       	sbiw	r24, 0x00	; 0
    3466:	29 f0       	breq	.+10     	; 0x3472 <vTaskIncrementTick+0x140>
    3468:	8d 81       	ldd	r24, Y+5	; 0x05
    346a:	9e 81       	ldd	r25, Y+6	; 0x06
    346c:	0c 96       	adiw	r24, 0x0c	; 12
    346e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>
    3472:	ed 81       	ldd	r30, Y+5	; 0x05
    3474:	fe 81       	ldd	r31, Y+6	; 0x06
    3476:	96 89       	ldd	r25, Z+22	; 0x16
    3478:	80 91 f3 06 	lds	r24, 0x06F3
    347c:	89 17       	cp	r24, r25
    347e:	28 f4       	brcc	.+10     	; 0x348a <vTaskIncrementTick+0x158>
    3480:	ed 81       	ldd	r30, Y+5	; 0x05
    3482:	fe 81       	ldd	r31, Y+6	; 0x06
    3484:	86 89       	ldd	r24, Z+22	; 0x16
    3486:	80 93 f3 06 	sts	0x06F3, r24
    348a:	ed 81       	ldd	r30, Y+5	; 0x05
    348c:	fe 81       	ldd	r31, Y+6	; 0x06
    348e:	86 89       	ldd	r24, Z+22	; 0x16
    3490:	28 2f       	mov	r18, r24
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	c9 01       	movw	r24, r18
    3496:	88 0f       	add	r24, r24
    3498:	99 1f       	adc	r25, r25
    349a:	88 0f       	add	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	88 0f       	add	r24, r24
    34a0:	99 1f       	adc	r25, r25
    34a2:	82 0f       	add	r24, r18
    34a4:	93 1f       	adc	r25, r19
    34a6:	ac 01       	movw	r20, r24
    34a8:	46 50       	subi	r20, 0x06	; 6
    34aa:	59 4f       	sbci	r21, 0xF9	; 249
    34ac:	8d 81       	ldd	r24, Y+5	; 0x05
    34ae:	9e 81       	ldd	r25, Y+6	; 0x06
    34b0:	9c 01       	movw	r18, r24
    34b2:	2e 5f       	subi	r18, 0xFE	; 254
    34b4:	3f 4f       	sbci	r19, 0xFF	; 255
    34b6:	ca 01       	movw	r24, r20
    34b8:	b9 01       	movw	r22, r18
    34ba:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vListInsertEnd>
    34be:	9a cf       	rjmp	.-204    	; 0x33f4 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    34c0:	80 91 f6 06 	lds	r24, 0x06F6
    34c4:	8f 5f       	subi	r24, 0xFF	; 255
    34c6:	80 93 f6 06 	sts	0x06F6, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    34ca:	26 96       	adiw	r28, 0x06	; 6
    34cc:	0f b6       	in	r0, 0x3f	; 63
    34ce:	f8 94       	cli
    34d0:	de bf       	out	0x3e, r29	; 62
    34d2:	0f be       	out	0x3f, r0	; 63
    34d4:	cd bf       	out	0x3d, r28	; 61
    34d6:	cf 91       	pop	r28
    34d8:	df 91       	pop	r29
    34da:	08 95       	ret

000034dc <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    34dc:	df 93       	push	r29
    34de:	cf 93       	push	r28
    34e0:	00 d0       	rcall	.+0      	; 0x34e2 <vTaskSwitchContext+0x6>
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    34e6:	80 91 f5 06 	lds	r24, 0x06F5
    34ea:	88 23       	and	r24, r24
    34ec:	49 f0       	breq	.+18     	; 0x3500 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	80 93 f7 06 	sts	0x06F7, r24
    34f4:	54 c0       	rjmp	.+168    	; 0x359e <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    34f6:	80 91 f3 06 	lds	r24, 0x06F3
    34fa:	81 50       	subi	r24, 0x01	; 1
    34fc:	80 93 f3 06 	sts	0x06F3, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3500:	80 91 f3 06 	lds	r24, 0x06F3
    3504:	28 2f       	mov	r18, r24
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	c9 01       	movw	r24, r18
    350a:	88 0f       	add	r24, r24
    350c:	99 1f       	adc	r25, r25
    350e:	88 0f       	add	r24, r24
    3510:	99 1f       	adc	r25, r25
    3512:	88 0f       	add	r24, r24
    3514:	99 1f       	adc	r25, r25
    3516:	82 0f       	add	r24, r18
    3518:	93 1f       	adc	r25, r19
    351a:	fc 01       	movw	r30, r24
    351c:	e6 50       	subi	r30, 0x06	; 6
    351e:	f9 4f       	sbci	r31, 0xF9	; 249
    3520:	80 81       	ld	r24, Z
    3522:	88 23       	and	r24, r24
    3524:	41 f3       	breq	.-48     	; 0x34f6 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3526:	80 91 f3 06 	lds	r24, 0x06F3
    352a:	28 2f       	mov	r18, r24
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	c9 01       	movw	r24, r18
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	88 0f       	add	r24, r24
    3536:	99 1f       	adc	r25, r25
    3538:	88 0f       	add	r24, r24
    353a:	99 1f       	adc	r25, r25
    353c:	82 0f       	add	r24, r18
    353e:	93 1f       	adc	r25, r19
    3540:	86 50       	subi	r24, 0x06	; 6
    3542:	99 4f       	sbci	r25, 0xF9	; 249
    3544:	9a 83       	std	Y+2, r25	; 0x02
    3546:	89 83       	std	Y+1, r24	; 0x01
    3548:	e9 81       	ldd	r30, Y+1	; 0x01
    354a:	fa 81       	ldd	r31, Y+2	; 0x02
    354c:	01 80       	ldd	r0, Z+1	; 0x01
    354e:	f2 81       	ldd	r31, Z+2	; 0x02
    3550:	e0 2d       	mov	r30, r0
    3552:	82 81       	ldd	r24, Z+2	; 0x02
    3554:	93 81       	ldd	r25, Z+3	; 0x03
    3556:	e9 81       	ldd	r30, Y+1	; 0x01
    3558:	fa 81       	ldd	r31, Y+2	; 0x02
    355a:	92 83       	std	Z+2, r25	; 0x02
    355c:	81 83       	std	Z+1, r24	; 0x01
    355e:	e9 81       	ldd	r30, Y+1	; 0x01
    3560:	fa 81       	ldd	r31, Y+2	; 0x02
    3562:	21 81       	ldd	r18, Z+1	; 0x01
    3564:	32 81       	ldd	r19, Z+2	; 0x02
    3566:	89 81       	ldd	r24, Y+1	; 0x01
    3568:	9a 81       	ldd	r25, Y+2	; 0x02
    356a:	03 96       	adiw	r24, 0x03	; 3
    356c:	28 17       	cp	r18, r24
    356e:	39 07       	cpc	r19, r25
    3570:	59 f4       	brne	.+22     	; 0x3588 <vTaskSwitchContext+0xac>
    3572:	e9 81       	ldd	r30, Y+1	; 0x01
    3574:	fa 81       	ldd	r31, Y+2	; 0x02
    3576:	01 80       	ldd	r0, Z+1	; 0x01
    3578:	f2 81       	ldd	r31, Z+2	; 0x02
    357a:	e0 2d       	mov	r30, r0
    357c:	82 81       	ldd	r24, Z+2	; 0x02
    357e:	93 81       	ldd	r25, Z+3	; 0x03
    3580:	e9 81       	ldd	r30, Y+1	; 0x01
    3582:	fa 81       	ldd	r31, Y+2	; 0x02
    3584:	92 83       	std	Z+2, r25	; 0x02
    3586:	81 83       	std	Z+1, r24	; 0x01
    3588:	e9 81       	ldd	r30, Y+1	; 0x01
    358a:	fa 81       	ldd	r31, Y+2	; 0x02
    358c:	01 80       	ldd	r0, Z+1	; 0x01
    358e:	f2 81       	ldd	r31, Z+2	; 0x02
    3590:	e0 2d       	mov	r30, r0
    3592:	86 81       	ldd	r24, Z+6	; 0x06
    3594:	97 81       	ldd	r25, Z+7	; 0x07
    3596:	90 93 ed 06 	sts	0x06ED, r25
    359a:	80 93 ec 06 	sts	0x06EC, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	cf 91       	pop	r28
    35a4:	df 91       	pop	r29
    35a6:	08 95       	ret

000035a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    35a8:	df 93       	push	r29
    35aa:	cf 93       	push	r28
    35ac:	00 d0       	rcall	.+0      	; 0x35ae <vTaskPlaceOnEventList+0x6>
    35ae:	00 d0       	rcall	.+0      	; 0x35b0 <vTaskPlaceOnEventList+0x8>
    35b0:	00 d0       	rcall	.+0      	; 0x35b2 <vTaskPlaceOnEventList+0xa>
    35b2:	cd b7       	in	r28, 0x3d	; 61
    35b4:	de b7       	in	r29, 0x3e	; 62
    35b6:	9c 83       	std	Y+4, r25	; 0x04
    35b8:	8b 83       	std	Y+3, r24	; 0x03
    35ba:	7e 83       	std	Y+6, r23	; 0x06
    35bc:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    35be:	4b 81       	ldd	r20, Y+3	; 0x03
    35c0:	5c 81       	ldd	r21, Y+4	; 0x04
    35c2:	80 91 ec 06 	lds	r24, 0x06EC
    35c6:	90 91 ed 06 	lds	r25, 0x06ED
    35ca:	9c 01       	movw	r18, r24
    35cc:	24 5f       	subi	r18, 0xF4	; 244
    35ce:	3f 4f       	sbci	r19, 0xFF	; 255
    35d0:	ca 01       	movw	r24, r20
    35d2:	b9 01       	movw	r22, r18
    35d4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    35d8:	80 91 ec 06 	lds	r24, 0x06EC
    35dc:	90 91 ed 06 	lds	r25, 0x06ED
    35e0:	02 96       	adiw	r24, 0x02	; 2
    35e2:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    35e6:	20 91 f0 06 	lds	r18, 0x06F0
    35ea:	30 91 f1 06 	lds	r19, 0x06F1
    35ee:	8d 81       	ldd	r24, Y+5	; 0x05
    35f0:	9e 81       	ldd	r25, Y+6	; 0x06
    35f2:	82 0f       	add	r24, r18
    35f4:	93 1f       	adc	r25, r19
    35f6:	9a 83       	std	Y+2, r25	; 0x02
    35f8:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    35fa:	89 81       	ldd	r24, Y+1	; 0x01
    35fc:	9a 81       	ldd	r25, Y+2	; 0x02
    35fe:	0e 94 ce 1c 	call	0x399c	; 0x399c <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    3602:	26 96       	adiw	r28, 0x06	; 6
    3604:	0f b6       	in	r0, 0x3f	; 63
    3606:	f8 94       	cli
    3608:	de bf       	out	0x3e, r29	; 62
    360a:	0f be       	out	0x3f, r0	; 63
    360c:	cd bf       	out	0x3d, r28	; 61
    360e:	cf 91       	pop	r28
    3610:	df 91       	pop	r29
    3612:	08 95       	ret

00003614 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3614:	df 93       	push	r29
    3616:	cf 93       	push	r28
    3618:	00 d0       	rcall	.+0      	; 0x361a <xTaskRemoveFromEventList+0x6>
    361a:	00 d0       	rcall	.+0      	; 0x361c <xTaskRemoveFromEventList+0x8>
    361c:	0f 92       	push	r0
    361e:	cd b7       	in	r28, 0x3d	; 61
    3620:	de b7       	in	r29, 0x3e	; 62
    3622:	9d 83       	std	Y+5, r25	; 0x05
    3624:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3626:	ec 81       	ldd	r30, Y+4	; 0x04
    3628:	fd 81       	ldd	r31, Y+5	; 0x05
    362a:	05 80       	ldd	r0, Z+5	; 0x05
    362c:	f6 81       	ldd	r31, Z+6	; 0x06
    362e:	e0 2d       	mov	r30, r0
    3630:	86 81       	ldd	r24, Z+6	; 0x06
    3632:	97 81       	ldd	r25, Z+7	; 0x07
    3634:	9b 83       	std	Y+3, r25	; 0x03
    3636:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3638:	8a 81       	ldd	r24, Y+2	; 0x02
    363a:	9b 81       	ldd	r25, Y+3	; 0x03
    363c:	0c 96       	adiw	r24, 0x0c	; 12
    363e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3642:	80 91 f5 06 	lds	r24, 0x06F5
    3646:	88 23       	and	r24, r24
    3648:	61 f5       	brne	.+88     	; 0x36a2 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    364a:	8a 81       	ldd	r24, Y+2	; 0x02
    364c:	9b 81       	ldd	r25, Y+3	; 0x03
    364e:	02 96       	adiw	r24, 0x02	; 2
    3650:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3654:	ea 81       	ldd	r30, Y+2	; 0x02
    3656:	fb 81       	ldd	r31, Y+3	; 0x03
    3658:	96 89       	ldd	r25, Z+22	; 0x16
    365a:	80 91 f3 06 	lds	r24, 0x06F3
    365e:	89 17       	cp	r24, r25
    3660:	28 f4       	brcc	.+10     	; 0x366c <xTaskRemoveFromEventList+0x58>
    3662:	ea 81       	ldd	r30, Y+2	; 0x02
    3664:	fb 81       	ldd	r31, Y+3	; 0x03
    3666:	86 89       	ldd	r24, Z+22	; 0x16
    3668:	80 93 f3 06 	sts	0x06F3, r24
    366c:	ea 81       	ldd	r30, Y+2	; 0x02
    366e:	fb 81       	ldd	r31, Y+3	; 0x03
    3670:	86 89       	ldd	r24, Z+22	; 0x16
    3672:	28 2f       	mov	r18, r24
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	c9 01       	movw	r24, r18
    3678:	88 0f       	add	r24, r24
    367a:	99 1f       	adc	r25, r25
    367c:	88 0f       	add	r24, r24
    367e:	99 1f       	adc	r25, r25
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	82 0f       	add	r24, r18
    3686:	93 1f       	adc	r25, r19
    3688:	ac 01       	movw	r20, r24
    368a:	46 50       	subi	r20, 0x06	; 6
    368c:	59 4f       	sbci	r21, 0xF9	; 249
    368e:	8a 81       	ldd	r24, Y+2	; 0x02
    3690:	9b 81       	ldd	r25, Y+3	; 0x03
    3692:	9c 01       	movw	r18, r24
    3694:	2e 5f       	subi	r18, 0xFE	; 254
    3696:	3f 4f       	sbci	r19, 0xFF	; 255
    3698:	ca 01       	movw	r24, r20
    369a:	b9 01       	movw	r22, r18
    369c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vListInsertEnd>
    36a0:	0a c0       	rjmp	.+20     	; 0x36b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	9b 81       	ldd	r25, Y+3	; 0x03
    36a6:	9c 01       	movw	r18, r24
    36a8:	24 5f       	subi	r18, 0xF4	; 244
    36aa:	3f 4f       	sbci	r19, 0xFF	; 255
    36ac:	81 e6       	ldi	r24, 0x61	; 97
    36ae:	97 e0       	ldi	r25, 0x07	; 7
    36b0:	b9 01       	movw	r22, r18
    36b2:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    36b6:	ea 81       	ldd	r30, Y+2	; 0x02
    36b8:	fb 81       	ldd	r31, Y+3	; 0x03
    36ba:	96 89       	ldd	r25, Z+22	; 0x16
    36bc:	e0 91 ec 06 	lds	r30, 0x06EC
    36c0:	f0 91 ed 06 	lds	r31, 0x06ED
    36c4:	86 89       	ldd	r24, Z+22	; 0x16
    36c6:	98 17       	cp	r25, r24
    36c8:	18 f0       	brcs	.+6      	; 0x36d0 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    36ca:	81 e0       	ldi	r24, 0x01	; 1
    36cc:	89 83       	std	Y+1, r24	; 0x01
    36ce:	01 c0       	rjmp	.+2      	; 0x36d2 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    36d0:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	cf 91       	pop	r28
    36e0:	df 91       	pop	r29
    36e2:	08 95       	ret

000036e4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    36e4:	df 93       	push	r29
    36e6:	cf 93       	push	r28
    36e8:	00 d0       	rcall	.+0      	; 0x36ea <vTaskSetTimeOutState+0x6>
    36ea:	cd b7       	in	r28, 0x3d	; 61
    36ec:	de b7       	in	r29, 0x3e	; 62
    36ee:	9a 83       	std	Y+2, r25	; 0x02
    36f0:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    36f2:	80 91 f8 06 	lds	r24, 0x06F8
    36f6:	e9 81       	ldd	r30, Y+1	; 0x01
    36f8:	fa 81       	ldd	r31, Y+2	; 0x02
    36fa:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    36fc:	80 91 f0 06 	lds	r24, 0x06F0
    3700:	90 91 f1 06 	lds	r25, 0x06F1
    3704:	e9 81       	ldd	r30, Y+1	; 0x01
    3706:	fa 81       	ldd	r31, Y+2	; 0x02
    3708:	92 83       	std	Z+2, r25	; 0x02
    370a:	81 83       	std	Z+1, r24	; 0x01
}
    370c:	0f 90       	pop	r0
    370e:	0f 90       	pop	r0
    3710:	cf 91       	pop	r28
    3712:	df 91       	pop	r29
    3714:	08 95       	ret

00003716 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    3716:	df 93       	push	r29
    3718:	cf 93       	push	r28
    371a:	00 d0       	rcall	.+0      	; 0x371c <xTaskCheckForTimeOut+0x6>
    371c:	00 d0       	rcall	.+0      	; 0x371e <xTaskCheckForTimeOut+0x8>
    371e:	0f 92       	push	r0
    3720:	cd b7       	in	r28, 0x3d	; 61
    3722:	de b7       	in	r29, 0x3e	; 62
    3724:	9b 83       	std	Y+3, r25	; 0x03
    3726:	8a 83       	std	Y+2, r24	; 0x02
    3728:	7d 83       	std	Y+5, r23	; 0x05
    372a:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    372c:	0f b6       	in	r0, 0x3f	; 63
    372e:	f8 94       	cli
    3730:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    3732:	ea 81       	ldd	r30, Y+2	; 0x02
    3734:	fb 81       	ldd	r31, Y+3	; 0x03
    3736:	90 81       	ld	r25, Z
    3738:	80 91 f8 06 	lds	r24, 0x06F8
    373c:	98 17       	cp	r25, r24
    373e:	71 f0       	breq	.+28     	; 0x375c <xTaskCheckForTimeOut+0x46>
    3740:	ea 81       	ldd	r30, Y+2	; 0x02
    3742:	fb 81       	ldd	r31, Y+3	; 0x03
    3744:	21 81       	ldd	r18, Z+1	; 0x01
    3746:	32 81       	ldd	r19, Z+2	; 0x02
    3748:	80 91 f0 06 	lds	r24, 0x06F0
    374c:	90 91 f1 06 	lds	r25, 0x06F1
    3750:	82 17       	cp	r24, r18
    3752:	93 07       	cpc	r25, r19
    3754:	18 f0       	brcs	.+6      	; 0x375c <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	89 83       	std	Y+1, r24	; 0x01
    375a:	2f c0       	rjmp	.+94     	; 0x37ba <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    375c:	20 91 f0 06 	lds	r18, 0x06F0
    3760:	30 91 f1 06 	lds	r19, 0x06F1
    3764:	ea 81       	ldd	r30, Y+2	; 0x02
    3766:	fb 81       	ldd	r31, Y+3	; 0x03
    3768:	81 81       	ldd	r24, Z+1	; 0x01
    376a:	92 81       	ldd	r25, Z+2	; 0x02
    376c:	28 1b       	sub	r18, r24
    376e:	39 0b       	sbc	r19, r25
    3770:	ec 81       	ldd	r30, Y+4	; 0x04
    3772:	fd 81       	ldd	r31, Y+5	; 0x05
    3774:	80 81       	ld	r24, Z
    3776:	91 81       	ldd	r25, Z+1	; 0x01
    3778:	28 17       	cp	r18, r24
    377a:	39 07       	cpc	r19, r25
    377c:	e0 f4       	brcc	.+56     	; 0x37b6 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    377e:	ec 81       	ldd	r30, Y+4	; 0x04
    3780:	fd 81       	ldd	r31, Y+5	; 0x05
    3782:	40 81       	ld	r20, Z
    3784:	51 81       	ldd	r21, Z+1	; 0x01
    3786:	ea 81       	ldd	r30, Y+2	; 0x02
    3788:	fb 81       	ldd	r31, Y+3	; 0x03
    378a:	21 81       	ldd	r18, Z+1	; 0x01
    378c:	32 81       	ldd	r19, Z+2	; 0x02
    378e:	80 91 f0 06 	lds	r24, 0x06F0
    3792:	90 91 f1 06 	lds	r25, 0x06F1
    3796:	b9 01       	movw	r22, r18
    3798:	68 1b       	sub	r22, r24
    379a:	79 0b       	sbc	r23, r25
    379c:	cb 01       	movw	r24, r22
    379e:	84 0f       	add	r24, r20
    37a0:	95 1f       	adc	r25, r21
    37a2:	ec 81       	ldd	r30, Y+4	; 0x04
    37a4:	fd 81       	ldd	r31, Y+5	; 0x05
    37a6:	91 83       	std	Z+1, r25	; 0x01
    37a8:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    37aa:	8a 81       	ldd	r24, Y+2	; 0x02
    37ac:	9b 81       	ldd	r25, Y+3	; 0x03
    37ae:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    37b2:	19 82       	std	Y+1, r1	; 0x01
    37b4:	02 c0       	rjmp	.+4      	; 0x37ba <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    37ba:	0f 90       	pop	r0
    37bc:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    37be:	89 81       	ldd	r24, Y+1	; 0x01
}
    37c0:	0f 90       	pop	r0
    37c2:	0f 90       	pop	r0
    37c4:	0f 90       	pop	r0
    37c6:	0f 90       	pop	r0
    37c8:	0f 90       	pop	r0
    37ca:	cf 91       	pop	r28
    37cc:	df 91       	pop	r29
    37ce:	08 95       	ret

000037d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    37d0:	df 93       	push	r29
    37d2:	cf 93       	push	r28
    37d4:	cd b7       	in	r28, 0x3d	; 61
    37d6:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	80 93 f7 06 	sts	0x06F7, r24
}
    37de:	cf 91       	pop	r28
    37e0:	df 91       	pop	r29
    37e2:	08 95       	ret

000037e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    37e4:	df 93       	push	r29
    37e6:	cf 93       	push	r28
    37e8:	00 d0       	rcall	.+0      	; 0x37ea <prvIdleTask+0x6>
    37ea:	cd b7       	in	r28, 0x3d	; 61
    37ec:	de b7       	in	r29, 0x3e	; 62
    37ee:	9a 83       	std	Y+2, r25	; 0x02
    37f0:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    37f2:	0e 94 90 1c 	call	0x3920	; 0x3920 <prvCheckTasksWaitingTermination>
    37f6:	fd cf       	rjmp	.-6      	; 0x37f2 <prvIdleTask+0xe>

000037f8 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    37f8:	0f 93       	push	r16
    37fa:	1f 93       	push	r17
    37fc:	df 93       	push	r29
    37fe:	cf 93       	push	r28
    3800:	cd b7       	in	r28, 0x3d	; 61
    3802:	de b7       	in	r29, 0x3e	; 62
    3804:	29 97       	sbiw	r28, 0x09	; 9
    3806:	0f b6       	in	r0, 0x3f	; 63
    3808:	f8 94       	cli
    380a:	de bf       	out	0x3e, r29	; 62
    380c:	0f be       	out	0x3f, r0	; 63
    380e:	cd bf       	out	0x3d, r28	; 61
    3810:	9a 83       	std	Y+2, r25	; 0x02
    3812:	89 83       	std	Y+1, r24	; 0x01
    3814:	7c 83       	std	Y+4, r23	; 0x04
    3816:	6b 83       	std	Y+3, r22	; 0x03
    3818:	4d 83       	std	Y+5, r20	; 0x05
    381a:	3f 83       	std	Y+7, r19	; 0x07
    381c:	2e 83       	std	Y+6, r18	; 0x06
    381e:	19 87       	std	Y+9, r17	; 0x09
    3820:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    3822:	89 81       	ldd	r24, Y+1	; 0x01
    3824:	9a 81       	ldd	r25, Y+2	; 0x02
    3826:	49 96       	adiw	r24, 0x19	; 25
    3828:	2b 81       	ldd	r18, Y+3	; 0x03
    382a:	3c 81       	ldd	r19, Y+4	; 0x04
    382c:	b9 01       	movw	r22, r18
    382e:	48 e0       	ldi	r20, 0x08	; 8
    3830:	50 e0       	ldi	r21, 0x00	; 0
    3832:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    3836:	e9 81       	ldd	r30, Y+1	; 0x01
    3838:	fa 81       	ldd	r31, Y+2	; 0x02
    383a:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    383c:	8d 81       	ldd	r24, Y+5	; 0x05
    383e:	89 30       	cpi	r24, 0x09	; 9
    3840:	10 f0       	brcs	.+4      	; 0x3846 <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    3842:	88 e0       	ldi	r24, 0x08	; 8
    3844:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    3846:	e9 81       	ldd	r30, Y+1	; 0x01
    3848:	fa 81       	ldd	r31, Y+2	; 0x02
    384a:	8d 81       	ldd	r24, Y+5	; 0x05
    384c:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    384e:	89 81       	ldd	r24, Y+1	; 0x01
    3850:	9a 81       	ldd	r25, Y+2	; 0x02
    3852:	02 96       	adiw	r24, 0x02	; 2
    3854:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	9a 81       	ldd	r25, Y+2	; 0x02
    385c:	0c 96       	adiw	r24, 0x0c	; 12
    385e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    3862:	e9 81       	ldd	r30, Y+1	; 0x01
    3864:	fa 81       	ldd	r31, Y+2	; 0x02
    3866:	89 81       	ldd	r24, Y+1	; 0x01
    3868:	9a 81       	ldd	r25, Y+2	; 0x02
    386a:	91 87       	std	Z+9, r25	; 0x09
    386c:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    386e:	8d 81       	ldd	r24, Y+5	; 0x05
    3870:	28 2f       	mov	r18, r24
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	89 e0       	ldi	r24, 0x09	; 9
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	82 1b       	sub	r24, r18
    387a:	93 0b       	sbc	r25, r19
    387c:	e9 81       	ldd	r30, Y+1	; 0x01
    387e:	fa 81       	ldd	r31, Y+2	; 0x02
    3880:	95 87       	std	Z+13, r25	; 0x0d
    3882:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    3884:	e9 81       	ldd	r30, Y+1	; 0x01
    3886:	fa 81       	ldd	r31, Y+2	; 0x02
    3888:	89 81       	ldd	r24, Y+1	; 0x01
    388a:	9a 81       	ldd	r25, Y+2	; 0x02
    388c:	93 8b       	std	Z+19, r25	; 0x13
    388e:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    3890:	29 96       	adiw	r28, 0x09	; 9
    3892:	0f b6       	in	r0, 0x3f	; 63
    3894:	f8 94       	cli
    3896:	de bf       	out	0x3e, r29	; 62
    3898:	0f be       	out	0x3f, r0	; 63
    389a:	cd bf       	out	0x3d, r28	; 61
    389c:	cf 91       	pop	r28
    389e:	df 91       	pop	r29
    38a0:	1f 91       	pop	r17
    38a2:	0f 91       	pop	r16
    38a4:	08 95       	ret

000038a6 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    38a6:	df 93       	push	r29
    38a8:	cf 93       	push	r28
    38aa:	0f 92       	push	r0
    38ac:	cd b7       	in	r28, 0x3d	; 61
    38ae:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    38b0:	19 82       	std	Y+1, r1	; 0x01
    38b2:	13 c0       	rjmp	.+38     	; 0x38da <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    38b4:	89 81       	ldd	r24, Y+1	; 0x01
    38b6:	28 2f       	mov	r18, r24
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	c9 01       	movw	r24, r18
    38bc:	88 0f       	add	r24, r24
    38be:	99 1f       	adc	r25, r25
    38c0:	88 0f       	add	r24, r24
    38c2:	99 1f       	adc	r25, r25
    38c4:	88 0f       	add	r24, r24
    38c6:	99 1f       	adc	r25, r25
    38c8:	82 0f       	add	r24, r18
    38ca:	93 1f       	adc	r25, r19
    38cc:	86 50       	subi	r24, 0x06	; 6
    38ce:	99 4f       	sbci	r25, 0xF9	; 249
    38d0:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    38d4:	89 81       	ldd	r24, Y+1	; 0x01
    38d6:	8f 5f       	subi	r24, 0xFF	; 255
    38d8:	89 83       	std	Y+1, r24	; 0x01
    38da:	89 81       	ldd	r24, Y+1	; 0x01
    38dc:	89 30       	cpi	r24, 0x09	; 9
    38de:	50 f3       	brcs	.-44     	; 0x38b4 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    38e0:	8b e4       	ldi	r24, 0x4B	; 75
    38e2:	97 e0       	ldi	r25, 0x07	; 7
    38e4:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    38e8:	84 e5       	ldi	r24, 0x54	; 84
    38ea:	97 e0       	ldi	r25, 0x07	; 7
    38ec:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    38f0:	81 e6       	ldi	r24, 0x61	; 97
    38f2:	97 e0       	ldi	r25, 0x07	; 7
    38f4:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    38f8:	8a e6       	ldi	r24, 0x6A	; 106
    38fa:	97 e0       	ldi	r25, 0x07	; 7
    38fc:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3900:	8b e4       	ldi	r24, 0x4B	; 75
    3902:	97 e0       	ldi	r25, 0x07	; 7
    3904:	90 93 5e 07 	sts	0x075E, r25
    3908:	80 93 5d 07 	sts	0x075D, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    390c:	84 e5       	ldi	r24, 0x54	; 84
    390e:	97 e0       	ldi	r25, 0x07	; 7
    3910:	90 93 60 07 	sts	0x0760, r25
    3914:	80 93 5f 07 	sts	0x075F, r24
}
    3918:	0f 90       	pop	r0
    391a:	cf 91       	pop	r28
    391c:	df 91       	pop	r29
    391e:	08 95       	ret

00003920 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3920:	df 93       	push	r29
    3922:	cf 93       	push	r28
    3924:	00 d0       	rcall	.+0      	; 0x3926 <prvCheckTasksWaitingTermination+0x6>
    3926:	0f 92       	push	r0
    3928:	cd b7       	in	r28, 0x3d	; 61
    392a:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    392c:	80 91 ee 06 	lds	r24, 0x06EE
    3930:	88 23       	and	r24, r24
    3932:	71 f1       	breq	.+92     	; 0x3990 <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    3934:	0e 94 ce 18 	call	0x319c	; 0x319c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3938:	80 91 6a 07 	lds	r24, 0x076A
    393c:	1b 82       	std	Y+3, r1	; 0x03
    393e:	88 23       	and	r24, r24
    3940:	11 f4       	brne	.+4      	; 0x3946 <prvCheckTasksWaitingTermination+0x26>
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    3946:	0e 94 da 18 	call	0x31b4	; 0x31b4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    394a:	8b 81       	ldd	r24, Y+3	; 0x03
    394c:	88 23       	and	r24, r24
    394e:	01 f5       	brne	.+64     	; 0x3990 <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	f8 94       	cli
    3954:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    3956:	e0 91 6f 07 	lds	r30, 0x076F
    395a:	f0 91 70 07 	lds	r31, 0x0770
    395e:	86 81       	ldd	r24, Z+6	; 0x06
    3960:	97 81       	ldd	r25, Z+7	; 0x07
    3962:	9a 83       	std	Y+2, r25	; 0x02
    3964:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    3966:	89 81       	ldd	r24, Y+1	; 0x01
    3968:	9a 81       	ldd	r25, Y+2	; 0x02
    396a:	02 96       	adiw	r24, 0x02	; 2
    396c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vListRemove>
					--uxCurrentNumberOfTasks;
    3970:	80 91 ef 06 	lds	r24, 0x06EF
    3974:	81 50       	subi	r24, 0x01	; 1
    3976:	80 93 ef 06 	sts	0x06EF, r24
					--uxTasksDeleted;
    397a:	80 91 ee 06 	lds	r24, 0x06EE
    397e:	81 50       	subi	r24, 0x01	; 1
    3980:	80 93 ee 06 	sts	0x06EE, r24
				}
				taskEXIT_CRITICAL();
    3984:	0f 90       	pop	r0
    3986:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    3988:	89 81       	ldd	r24, Y+1	; 0x01
    398a:	9a 81       	ldd	r25, Y+2	; 0x02
    398c:	0e 94 67 1d 	call	0x3ace	; 0x3ace <prvDeleteTCB>
			}
		}
	}
	#endif
}
    3990:	0f 90       	pop	r0
    3992:	0f 90       	pop	r0
    3994:	0f 90       	pop	r0
    3996:	cf 91       	pop	r28
    3998:	df 91       	pop	r29
    399a:	08 95       	ret

0000399c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    399c:	df 93       	push	r29
    399e:	cf 93       	push	r28
    39a0:	00 d0       	rcall	.+0      	; 0x39a2 <prvAddCurrentTaskToDelayedList+0x6>
    39a2:	cd b7       	in	r28, 0x3d	; 61
    39a4:	de b7       	in	r29, 0x3e	; 62
    39a6:	9a 83       	std	Y+2, r25	; 0x02
    39a8:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    39aa:	e0 91 ec 06 	lds	r30, 0x06EC
    39ae:	f0 91 ed 06 	lds	r31, 0x06ED
    39b2:	89 81       	ldd	r24, Y+1	; 0x01
    39b4:	9a 81       	ldd	r25, Y+2	; 0x02
    39b6:	93 83       	std	Z+3, r25	; 0x03
    39b8:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    39ba:	20 91 f0 06 	lds	r18, 0x06F0
    39be:	30 91 f1 06 	lds	r19, 0x06F1
    39c2:	89 81       	ldd	r24, Y+1	; 0x01
    39c4:	9a 81       	ldd	r25, Y+2	; 0x02
    39c6:	82 17       	cp	r24, r18
    39c8:	93 07       	cpc	r25, r19
    39ca:	70 f4       	brcc	.+28     	; 0x39e8 <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    39cc:	80 91 5f 07 	lds	r24, 0x075F
    39d0:	90 91 60 07 	lds	r25, 0x0760
    39d4:	20 91 ec 06 	lds	r18, 0x06EC
    39d8:	30 91 ed 06 	lds	r19, 0x06ED
    39dc:	2e 5f       	subi	r18, 0xFE	; 254
    39de:	3f 4f       	sbci	r19, 0xFF	; 255
    39e0:	b9 01       	movw	r22, r18
    39e2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vListInsert>
    39e6:	1e c0       	rjmp	.+60     	; 0x3a24 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    39e8:	40 91 5d 07 	lds	r20, 0x075D
    39ec:	50 91 5e 07 	lds	r21, 0x075E
    39f0:	80 91 ec 06 	lds	r24, 0x06EC
    39f4:	90 91 ed 06 	lds	r25, 0x06ED
    39f8:	9c 01       	movw	r18, r24
    39fa:	2e 5f       	subi	r18, 0xFE	; 254
    39fc:	3f 4f       	sbci	r19, 0xFF	; 255
    39fe:	ca 01       	movw	r24, r20
    3a00:	b9 01       	movw	r22, r18
    3a02:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    3a06:	20 91 6d 00 	lds	r18, 0x006D
    3a0a:	30 91 6e 00 	lds	r19, 0x006E
    3a0e:	89 81       	ldd	r24, Y+1	; 0x01
    3a10:	9a 81       	ldd	r25, Y+2	; 0x02
    3a12:	82 17       	cp	r24, r18
    3a14:	93 07       	cpc	r25, r19
    3a16:	30 f4       	brcc	.+12     	; 0x3a24 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    3a18:	89 81       	ldd	r24, Y+1	; 0x01
    3a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1c:	90 93 6e 00 	sts	0x006E, r25
    3a20:	80 93 6d 00 	sts	0x006D, r24
		}
	}
}
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
    3a28:	cf 91       	pop	r28
    3a2a:	df 91       	pop	r29
    3a2c:	08 95       	ret

00003a2e <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    3a2e:	df 93       	push	r29
    3a30:	cf 93       	push	r28
    3a32:	cd b7       	in	r28, 0x3d	; 61
    3a34:	de b7       	in	r29, 0x3e	; 62
    3a36:	28 97       	sbiw	r28, 0x08	; 8
    3a38:	0f b6       	in	r0, 0x3f	; 63
    3a3a:	f8 94       	cli
    3a3c:	de bf       	out	0x3e, r29	; 62
    3a3e:	0f be       	out	0x3f, r0	; 63
    3a40:	cd bf       	out	0x3d, r28	; 61
    3a42:	9c 83       	std	Y+4, r25	; 0x04
    3a44:	8b 83       	std	Y+3, r24	; 0x03
    3a46:	7e 83       	std	Y+6, r23	; 0x06
    3a48:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    3a4a:	81 e2       	ldi	r24, 0x21	; 33
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <pvPortMalloc>
    3a52:	9a 83       	std	Y+2, r25	; 0x02
    3a54:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    3a56:	89 81       	ldd	r24, Y+1	; 0x01
    3a58:	9a 81       	ldd	r25, Y+2	; 0x02
    3a5a:	00 97       	sbiw	r24, 0x00	; 0
    3a5c:	69 f1       	breq	.+90     	; 0x3ab8 <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    3a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a60:	9e 81       	ldd	r25, Y+6	; 0x06
    3a62:	00 97       	sbiw	r24, 0x00	; 0
    3a64:	39 f4       	brne	.+14     	; 0x3a74 <prvAllocateTCBAndStack+0x46>
    3a66:	8b 81       	ldd	r24, Y+3	; 0x03
    3a68:	9c 81       	ldd	r25, Y+4	; 0x04
    3a6a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <pvPortMalloc>
    3a6e:	98 87       	std	Y+8, r25	; 0x08
    3a70:	8f 83       	std	Y+7, r24	; 0x07
    3a72:	04 c0       	rjmp	.+8      	; 0x3a7c <prvAllocateTCBAndStack+0x4e>
    3a74:	8d 81       	ldd	r24, Y+5	; 0x05
    3a76:	9e 81       	ldd	r25, Y+6	; 0x06
    3a78:	98 87       	std	Y+8, r25	; 0x08
    3a7a:	8f 83       	std	Y+7, r24	; 0x07
    3a7c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a7e:	fa 81       	ldd	r31, Y+2	; 0x02
    3a80:	8f 81       	ldd	r24, Y+7	; 0x07
    3a82:	98 85       	ldd	r25, Y+8	; 0x08
    3a84:	90 8f       	std	Z+24, r25	; 0x18
    3a86:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    3a88:	e9 81       	ldd	r30, Y+1	; 0x01
    3a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a8c:	87 89       	ldd	r24, Z+23	; 0x17
    3a8e:	90 8d       	ldd	r25, Z+24	; 0x18
    3a90:	00 97       	sbiw	r24, 0x00	; 0
    3a92:	39 f4       	brne	.+14     	; 0x3aa2 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	9a 81       	ldd	r25, Y+2	; 0x02
    3a98:	0e 94 b4 0c 	call	0x1968	; 0x1968 <vPortFree>
			pxNewTCB = NULL;
    3a9c:	1a 82       	std	Y+2, r1	; 0x02
    3a9e:	19 82       	std	Y+1, r1	; 0x01
    3aa0:	0b c0       	rjmp	.+22     	; 0x3ab8 <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    3aa2:	e9 81       	ldd	r30, Y+1	; 0x01
    3aa4:	fa 81       	ldd	r31, Y+2	; 0x02
    3aa6:	87 89       	ldd	r24, Z+23	; 0x17
    3aa8:	90 8d       	ldd	r25, Z+24	; 0x18
    3aaa:	2b 81       	ldd	r18, Y+3	; 0x03
    3aac:	3c 81       	ldd	r19, Y+4	; 0x04
    3aae:	65 ea       	ldi	r22, 0xA5	; 165
    3ab0:	70 e0       	ldi	r23, 0x00	; 0
    3ab2:	a9 01       	movw	r20, r18
    3ab4:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <memset>
		}
	}

	return pxNewTCB;
    3ab8:	89 81       	ldd	r24, Y+1	; 0x01
    3aba:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3abc:	28 96       	adiw	r28, 0x08	; 8
    3abe:	0f b6       	in	r0, 0x3f	; 63
    3ac0:	f8 94       	cli
    3ac2:	de bf       	out	0x3e, r29	; 62
    3ac4:	0f be       	out	0x3f, r0	; 63
    3ac6:	cd bf       	out	0x3d, r28	; 61
    3ac8:	cf 91       	pop	r28
    3aca:	df 91       	pop	r29
    3acc:	08 95       	ret

00003ace <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    3ace:	df 93       	push	r29
    3ad0:	cf 93       	push	r28
    3ad2:	00 d0       	rcall	.+0      	; 0x3ad4 <prvDeleteTCB+0x6>
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
    3ad8:	9a 83       	std	Y+2, r25	; 0x02
    3ada:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    3adc:	e9 81       	ldd	r30, Y+1	; 0x01
    3ade:	fa 81       	ldd	r31, Y+2	; 0x02
    3ae0:	87 89       	ldd	r24, Z+23	; 0x17
    3ae2:	90 8d       	ldd	r25, Z+24	; 0x18
    3ae4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <vPortFree>
		vPortFree( pxTCB );
    3ae8:	89 81       	ldd	r24, Y+1	; 0x01
    3aea:	9a 81       	ldd	r25, Y+2	; 0x02
    3aec:	0e 94 b4 0c 	call	0x1968	; 0x1968 <vPortFree>
	}
    3af0:	0f 90       	pop	r0
    3af2:	0f 90       	pop	r0
    3af4:	cf 91       	pop	r28
    3af6:	df 91       	pop	r29
    3af8:	08 95       	ret

00003afa <__prologue_saves__>:
    3afa:	2f 92       	push	r2
    3afc:	3f 92       	push	r3
    3afe:	4f 92       	push	r4
    3b00:	5f 92       	push	r5
    3b02:	6f 92       	push	r6
    3b04:	7f 92       	push	r7
    3b06:	8f 92       	push	r8
    3b08:	9f 92       	push	r9
    3b0a:	af 92       	push	r10
    3b0c:	bf 92       	push	r11
    3b0e:	cf 92       	push	r12
    3b10:	df 92       	push	r13
    3b12:	ef 92       	push	r14
    3b14:	ff 92       	push	r15
    3b16:	0f 93       	push	r16
    3b18:	1f 93       	push	r17
    3b1a:	cf 93       	push	r28
    3b1c:	df 93       	push	r29
    3b1e:	cd b7       	in	r28, 0x3d	; 61
    3b20:	de b7       	in	r29, 0x3e	; 62
    3b22:	ca 1b       	sub	r28, r26
    3b24:	db 0b       	sbc	r29, r27
    3b26:	0f b6       	in	r0, 0x3f	; 63
    3b28:	f8 94       	cli
    3b2a:	de bf       	out	0x3e, r29	; 62
    3b2c:	0f be       	out	0x3f, r0	; 63
    3b2e:	cd bf       	out	0x3d, r28	; 61
    3b30:	09 94       	ijmp

00003b32 <__epilogue_restores__>:
    3b32:	2a 88       	ldd	r2, Y+18	; 0x12
    3b34:	39 88       	ldd	r3, Y+17	; 0x11
    3b36:	48 88       	ldd	r4, Y+16	; 0x10
    3b38:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b3a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b3c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b3e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b40:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b42:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b44:	b9 84       	ldd	r11, Y+9	; 0x09
    3b46:	c8 84       	ldd	r12, Y+8	; 0x08
    3b48:	df 80       	ldd	r13, Y+7	; 0x07
    3b4a:	ee 80       	ldd	r14, Y+6	; 0x06
    3b4c:	fd 80       	ldd	r15, Y+5	; 0x05
    3b4e:	0c 81       	ldd	r16, Y+4	; 0x04
    3b50:	1b 81       	ldd	r17, Y+3	; 0x03
    3b52:	aa 81       	ldd	r26, Y+2	; 0x02
    3b54:	b9 81       	ldd	r27, Y+1	; 0x01
    3b56:	ce 0f       	add	r28, r30
    3b58:	d1 1d       	adc	r29, r1
    3b5a:	0f b6       	in	r0, 0x3f	; 63
    3b5c:	f8 94       	cli
    3b5e:	de bf       	out	0x3e, r29	; 62
    3b60:	0f be       	out	0x3f, r0	; 63
    3b62:	cd bf       	out	0x3d, r28	; 61
    3b64:	ed 01       	movw	r28, r26
    3b66:	08 95       	ret

00003b68 <memcpy>:
    3b68:	fb 01       	movw	r30, r22
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	02 c0       	rjmp	.+4      	; 0x3b72 <memcpy+0xa>
    3b6e:	01 90       	ld	r0, Z+
    3b70:	0d 92       	st	X+, r0
    3b72:	41 50       	subi	r20, 0x01	; 1
    3b74:	50 40       	sbci	r21, 0x00	; 0
    3b76:	d8 f7       	brcc	.-10     	; 0x3b6e <memcpy+0x6>
    3b78:	08 95       	ret

00003b7a <memset>:
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	01 c0       	rjmp	.+2      	; 0x3b80 <memset+0x6>
    3b7e:	6d 93       	st	X+, r22
    3b80:	41 50       	subi	r20, 0x01	; 1
    3b82:	50 40       	sbci	r21, 0x00	; 0
    3b84:	e0 f7       	brcc	.-8      	; 0x3b7e <memset+0x4>
    3b86:	08 95       	ret

00003b88 <strncpy>:
    3b88:	fb 01       	movw	r30, r22
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	41 50       	subi	r20, 0x01	; 1
    3b8e:	50 40       	sbci	r21, 0x00	; 0
    3b90:	48 f0       	brcs	.+18     	; 0x3ba4 <strncpy+0x1c>
    3b92:	01 90       	ld	r0, Z+
    3b94:	0d 92       	st	X+, r0
    3b96:	00 20       	and	r0, r0
    3b98:	c9 f7       	brne	.-14     	; 0x3b8c <strncpy+0x4>
    3b9a:	01 c0       	rjmp	.+2      	; 0x3b9e <strncpy+0x16>
    3b9c:	1d 92       	st	X+, r1
    3b9e:	41 50       	subi	r20, 0x01	; 1
    3ba0:	50 40       	sbci	r21, 0x00	; 0
    3ba2:	e0 f7       	brcc	.-8      	; 0x3b9c <strncpy+0x14>
    3ba4:	08 95       	ret

00003ba6 <_exit>:
    3ba6:	f8 94       	cli

00003ba8 <__stop_program>:
    3ba8:	ff cf       	rjmp	.-2      	; 0x3ba8 <__stop_program>
