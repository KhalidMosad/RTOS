
AVR_FREERTOS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004844  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00004844  000048d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000575  00800090  00800090  00004908  2**0
                  ALLOC
  3 .stab         00005820  00000000  00000000  00004908  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f6c  00000000  00000000  0000a128  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000d094  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000d344  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ef8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000fe78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00010c28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00010d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00011015  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000117e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 4f 18 	jmp	0x309e	; 0x309e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 30       	cpi	r26, 0x05	; 5
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 23 15 	call	0x2a46	; 0x2a46 <main>
      8a:	0c 94 20 24 	jmp	0x4840	; 0x4840 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ca 23 	jmp	0x4794	; 0x4794 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e8       	ldi	r26, 0x86	; 134
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e6 23 	jmp	0x47cc	; 0x47cc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ca 23 	jmp	0x4794	; 0x4794 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e8       	ldi	r24, 0x86	; 134
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e6 23 	jmp	0x47cc	; 0x47cc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f6 23 	jmp	0x47ec	; 0x47ec <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_VidSetPinDirection>:
#include"DIO_register.h"
#include"DIO_config.h"
#include"DIO_interface.h"

void DIO_VidSetPinDirection		(u8 copy_u8port, u8 copy_U8pin, u8 copy_U8state)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if(OUTPUT==copy_U8state)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_VidSetPinDirection+0x22>
     b66:	6f c0       	rjmp	.+222    	; 0xc46 <DIO_VidSetPinDirection+0x100>
	{
		switch (copy_u8port)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <DIO_VidSetPinDirection+0x88>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_VidSetPinDirection+0x4a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <DIO_VidSetPinDirection+0x60>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	71 f1       	breq	.+92     	; 0xbf6 <DIO_VidSetPinDirection+0xb0>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f1       	breq	.+122    	; 0xc1e <DIO_VidSetPinDirection+0xd8>
     ba4:	c7 c0       	rjmp	.+398    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
		{
			case PORTA:SET_BIT(DDRA, copy_U8pin); break;
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_VidSetPinDirection+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_VidSetPinDirection+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	b3 c0       	rjmp	.+358    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case PORTB:SET_BIT(DDRB, copy_U8pin); break;
     bce:	a7 e3       	ldi	r26, 0x37	; 55
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e7 e3       	ldi	r30, 0x37	; 55
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_VidSetPinDirection+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_VidSetPinDirection+0xa2>
     bf0:	84 2b       	or	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	9f c0       	rjmp	.+318    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case PORTC:SET_BIT(DDRC, copy_U8pin); break;
     bf6:	a4 e3       	ldi	r26, 0x34	; 52
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e4 e3       	ldi	r30, 0x34	; 52
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_VidSetPinDirection+0xce>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_VidSetPinDirection+0xca>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	8b c0       	rjmp	.+278    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case PORTD:SET_BIT(DDRD, copy_U8pin); break;
     c1e:	a1 e3       	ldi	r26, 0x31	; 49
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e1 e3       	ldi	r30, 0x31	; 49
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_VidSetPinDirection+0xf6>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_VidSetPinDirection+0xf2>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	77 c0       	rjmp	.+238    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
	
		}	
	}
	else if(INPUT==copy_U8state)
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <DIO_VidSetPinDirection+0x108>
     c4c:	73 c0       	rjmp	.+230    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(copy_u8port)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3d 83       	std	Y+5, r19	; 0x05
     c56:	2c 83       	std	Y+4, r18	; 0x04
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f1       	breq	.+86     	; 0xcb8 <DIO_VidSetPinDirection+0x172>
     c62:	2c 81       	ldd	r18, Y+4	; 0x04
     c64:	3d 81       	ldd	r19, Y+5	; 0x05
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	2c f4       	brge	.+10     	; 0xc76 <DIO_VidSetPinDirection+0x130>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f0       	breq	.+26     	; 0xc8e <DIO_VidSetPinDirection+0x148>
     c74:	5f c0       	rjmp	.+190    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	3d 81       	ldd	r19, Y+5	; 0x05
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	89 f1       	breq	.+98     	; 0xce2 <DIO_VidSetPinDirection+0x19c>
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <DIO_VidSetPinDirection+0x146>
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <DIO_VidSetPinDirection+0x1c6>
     c8c:	53 c0       	rjmp	.+166    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
		{
			case PORTA:CLR_BIT(DDRA, copy_U8pin); break;
     c8e:	aa e3       	ldi	r26, 0x3A	; 58
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ea e3       	ldi	r30, 0x3A	; 58
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_VidSetPinDirection+0x166>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_VidSetPinDirection+0x162>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	3e c0       	rjmp	.+124    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case PORTB:CLR_BIT(DDRB, copy_U8pin); break;
     cb8:	a7 e3       	ldi	r26, 0x37	; 55
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e7 e3       	ldi	r30, 0x37	; 55
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_VidSetPinDirection+0x190>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_VidSetPinDirection+0x18c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	29 c0       	rjmp	.+82     	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
		    case PORTC:CLR_BIT(DDRC, copy_U8pin); break;
     ce2:	a4 e3       	ldi	r26, 0x34	; 52
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e4 e3       	ldi	r30, 0x34	; 52
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_VidSetPinDirection+0x1ba>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_VidSetPinDirection+0x1b6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
		    case PORTD:CLR_BIT(DDRD, copy_U8pin); break;
     d0c:	a1 e3       	ldi	r26, 0x31	; 49
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e1 e3       	ldi	r30, 0x31	; 49
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_VidSetPinDirection+0x1e4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_VidSetPinDirection+0x1e0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
	else
	{
		
	}
	
}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue			(u8 copy_u8port, u8 copy_U8pin, u8 copy_U8value)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
	if(HIGH==copy_U8value)
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	09 f0       	breq	.+2      	; 0xd68 <DIO_VidSetPinValue+0x22>
     d66:	6f c0       	rjmp	.+222    	; 0xe46 <DIO_VidSetPinValue+0x100>
	{
		switch (copy_u8port)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3f 83       	std	Y+7, r19	; 0x07
     d70:	2e 83       	std	Y+6, r18	; 0x06
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	49 f1       	breq	.+82     	; 0xdce <DIO_VidSetPinValue+0x88>
     d7c:	2e 81       	ldd	r18, Y+6	; 0x06
     d7e:	3f 81       	ldd	r19, Y+7	; 0x07
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	2c f4       	brge	.+10     	; 0xd90 <DIO_VidSetPinValue+0x4a>
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	9f 81       	ldd	r25, Y+7	; 0x07
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	61 f0       	breq	.+24     	; 0xda6 <DIO_VidSetPinValue+0x60>
     d8e:	d2 c0       	rjmp	.+420    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
     d90:	2e 81       	ldd	r18, Y+6	; 0x06
     d92:	3f 81       	ldd	r19, Y+7	; 0x07
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	71 f1       	breq	.+92     	; 0xdf6 <DIO_VidSetPinValue+0xb0>
     d9a:	8e 81       	ldd	r24, Y+6	; 0x06
     d9c:	9f 81       	ldd	r25, Y+7	; 0x07
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	91 05       	cpc	r25, r1
     da2:	e9 f1       	breq	.+122    	; 0xe1e <DIO_VidSetPinValue+0xd8>
     da4:	c7 c0       	rjmp	.+398    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
		{
			case PORTA:SET_BIT(PORT_A, copy_U8pin); break;
     da6:	ab e3       	ldi	r26, 0x3B	; 59
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	eb e3       	ldi	r30, 0x3B	; 59
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_VidSetPinValue+0x7e>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_VidSetPinValue+0x7a>
     dc8:	84 2b       	or	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	b3 c0       	rjmp	.+358    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
			case PORTB:SET_BIT(PORT_B, copy_U8pin); break;
     dce:	a8 e3       	ldi	r26, 0x38	; 56
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e8 e3       	ldi	r30, 0x38	; 56
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 2e       	mov	r0, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_VidSetPinValue+0xa6>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_VidSetPinValue+0xa2>
     df0:	84 2b       	or	r24, r20
     df2:	8c 93       	st	X, r24
     df4:	9f c0       	rjmp	.+318    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
			case PORTC:SET_BIT(PORT_C, copy_U8pin); break;
     df6:	a5 e3       	ldi	r26, 0x35	; 53
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e5 e3       	ldi	r30, 0x35	; 53
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_VidSetPinValue+0xce>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_VidSetPinValue+0xca>
     e18:	84 2b       	or	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	8b c0       	rjmp	.+278    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
			case PORTD:SET_BIT(PORT_D, copy_U8pin); break;
     e1e:	a2 e3       	ldi	r26, 0x32	; 50
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e2 e3       	ldi	r30, 0x32	; 50
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_VidSetPinValue+0xf6>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_VidSetPinValue+0xf2>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	77 c0       	rjmp	.+238    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
	
		}	
	}
	else if(LOW==copy_U8value)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	88 23       	and	r24, r24
     e4a:	09 f0       	breq	.+2      	; 0xe4e <DIO_VidSetPinValue+0x108>
     e4c:	73 c0       	rjmp	.+230    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
	{
		switch(copy_u8port)
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3d 83       	std	Y+5, r19	; 0x05
     e56:	2c 83       	std	Y+4, r18	; 0x04
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	91 05       	cpc	r25, r1
     e60:	59 f1       	breq	.+86     	; 0xeb8 <DIO_VidSetPinValue+0x172>
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	22 30       	cpi	r18, 0x02	; 2
     e68:	31 05       	cpc	r19, r1
     e6a:	2c f4       	brge	.+10     	; 0xe76 <DIO_VidSetPinValue+0x130>
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	69 f0       	breq	.+26     	; 0xe8e <DIO_VidSetPinValue+0x148>
     e74:	5f c0       	rjmp	.+190    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
     e76:	2c 81       	ldd	r18, Y+4	; 0x04
     e78:	3d 81       	ldd	r19, Y+5	; 0x05
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	89 f1       	breq	.+98     	; 0xee2 <DIO_VidSetPinValue+0x19c>
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	9d 81       	ldd	r25, Y+5	; 0x05
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	91 05       	cpc	r25, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <DIO_VidSetPinValue+0x146>
     e8a:	40 c0       	rjmp	.+128    	; 0xf0c <DIO_VidSetPinValue+0x1c6>
     e8c:	53 c0       	rjmp	.+166    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
		{
			case PORTA:CLR_BIT(PORT_A, copy_U8pin); break;
     e8e:	ab e3       	ldi	r26, 0x3B	; 59
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e3       	ldi	r30, 0x3B	; 59
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_VidSetPinValue+0x166>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_VidSetPinValue+0x162>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	3e c0       	rjmp	.+124    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
			case PORTB:CLR_BIT(PORT_B, copy_U8pin); break;
     eb8:	a8 e3       	ldi	r26, 0x38	; 56
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e8 e3       	ldi	r30, 0x38	; 56
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_VidSetPinValue+0x190>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_VidSetPinValue+0x18c>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	29 c0       	rjmp	.+82     	; 0xf34 <DIO_VidSetPinValue+0x1ee>
		    case PORTC:CLR_BIT(PORT_C, copy_U8pin); break;
     ee2:	a5 e3       	ldi	r26, 0x35	; 53
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e3       	ldi	r30, 0x35	; 53
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_VidSetPinValue+0x1ba>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_VidSetPinValue+0x1b6>
     f04:	80 95       	com	r24
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <DIO_VidSetPinValue+0x1ee>
		    case PORTD:CLR_BIT(PORT_D, copy_U8pin); break;
     f0c:	a2 e3       	ldi	r26, 0x32	; 50
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e2 e3       	ldi	r30, 0x32	; 50
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_VidSetPinValue+0x1e4>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_VidSetPinValue+0x1e0>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
		
	}	
	
	
	
}
     f34:	27 96       	adiw	r28, 0x07	; 7
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <DIO_VidGetPinValue>:


u8 DIO_VidGetPinValue			(u8 copy_u8port, u8 Copy_U8Pin)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <DIO_VidGetPinValue+0x6>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <DIO_VidGetPinValue+0x8>
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	8a 83       	std	Y+2, r24	; 0x02
     f56:	6b 83       	std	Y+3, r22	; 0x03
	u8 Lcal_U8PinResult=0;
     f58:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3d 83       	std	Y+5, r19	; 0x05
     f62:	2c 83       	std	Y+4, r18	; 0x04
     f64:	4c 81       	ldd	r20, Y+4	; 0x04
     f66:	5d 81       	ldd	r21, Y+5	; 0x05
     f68:	41 30       	cpi	r20, 0x01	; 1
     f6a:	51 05       	cpc	r21, r1
     f6c:	41 f1       	breq	.+80     	; 0xfbe <DIO_VidGetPinValue+0x78>
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	91 05       	cpc	r25, r1
     f76:	34 f4       	brge	.+12     	; 0xf84 <DIO_VidGetPinValue+0x3e>
     f78:	2c 81       	ldd	r18, Y+4	; 0x04
     f7a:	3d 81       	ldd	r19, Y+5	; 0x05
     f7c:	21 15       	cp	r18, r1
     f7e:	31 05       	cpc	r19, r1
     f80:	61 f0       	breq	.+24     	; 0xf9a <DIO_VidGetPinValue+0x54>
     f82:	52 c0       	rjmp	.+164    	; 0x1028 <DIO_VidGetPinValue+0xe2>
     f84:	4c 81       	ldd	r20, Y+4	; 0x04
     f86:	5d 81       	ldd	r21, Y+5	; 0x05
     f88:	42 30       	cpi	r20, 0x02	; 2
     f8a:	51 05       	cpc	r21, r1
     f8c:	51 f1       	breq	.+84     	; 0xfe2 <DIO_VidGetPinValue+0x9c>
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	91 05       	cpc	r25, r1
     f96:	b9 f1       	breq	.+110    	; 0x1006 <DIO_VidGetPinValue+0xc0>
     f98:	47 c0       	rjmp	.+142    	; 0x1028 <DIO_VidGetPinValue+0xe2>

			case PORTA :		Lcal_U8PinResult=GET_BIT(PINA,Copy_U8Pin);	        break;
     f9a:	e9 e3       	ldi	r30, 0x39	; 57
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a9 01       	movw	r20, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_VidGetPinValue+0x6c>
     fae:	55 95       	asr	r21
     fb0:	47 95       	ror	r20
     fb2:	8a 95       	dec	r24
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_VidGetPinValue+0x68>
     fb6:	ca 01       	movw	r24, r20
     fb8:	81 70       	andi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	35 c0       	rjmp	.+106    	; 0x1028 <DIO_VidGetPinValue+0xe2>
			case PORTB :		Lcal_U8PinResult=GET_BIT(PINB,Copy_U8Pin); 		    break;
     fbe:	e6 e3       	ldi	r30, 0x36	; 54
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_VidGetPinValue+0x90>
     fd2:	55 95       	asr	r21
     fd4:	47 95       	ror	r20
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_VidGetPinValue+0x8c>
     fda:	ca 01       	movw	r24, r20
     fdc:	81 70       	andi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	23 c0       	rjmp	.+70     	; 0x1028 <DIO_VidGetPinValue+0xe2>
			case PORTC :		Lcal_U8PinResult=GET_BIT(PINC,Copy_U8Pin);			break;
     fe2:	e3 e3       	ldi	r30, 0x33	; 51
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a9 01       	movw	r20, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_VidGetPinValue+0xb4>
     ff6:	55 95       	asr	r21
     ff8:	47 95       	ror	r20
     ffa:	8a 95       	dec	r24
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_VidGetPinValue+0xb0>
     ffe:	ca 01       	movw	r24, r20
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	11 c0       	rjmp	.+34     	; 0x1028 <DIO_VidGetPinValue+0xe2>
			case PORTD :		Lcal_U8PinResult=GET_BIT(PIND,Copy_U8Pin);			break;
    1006:	e0 e3       	ldi	r30, 0x30	; 48
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a9 01       	movw	r20, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_VidGetPinValue+0xd8>
    101a:	55 95       	asr	r21
    101c:	47 95       	ror	r20
    101e:	8a 95       	dec	r24
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_VidGetPinValue+0xd4>
    1022:	ca 01       	movw	r24, r20
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PinResult);
    1028:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection	(u8 copy_u8port, u8 copy_U8state)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <DIO_VidSetPortDirection+0x6>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <DIO_VidSetPortDirection+0x8>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <DIO_VidSetPortDirection+0xa>
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	6a 83       	std	Y+2, r22	; 0x02
	
	if(OUTPUT==copy_U8state)
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	99 f5       	brne	.+102    	; 0x10b8 <DIO_VidSetPortDirection+0x7e>
	{
		switch (copy_u8port)
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	3e 83       	std	Y+6, r19	; 0x06
    105a:	2d 83       	std	Y+5, r18	; 0x05
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	91 05       	cpc	r25, r1
    1064:	d1 f0       	breq	.+52     	; 0x109a <DIO_VidSetPortDirection+0x60>
    1066:	2d 81       	ldd	r18, Y+5	; 0x05
    1068:	3e 81       	ldd	r19, Y+6	; 0x06
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	2c f4       	brge	.+10     	; 0x107a <DIO_VidSetPortDirection+0x40>
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	61 f0       	breq	.+24     	; 0x1090 <DIO_VidSetPortDirection+0x56>
    1078:	50 c0       	rjmp	.+160    	; 0x111a <DIO_VidSetPortDirection+0xe0>
    107a:	2d 81       	ldd	r18, Y+5	; 0x05
    107c:	3e 81       	ldd	r19, Y+6	; 0x06
    107e:	22 30       	cpi	r18, 0x02	; 2
    1080:	31 05       	cpc	r19, r1
    1082:	81 f0       	breq	.+32     	; 0x10a4 <DIO_VidSetPortDirection+0x6a>
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	9e 81       	ldd	r25, Y+6	; 0x06
    1088:	83 30       	cpi	r24, 0x03	; 3
    108a:	91 05       	cpc	r25, r1
    108c:	81 f0       	breq	.+32     	; 0x10ae <DIO_VidSetPortDirection+0x74>
    108e:	45 c0       	rjmp	.+138    	; 0x111a <DIO_VidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_OUTPUT		; break;
    1090:	ea e3       	ldi	r30, 0x3A	; 58
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	80 83       	st	Z, r24
    1098:	40 c0       	rjmp	.+128    	; 0x111a <DIO_VidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_OUTPUT		; break;
    109a:	e7 e3       	ldi	r30, 0x37	; 55
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	80 83       	st	Z, r24
    10a2:	3b c0       	rjmp	.+118    	; 0x111a <DIO_VidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_OUTPUT		; break;
    10a4:	e4 e3       	ldi	r30, 0x34	; 52
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	80 83       	st	Z, r24
    10ac:	36 c0       	rjmp	.+108    	; 0x111a <DIO_VidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_OUTPUT		; break;
    10ae:	e1 e3       	ldi	r30, 0x31	; 49
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	8f ef       	ldi	r24, 0xFF	; 255
    10b4:	80 83       	st	Z, r24
    10b6:	31 c0       	rjmp	.+98     	; 0x111a <DIO_VidSetPortDirection+0xe0>
	
		}	
	}
	else if(INPUT==copy_U8state)
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	88 23       	and	r24, r24
    10bc:	71 f5       	brne	.+92     	; 0x111a <DIO_VidSetPortDirection+0xe0>
	{
		switch(copy_u8port)
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	3c 83       	std	Y+4, r19	; 0x04
    10c6:	2b 83       	std	Y+3, r18	; 0x03
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	91 05       	cpc	r25, r1
    10d0:	c9 f0       	breq	.+50     	; 0x1104 <DIO_VidSetPortDirection+0xca>
    10d2:	2b 81       	ldd	r18, Y+3	; 0x03
    10d4:	3c 81       	ldd	r19, Y+4	; 0x04
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	2c f4       	brge	.+10     	; 0x10e6 <DIO_VidSetPortDirection+0xac>
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	61 f0       	breq	.+24     	; 0x10fc <DIO_VidSetPortDirection+0xc2>
    10e4:	1a c0       	rjmp	.+52     	; 0x111a <DIO_VidSetPortDirection+0xe0>
    10e6:	2b 81       	ldd	r18, Y+3	; 0x03
    10e8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	71 f0       	breq	.+28     	; 0x110c <DIO_VidSetPortDirection+0xd2>
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	91 05       	cpc	r25, r1
    10f8:	69 f0       	breq	.+26     	; 0x1114 <DIO_VidSetPortDirection+0xda>
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <DIO_VidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_INPUT		; break;
    10fc:	ea e3       	ldi	r30, 0x3A	; 58
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	10 82       	st	Z, r1
    1102:	0b c0       	rjmp	.+22     	; 0x111a <DIO_VidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_INPUT		; break;
    1104:	e7 e3       	ldi	r30, 0x37	; 55
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	10 82       	st	Z, r1
    110a:	07 c0       	rjmp	.+14     	; 0x111a <DIO_VidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_INPUT		; break;
    110c:	e4 e3       	ldi	r30, 0x34	; 52
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	10 82       	st	Z, r1
    1112:	03 c0       	rjmp	.+6      	; 0x111a <DIO_VidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_INPUT		; break;
    1114:	e1 e3       	ldi	r30, 0x31	; 49
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	10 82       	st	Z, r1
	{
		
	}
	
	
}
    111a:	26 96       	adiw	r28, 0x06	; 6
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <DIO_VidSetPortValue>:
void DIO_VidSetPortValue		(u8 copy_u8port, u8 copy_U8value)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	00 d0       	rcall	.+0      	; 0x1132 <DIO_VidSetPortValue+0x6>
    1132:	00 d0       	rcall	.+0      	; 0x1134 <DIO_VidSetPortValue+0x8>
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	6a 83       	std	Y+2, r22	; 0x02
		
		switch (copy_u8port)
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	3c 83       	std	Y+4, r19	; 0x04
    1144:	2b 83       	std	Y+3, r18	; 0x03
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	91 05       	cpc	r25, r1
    114e:	d1 f0       	breq	.+52     	; 0x1184 <DIO_VidSetPortValue+0x58>
    1150:	2b 81       	ldd	r18, Y+3	; 0x03
    1152:	3c 81       	ldd	r19, Y+4	; 0x04
    1154:	22 30       	cpi	r18, 0x02	; 2
    1156:	31 05       	cpc	r19, r1
    1158:	2c f4       	brge	.+10     	; 0x1164 <DIO_VidSetPortValue+0x38>
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	9c 81       	ldd	r25, Y+4	; 0x04
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	61 f0       	breq	.+24     	; 0x117a <DIO_VidSetPortValue+0x4e>
    1162:	1e c0       	rjmp	.+60     	; 0x11a0 <DIO_VidSetPortValue+0x74>
    1164:	2b 81       	ldd	r18, Y+3	; 0x03
    1166:	3c 81       	ldd	r19, Y+4	; 0x04
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	31 05       	cpc	r19, r1
    116c:	81 f0       	breq	.+32     	; 0x118e <DIO_VidSetPortValue+0x62>
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	83 30       	cpi	r24, 0x03	; 3
    1174:	91 05       	cpc	r25, r1
    1176:	81 f0       	breq	.+32     	; 0x1198 <DIO_VidSetPortValue+0x6c>
    1178:	13 c0       	rjmp	.+38     	; 0x11a0 <DIO_VidSetPortValue+0x74>
		{
			case PORTA:PORT_A=copy_U8value		; break;
    117a:	eb e3       	ldi	r30, 0x3B	; 59
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	80 83       	st	Z, r24
    1182:	0e c0       	rjmp	.+28     	; 0x11a0 <DIO_VidSetPortValue+0x74>
			case PORTB:PORT_B=copy_U8value		; break;
    1184:	e8 e3       	ldi	r30, 0x38	; 56
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	80 83       	st	Z, r24
    118c:	09 c0       	rjmp	.+18     	; 0x11a0 <DIO_VidSetPortValue+0x74>
			case PORTC:PORT_C=copy_U8value		; break;
    118e:	e5 e3       	ldi	r30, 0x35	; 53
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	80 83       	st	Z, r24
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <DIO_VidSetPortValue+0x74>
			case PORTD:PORT_D=copy_U8value		; break;
    1198:	e2 e3       	ldi	r30, 0x32	; 50
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	80 83       	st	Z, r24
		}	
	
	
	
	
}
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <DIO_VidTogglePin>:

void DIO_VidTogglePin			(u8 copy_u8port, u8 copy_U8pin)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <DIO_VidTogglePin+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <DIO_VidTogglePin+0x8>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	6a 83       	std	Y+2, r22	; 0x02

		switch (copy_u8port)
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	3c 83       	std	Y+4, r19	; 0x04
    11c6:	2b 83       	std	Y+3, r18	; 0x03
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	91 05       	cpc	r25, r1
    11d0:	49 f1       	breq	.+82     	; 0x1224 <DIO_VidTogglePin+0x76>
    11d2:	2b 81       	ldd	r18, Y+3	; 0x03
    11d4:	3c 81       	ldd	r19, Y+4	; 0x04
    11d6:	22 30       	cpi	r18, 0x02	; 2
    11d8:	31 05       	cpc	r19, r1
    11da:	2c f4       	brge	.+10     	; 0x11e6 <DIO_VidTogglePin+0x38>
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	61 f0       	breq	.+24     	; 0x11fc <DIO_VidTogglePin+0x4e>
    11e4:	5a c0       	rjmp	.+180    	; 0x129a <DIO_VidTogglePin+0xec>
    11e6:	2b 81       	ldd	r18, Y+3	; 0x03
    11e8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	31 05       	cpc	r19, r1
    11ee:	71 f1       	breq	.+92     	; 0x124c <DIO_VidTogglePin+0x9e>
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	83 30       	cpi	r24, 0x03	; 3
    11f6:	91 05       	cpc	r25, r1
    11f8:	e9 f1       	breq	.+122    	; 0x1274 <DIO_VidTogglePin+0xc6>
    11fa:	4f c0       	rjmp	.+158    	; 0x129a <DIO_VidTogglePin+0xec>
		{
					case PORTA:TOG_BIT(PORT_A, copy_U8pin); break;
    11fc:	ab e3       	ldi	r26, 0x3B	; 59
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	eb e3       	ldi	r30, 0x3B	; 59
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_VidTogglePin+0x6c>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <DIO_VidTogglePin+0x68>
    121e:	84 27       	eor	r24, r20
    1220:	8c 93       	st	X, r24
    1222:	3b c0       	rjmp	.+118    	; 0x129a <DIO_VidTogglePin+0xec>
					case PORTB:TOG_BIT(PORT_B, copy_U8pin); break;
    1224:	a8 e3       	ldi	r26, 0x38	; 56
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e8 e3       	ldi	r30, 0x38	; 56
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_VidTogglePin+0x94>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_VidTogglePin+0x90>
    1246:	84 27       	eor	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	27 c0       	rjmp	.+78     	; 0x129a <DIO_VidTogglePin+0xec>
					case PORTC:TOG_BIT(PORT_C, copy_U8pin); break;
    124c:	a5 e3       	ldi	r26, 0x35	; 53
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e5 e3       	ldi	r30, 0x35	; 53
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_VidTogglePin+0xbc>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_VidTogglePin+0xb8>
    126e:	84 27       	eor	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	13 c0       	rjmp	.+38     	; 0x129a <DIO_VidTogglePin+0xec>
					case PORTD:TOG_BIT(PORT_D, copy_U8pin); break;
    1274:	a2 e3       	ldi	r26, 0x32	; 50
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e2 e3       	ldi	r30, 0x32	; 50
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_VidTogglePin+0xe4>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_VidTogglePin+0xe0>
    1296:	84 27       	eor	r24, r20
    1298:	8c 93       	st	X, r24
		}

}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 copy_u8port)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <DIO_u8GetPortValue+0x6>
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <DIO_u8GetPortValue+0x8>
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	8a 83       	std	Y+2, r24	; 0x02
		u8 Lcal_U8PortResult=0;
    12b6:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	3c 83       	std	Y+4, r19	; 0x04
    12c0:	2b 83       	std	Y+3, r18	; 0x03
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	91 05       	cpc	r25, r1
    12ca:	d1 f0       	breq	.+52     	; 0x1300 <DIO_u8GetPortValue+0x58>
    12cc:	2b 81       	ldd	r18, Y+3	; 0x03
    12ce:	3c 81       	ldd	r19, Y+4	; 0x04
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	2c f4       	brge	.+10     	; 0x12e0 <DIO_u8GetPortValue+0x38>
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	61 f0       	breq	.+24     	; 0x12f6 <DIO_u8GetPortValue+0x4e>
    12de:	1e c0       	rjmp	.+60     	; 0x131c <DIO_u8GetPortValue+0x74>
    12e0:	2b 81       	ldd	r18, Y+3	; 0x03
    12e2:	3c 81       	ldd	r19, Y+4	; 0x04
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	81 f0       	breq	.+32     	; 0x130a <DIO_u8GetPortValue+0x62>
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	91 05       	cpc	r25, r1
    12f2:	81 f0       	breq	.+32     	; 0x1314 <DIO_u8GetPortValue+0x6c>
    12f4:	13 c0       	rjmp	.+38     	; 0x131c <DIO_u8GetPortValue+0x74>

			case PORTA :	Lcal_U8PortResult=PINA;	        break;
    12f6:	e9 e3       	ldi	r30, 0x39	; 57
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	0e c0       	rjmp	.+28     	; 0x131c <DIO_u8GetPortValue+0x74>
			case PORTB :	Lcal_U8PortResult=PINB; 		    break;
    1300:	e6 e3       	ldi	r30, 0x36	; 54
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	09 c0       	rjmp	.+18     	; 0x131c <DIO_u8GetPortValue+0x74>
			case PORTC :	Lcal_U8PortResult=PINC;			break;
    130a:	e3 e3       	ldi	r30, 0x33	; 51
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	04 c0       	rjmp	.+8      	; 0x131c <DIO_u8GetPortValue+0x74>
			case PORTD :	Lcal_U8PortResult=PIND;			break;
    1314:	e0 e3       	ldi	r30, 0x30	; 48
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PortResult);
    131c:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <LCD_VidInit>:




void LCD_VidInit(void)
{
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	c6 54       	subi	r28, 0x46	; 70
    133a:	d0 40       	sbci	r29, 0x00	; 0
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61

	#if LCD_Mode==EIGHT_BIT
	DIO_VidSetPinDirection	( Lcopy_u8PORT	,RS_copy_u8Pin,  OUTPUT);
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	41 e0       	ldi	r20, 0x01	; 1
    134c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection	( Lcopy_u8PORT	,R_w_copy_u8Pin, OUTPUT);
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	61 e0       	ldi	r22, 0x01	; 1
    1354:	41 e0       	ldi	r20, 0x01	; 1
    1356:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection	( Lcopy_u8PORT	,E_copy_u8Pin,   OUTPUT);
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	62 e0       	ldi	r22, 0x02	; 2
    135e:	41 e0       	ldi	r20, 0x01	; 1
    1360:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
    1364:	fe 01       	movw	r30, r28
    1366:	ed 5b       	subi	r30, 0xBD	; 189
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a0 e2       	ldi	r26, 0x20	; 32
    1370:	b2 e4       	ldi	r27, 0x42	; 66
    1372:	80 83       	st	Z, r24
    1374:	91 83       	std	Z+1, r25	; 0x01
    1376:	a2 83       	std	Z+2, r26	; 0x02
    1378:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    137a:	8e 01       	movw	r16, r28
    137c:	01 5c       	subi	r16, 0xC1	; 193
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	fe 01       	movw	r30, r28
    1382:	ed 5b       	subi	r30, 0xBD	; 189
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	60 81       	ld	r22, Z
    1388:	71 81       	ldd	r23, Z+1	; 0x01
    138a:	82 81       	ldd	r24, Z+2	; 0x02
    138c:	93 81       	ldd	r25, Z+3	; 0x03
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	4a ef       	ldi	r20, 0xFA	; 250
    1394:	54 e4       	ldi	r21, 0x44	; 68
    1396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	f8 01       	movw	r30, r16
    13a0:	80 83       	st	Z, r24
    13a2:	91 83       	std	Z+1, r25	; 0x01
    13a4:	a2 83       	std	Z+2, r26	; 0x02
    13a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13a8:	fe 01       	movw	r30, r28
    13aa:	ff 96       	adiw	r30, 0x3f	; 63
    13ac:	60 81       	ld	r22, Z
    13ae:	71 81       	ldd	r23, Z+1	; 0x01
    13b0:	82 81       	ldd	r24, Z+2	; 0x02
    13b2:	93 81       	ldd	r25, Z+3	; 0x03
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e8       	ldi	r20, 0x80	; 128
    13ba:	5f e3       	ldi	r21, 0x3F	; 63
    13bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c0:	88 23       	and	r24, r24
    13c2:	2c f4       	brge	.+10     	; 0x13ce <LCD_VidInit+0xa2>
		__ticks = 1;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	9e af       	std	Y+62, r25	; 0x3e
    13ca:	8d af       	std	Y+61, r24	; 0x3d
    13cc:	46 c0       	rjmp	.+140    	; 0x145a <LCD_VidInit+0x12e>
	else if (__tmp > 65535)
    13ce:	fe 01       	movw	r30, r28
    13d0:	ff 96       	adiw	r30, 0x3f	; 63
    13d2:	60 81       	ld	r22, Z
    13d4:	71 81       	ldd	r23, Z+1	; 0x01
    13d6:	82 81       	ldd	r24, Z+2	; 0x02
    13d8:	93 81       	ldd	r25, Z+3	; 0x03
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	3f ef       	ldi	r19, 0xFF	; 255
    13de:	4f e7       	ldi	r20, 0x7F	; 127
    13e0:	57 e4       	ldi	r21, 0x47	; 71
    13e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e6:	18 16       	cp	r1, r24
    13e8:	64 f5       	brge	.+88     	; 0x1442 <LCD_VidInit+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ea:	fe 01       	movw	r30, r28
    13ec:	ed 5b       	subi	r30, 0xBD	; 189
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	60 81       	ld	r22, Z
    13f2:	71 81       	ldd	r23, Z+1	; 0x01
    13f4:	82 81       	ldd	r24, Z+2	; 0x02
    13f6:	93 81       	ldd	r25, Z+3	; 0x03
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e2       	ldi	r20, 0x20	; 32
    13fe:	51 e4       	ldi	r21, 0x41	; 65
    1400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	bc 01       	movw	r22, r24
    140a:	cd 01       	movw	r24, r26
    140c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	9e af       	std	Y+62, r25	; 0x3e
    1416:	8d af       	std	Y+61, r24	; 0x3d
    1418:	0f c0       	rjmp	.+30     	; 0x1438 <LCD_VidInit+0x10c>
    141a:	88 ec       	ldi	r24, 0xC8	; 200
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	9c af       	std	Y+60, r25	; 0x3c
    1420:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1422:	8b ad       	ldd	r24, Y+59	; 0x3b
    1424:	9c ad       	ldd	r25, Y+60	; 0x3c
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <LCD_VidInit+0xfa>
    142a:	9c af       	std	Y+60, r25	; 0x3c
    142c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    142e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1430:	9e ad       	ldd	r25, Y+62	; 0x3e
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	9e af       	std	Y+62, r25	; 0x3e
    1436:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1438:	8d ad       	ldd	r24, Y+61	; 0x3d
    143a:	9e ad       	ldd	r25, Y+62	; 0x3e
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	69 f7       	brne	.-38     	; 0x141a <LCD_VidInit+0xee>
    1440:	16 c0       	rjmp	.+44     	; 0x146e <LCD_VidInit+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1442:	fe 01       	movw	r30, r28
    1444:	ff 96       	adiw	r30, 0x3f	; 63
    1446:	60 81       	ld	r22, Z
    1448:	71 81       	ldd	r23, Z+1	; 0x01
    144a:	82 81       	ldd	r24, Z+2	; 0x02
    144c:	93 81       	ldd	r25, Z+3	; 0x03
    144e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9e af       	std	Y+62, r25	; 0x3e
    1458:	8d af       	std	Y+61, r24	; 0x3d
    145a:	8d ad       	ldd	r24, Y+61	; 0x3d
    145c:	9e ad       	ldd	r25, Y+62	; 0x3e
    145e:	9a af       	std	Y+58, r25	; 0x3a
    1460:	89 af       	std	Y+57, r24	; 0x39
    1462:	89 ad       	ldd	r24, Y+57	; 0x39
    1464:	9a ad       	ldd	r25, Y+58	; 0x3a
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <LCD_VidInit+0x13a>
    146a:	9a af       	std	Y+58, r25	; 0x3a
    146c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);
	DIO_VidSetPortDirection	( LDcopy_u8PORT,OUTPUT);
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	61 e0       	ldi	r22, 0x01	; 1
    1472:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_VidSetPortDirection>

	LCD_VidSendCommand(0b00111000);
    1476:	88 e3       	ldi	r24, 0x38	; 56
    1478:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_VidSendCommand>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a0 e8       	ldi	r26, 0x80	; 128
    1482:	bf e3       	ldi	r27, 0x3F	; 63
    1484:	8d ab       	std	Y+53, r24	; 0x35
    1486:	9e ab       	std	Y+54, r25	; 0x36
    1488:	af ab       	std	Y+55, r26	; 0x37
    148a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148c:	6d a9       	ldd	r22, Y+53	; 0x35
    148e:	7e a9       	ldd	r23, Y+54	; 0x36
    1490:	8f a9       	ldd	r24, Y+55	; 0x37
    1492:	98 ad       	ldd	r25, Y+56	; 0x38
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	4a ef       	ldi	r20, 0xFA	; 250
    149a:	54 e4       	ldi	r21, 0x44	; 68
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	89 ab       	std	Y+49, r24	; 0x31
    14a6:	9a ab       	std	Y+50, r25	; 0x32
    14a8:	ab ab       	std	Y+51, r26	; 0x33
    14aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14ac:	69 a9       	ldd	r22, Y+49	; 0x31
    14ae:	7a a9       	ldd	r23, Y+50	; 0x32
    14b0:	8b a9       	ldd	r24, Y+51	; 0x33
    14b2:	9c a9       	ldd	r25, Y+52	; 0x34
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e8       	ldi	r20, 0x80	; 128
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14c0:	88 23       	and	r24, r24
    14c2:	2c f4       	brge	.+10     	; 0x14ce <LCD_VidInit+0x1a2>
		__ticks = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	98 ab       	std	Y+48, r25	; 0x30
    14ca:	8f a7       	std	Y+47, r24	; 0x2f
    14cc:	3f c0       	rjmp	.+126    	; 0x154c <LCD_VidInit+0x220>
	else if (__tmp > 65535)
    14ce:	69 a9       	ldd	r22, Y+49	; 0x31
    14d0:	7a a9       	ldd	r23, Y+50	; 0x32
    14d2:	8b a9       	ldd	r24, Y+51	; 0x33
    14d4:	9c a9       	ldd	r25, Y+52	; 0x34
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	3f ef       	ldi	r19, 0xFF	; 255
    14da:	4f e7       	ldi	r20, 0x7F	; 127
    14dc:	57 e4       	ldi	r21, 0x47	; 71
    14de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e2:	18 16       	cp	r1, r24
    14e4:	4c f5       	brge	.+82     	; 0x1538 <LCD_VidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e6:	6d a9       	ldd	r22, Y+53	; 0x35
    14e8:	7e a9       	ldd	r23, Y+54	; 0x36
    14ea:	8f a9       	ldd	r24, Y+55	; 0x37
    14ec:	98 ad       	ldd	r25, Y+56	; 0x38
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e2       	ldi	r20, 0x20	; 32
    14f4:	51 e4       	ldi	r21, 0x41	; 65
    14f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	98 ab       	std	Y+48, r25	; 0x30
    150c:	8f a7       	std	Y+47, r24	; 0x2f
    150e:	0f c0       	rjmp	.+30     	; 0x152e <LCD_VidInit+0x202>
    1510:	88 ec       	ldi	r24, 0xC8	; 200
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	9e a7       	std	Y+46, r25	; 0x2e
    1516:	8d a7       	std	Y+45, r24	; 0x2d
    1518:	8d a5       	ldd	r24, Y+45	; 0x2d
    151a:	9e a5       	ldd	r25, Y+46	; 0x2e
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <LCD_VidInit+0x1f0>
    1520:	9e a7       	std	Y+46, r25	; 0x2e
    1522:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1524:	8f a5       	ldd	r24, Y+47	; 0x2f
    1526:	98 a9       	ldd	r25, Y+48	; 0x30
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	98 ab       	std	Y+48, r25	; 0x30
    152c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1530:	98 a9       	ldd	r25, Y+48	; 0x30
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	69 f7       	brne	.-38     	; 0x1510 <LCD_VidInit+0x1e4>
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <LCD_VidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1538:	69 a9       	ldd	r22, Y+49	; 0x31
    153a:	7a a9       	ldd	r23, Y+50	; 0x32
    153c:	8b a9       	ldd	r24, Y+51	; 0x33
    153e:	9c a9       	ldd	r25, Y+52	; 0x34
    1540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	98 ab       	std	Y+48, r25	; 0x30
    154a:	8f a7       	std	Y+47, r24	; 0x2f
    154c:	8f a5       	ldd	r24, Y+47	; 0x2f
    154e:	98 a9       	ldd	r25, Y+48	; 0x30
    1550:	9c a7       	std	Y+44, r25	; 0x2c
    1552:	8b a7       	std	Y+43, r24	; 0x2b
    1554:	8b a5       	ldd	r24, Y+43	; 0x2b
    1556:	9c a5       	ldd	r25, Y+44	; 0x2c
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <LCD_VidInit+0x22c>
    155c:	9c a7       	std	Y+44, r25	; 0x2c
    155e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_VidSendCommand(0b00001111);
    1560:	8f e0       	ldi	r24, 0x0F	; 15
    1562:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_VidSendCommand>
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	a0 e8       	ldi	r26, 0x80	; 128
    156c:	bf e3       	ldi	r27, 0x3F	; 63
    156e:	8f a3       	std	Y+39, r24	; 0x27
    1570:	98 a7       	std	Y+40, r25	; 0x28
    1572:	a9 a7       	std	Y+41, r26	; 0x29
    1574:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1576:	6f a1       	ldd	r22, Y+39	; 0x27
    1578:	78 a5       	ldd	r23, Y+40	; 0x28
    157a:	89 a5       	ldd	r24, Y+41	; 0x29
    157c:	9a a5       	ldd	r25, Y+42	; 0x2a
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	4a ef       	ldi	r20, 0xFA	; 250
    1584:	54 e4       	ldi	r21, 0x44	; 68
    1586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	8b a3       	std	Y+35, r24	; 0x23
    1590:	9c a3       	std	Y+36, r25	; 0x24
    1592:	ad a3       	std	Y+37, r26	; 0x25
    1594:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1596:	6b a1       	ldd	r22, Y+35	; 0x23
    1598:	7c a1       	ldd	r23, Y+36	; 0x24
    159a:	8d a1       	ldd	r24, Y+37	; 0x25
    159c:	9e a1       	ldd	r25, Y+38	; 0x26
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15aa:	88 23       	and	r24, r24
    15ac:	2c f4       	brge	.+10     	; 0x15b8 <LCD_VidInit+0x28c>
		__ticks = 1;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	9a a3       	std	Y+34, r25	; 0x22
    15b4:	89 a3       	std	Y+33, r24	; 0x21
    15b6:	3f c0       	rjmp	.+126    	; 0x1636 <LCD_VidInit+0x30a>
	else if (__tmp > 65535)
    15b8:	6b a1       	ldd	r22, Y+35	; 0x23
    15ba:	7c a1       	ldd	r23, Y+36	; 0x24
    15bc:	8d a1       	ldd	r24, Y+37	; 0x25
    15be:	9e a1       	ldd	r25, Y+38	; 0x26
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	3f ef       	ldi	r19, 0xFF	; 255
    15c4:	4f e7       	ldi	r20, 0x7F	; 127
    15c6:	57 e4       	ldi	r21, 0x47	; 71
    15c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15cc:	18 16       	cp	r1, r24
    15ce:	4c f5       	brge	.+82     	; 0x1622 <LCD_VidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d0:	6f a1       	ldd	r22, Y+39	; 0x27
    15d2:	78 a5       	ldd	r23, Y+40	; 0x28
    15d4:	89 a5       	ldd	r24, Y+41	; 0x29
    15d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e2       	ldi	r20, 0x20	; 32
    15de:	51 e4       	ldi	r21, 0x41	; 65
    15e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	bc 01       	movw	r22, r24
    15ea:	cd 01       	movw	r24, r26
    15ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9a a3       	std	Y+34, r25	; 0x22
    15f6:	89 a3       	std	Y+33, r24	; 0x21
    15f8:	0f c0       	rjmp	.+30     	; 0x1618 <LCD_VidInit+0x2ec>
    15fa:	88 ec       	ldi	r24, 0xC8	; 200
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	98 a3       	std	Y+32, r25	; 0x20
    1600:	8f 8f       	std	Y+31, r24	; 0x1f
    1602:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1604:	98 a1       	ldd	r25, Y+32	; 0x20
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <LCD_VidInit+0x2da>
    160a:	98 a3       	std	Y+32, r25	; 0x20
    160c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160e:	89 a1       	ldd	r24, Y+33	; 0x21
    1610:	9a a1       	ldd	r25, Y+34	; 0x22
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	9a a3       	std	Y+34, r25	; 0x22
    1616:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1618:	89 a1       	ldd	r24, Y+33	; 0x21
    161a:	9a a1       	ldd	r25, Y+34	; 0x22
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	69 f7       	brne	.-38     	; 0x15fa <LCD_VidInit+0x2ce>
    1620:	14 c0       	rjmp	.+40     	; 0x164a <LCD_VidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1622:	6b a1       	ldd	r22, Y+35	; 0x23
    1624:	7c a1       	ldd	r23, Y+36	; 0x24
    1626:	8d a1       	ldd	r24, Y+37	; 0x25
    1628:	9e a1       	ldd	r25, Y+38	; 0x26
    162a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	9a a3       	std	Y+34, r25	; 0x22
    1634:	89 a3       	std	Y+33, r24	; 0x21
    1636:	89 a1       	ldd	r24, Y+33	; 0x21
    1638:	9a a1       	ldd	r25, Y+34	; 0x22
    163a:	9e 8f       	std	Y+30, r25	; 0x1e
    163c:	8d 8f       	std	Y+29, r24	; 0x1d
    163e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1640:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <LCD_VidInit+0x316>
    1646:	9e 8f       	std	Y+30, r25	; 0x1e
    1648:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VidSendCommand(0b00000001);
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_VidSendCommand>
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	a0 e0       	ldi	r26, 0x00	; 0
    1656:	b0 e4       	ldi	r27, 0x40	; 64
    1658:	89 8f       	std	Y+25, r24	; 0x19
    165a:	9a 8f       	std	Y+26, r25	; 0x1a
    165c:	ab 8f       	std	Y+27, r26	; 0x1b
    165e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1660:	69 8d       	ldd	r22, Y+25	; 0x19
    1662:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1666:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	4a ef       	ldi	r20, 0xFA	; 250
    166e:	54 e4       	ldi	r21, 0x44	; 68
    1670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	8d 8b       	std	Y+21, r24	; 0x15
    167a:	9e 8b       	std	Y+22, r25	; 0x16
    167c:	af 8b       	std	Y+23, r26	; 0x17
    167e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1680:	6d 89       	ldd	r22, Y+21	; 0x15
    1682:	7e 89       	ldd	r23, Y+22	; 0x16
    1684:	8f 89       	ldd	r24, Y+23	; 0x17
    1686:	98 8d       	ldd	r25, Y+24	; 0x18
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e8       	ldi	r20, 0x80	; 128
    168e:	5f e3       	ldi	r21, 0x3F	; 63
    1690:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1694:	88 23       	and	r24, r24
    1696:	2c f4       	brge	.+10     	; 0x16a2 <LCD_VidInit+0x376>
		__ticks = 1;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	9c 8b       	std	Y+20, r25	; 0x14
    169e:	8b 8b       	std	Y+19, r24	; 0x13
    16a0:	3f c0       	rjmp	.+126    	; 0x1720 <LCD_VidInit+0x3f4>
	else if (__tmp > 65535)
    16a2:	6d 89       	ldd	r22, Y+21	; 0x15
    16a4:	7e 89       	ldd	r23, Y+22	; 0x16
    16a6:	8f 89       	ldd	r24, Y+23	; 0x17
    16a8:	98 8d       	ldd	r25, Y+24	; 0x18
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	3f ef       	ldi	r19, 0xFF	; 255
    16ae:	4f e7       	ldi	r20, 0x7F	; 127
    16b0:	57 e4       	ldi	r21, 0x47	; 71
    16b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16b6:	18 16       	cp	r1, r24
    16b8:	4c f5       	brge	.+82     	; 0x170c <LCD_VidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ba:	69 8d       	ldd	r22, Y+25	; 0x19
    16bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e2       	ldi	r20, 0x20	; 32
    16c8:	51 e4       	ldi	r21, 0x41	; 65
    16ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	bc 01       	movw	r22, r24
    16d4:	cd 01       	movw	r24, r26
    16d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	9c 8b       	std	Y+20, r25	; 0x14
    16e0:	8b 8b       	std	Y+19, r24	; 0x13
    16e2:	0f c0       	rjmp	.+30     	; 0x1702 <LCD_VidInit+0x3d6>
    16e4:	88 ec       	ldi	r24, 0xC8	; 200
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	9a 8b       	std	Y+18, r25	; 0x12
    16ea:	89 8b       	std	Y+17, r24	; 0x11
    16ec:	89 89       	ldd	r24, Y+17	; 0x11
    16ee:	9a 89       	ldd	r25, Y+18	; 0x12
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <LCD_VidInit+0x3c4>
    16f4:	9a 8b       	std	Y+18, r25	; 0x12
    16f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f8:	8b 89       	ldd	r24, Y+19	; 0x13
    16fa:	9c 89       	ldd	r25, Y+20	; 0x14
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	9c 8b       	std	Y+20, r25	; 0x14
    1700:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1702:	8b 89       	ldd	r24, Y+19	; 0x13
    1704:	9c 89       	ldd	r25, Y+20	; 0x14
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	69 f7       	brne	.-38     	; 0x16e4 <LCD_VidInit+0x3b8>
    170a:	14 c0       	rjmp	.+40     	; 0x1734 <LCD_VidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170c:	6d 89       	ldd	r22, Y+21	; 0x15
    170e:	7e 89       	ldd	r23, Y+22	; 0x16
    1710:	8f 89       	ldd	r24, Y+23	; 0x17
    1712:	98 8d       	ldd	r25, Y+24	; 0x18
    1714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	9c 8b       	std	Y+20, r25	; 0x14
    171e:	8b 8b       	std	Y+19, r24	; 0x13
    1720:	8b 89       	ldd	r24, Y+19	; 0x13
    1722:	9c 89       	ldd	r25, Y+20	; 0x14
    1724:	98 8b       	std	Y+16, r25	; 0x10
    1726:	8f 87       	std	Y+15, r24	; 0x0f
    1728:	8f 85       	ldd	r24, Y+15	; 0x0f
    172a:	98 89       	ldd	r25, Y+16	; 0x10
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	f1 f7       	brne	.-4      	; 0x172c <LCD_VidInit+0x400>
    1730:	98 8b       	std	Y+16, r25	; 0x10
    1732:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_VidSendCommand(0b00000110);
    1734:	86 e0       	ldi	r24, 0x06	; 6
    1736:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_VidSendCommand>
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	a0 e8       	ldi	r26, 0x80	; 128
    1740:	bf e3       	ldi	r27, 0x3F	; 63
    1742:	8b 87       	std	Y+11, r24	; 0x0b
    1744:	9c 87       	std	Y+12, r25	; 0x0c
    1746:	ad 87       	std	Y+13, r26	; 0x0d
    1748:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174a:	6b 85       	ldd	r22, Y+11	; 0x0b
    174c:	7c 85       	ldd	r23, Y+12	; 0x0c
    174e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1750:	9e 85       	ldd	r25, Y+14	; 0x0e
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	4a ef       	ldi	r20, 0xFA	; 250
    1758:	54 e4       	ldi	r21, 0x44	; 68
    175a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	8f 83       	std	Y+7, r24	; 0x07
    1764:	98 87       	std	Y+8, r25	; 0x08
    1766:	a9 87       	std	Y+9, r26	; 0x09
    1768:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    176a:	6f 81       	ldd	r22, Y+7	; 0x07
    176c:	78 85       	ldd	r23, Y+8	; 0x08
    176e:	89 85       	ldd	r24, Y+9	; 0x09
    1770:	9a 85       	ldd	r25, Y+10	; 0x0a
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e8       	ldi	r20, 0x80	; 128
    1778:	5f e3       	ldi	r21, 0x3F	; 63
    177a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    177e:	88 23       	and	r24, r24
    1780:	2c f4       	brge	.+10     	; 0x178c <LCD_VidInit+0x460>
		__ticks = 1;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	3f c0       	rjmp	.+126    	; 0x180a <LCD_VidInit+0x4de>
	else if (__tmp > 65535)
    178c:	6f 81       	ldd	r22, Y+7	; 0x07
    178e:	78 85       	ldd	r23, Y+8	; 0x08
    1790:	89 85       	ldd	r24, Y+9	; 0x09
    1792:	9a 85       	ldd	r25, Y+10	; 0x0a
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	3f ef       	ldi	r19, 0xFF	; 255
    1798:	4f e7       	ldi	r20, 0x7F	; 127
    179a:	57 e4       	ldi	r21, 0x47	; 71
    179c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a0:	18 16       	cp	r1, r24
    17a2:	4c f5       	brge	.+82     	; 0x17f6 <LCD_VidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e2       	ldi	r20, 0x20	; 32
    17b2:	51 e4       	ldi	r21, 0x41	; 65
    17b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	bc 01       	movw	r22, r24
    17be:	cd 01       	movw	r24, r26
    17c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	9e 83       	std	Y+6, r25	; 0x06
    17ca:	8d 83       	std	Y+5, r24	; 0x05
    17cc:	0f c0       	rjmp	.+30     	; 0x17ec <LCD_VidInit+0x4c0>
    17ce:	88 ec       	ldi	r24, 0xC8	; 200
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	9c 83       	std	Y+4, r25	; 0x04
    17d4:	8b 83       	std	Y+3, r24	; 0x03
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <LCD_VidInit+0x4ae>
    17de:	9c 83       	std	Y+4, r25	; 0x04
    17e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	9e 81       	ldd	r25, Y+6	; 0x06
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	9e 83       	std	Y+6, r25	; 0x06
    17ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ec:	8d 81       	ldd	r24, Y+5	; 0x05
    17ee:	9e 81       	ldd	r25, Y+6	; 0x06
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	69 f7       	brne	.-38     	; 0x17ce <LCD_VidInit+0x4a2>
    17f4:	14 c0       	rjmp	.+40     	; 0x181e <LCD_VidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f6:	6f 81       	ldd	r22, Y+7	; 0x07
    17f8:	78 85       	ldd	r23, Y+8	; 0x08
    17fa:	89 85       	ldd	r24, Y+9	; 0x09
    17fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	9a 83       	std	Y+2, r25	; 0x02
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	9a 81       	ldd	r25, Y+2	; 0x02
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	f1 f7       	brne	.-4      	; 0x1816 <LCD_VidInit+0x4ea>
    181a:	9a 83       	std	Y+2, r25	; 0x02
    181c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_VidSendCommand(0x01);	/* Clear display screen */
	_delay_ms(2);

	#endif
}
    181e:	ca 5b       	subi	r28, 0xBA	; 186
    1820:	df 4f       	sbci	r29, 0xFF	; 255
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	08 95       	ret

00001836 <LCD_VidSendData>:

void LCD_VidSendData(u8 copy_u8data)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	e9 97       	sbiw	r28, 0x39	; 57
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
    184a:	89 af       	std	Y+57, r24	; 0x39
	#if LCD_Mode==EIGHT_BIT
		DIO_VidSetPinValue(Lcopy_u8PORT,  RS_copy_u8Pin,1);
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	41 e0       	ldi	r20, 0x01	; 1
    1852:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(Lcopy_u8PORT,  R_w_copy_u8Pin,0);
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a0 e8       	ldi	r26, 0x80	; 128
    1866:	bf e3       	ldi	r27, 0x3F	; 63
    1868:	8d ab       	std	Y+53, r24	; 0x35
    186a:	9e ab       	std	Y+54, r25	; 0x36
    186c:	af ab       	std	Y+55, r26	; 0x37
    186e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1870:	6d a9       	ldd	r22, Y+53	; 0x35
    1872:	7e a9       	ldd	r23, Y+54	; 0x36
    1874:	8f a9       	ldd	r24, Y+55	; 0x37
    1876:	98 ad       	ldd	r25, Y+56	; 0x38
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	4a ef       	ldi	r20, 0xFA	; 250
    187e:	54 e4       	ldi	r21, 0x44	; 68
    1880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	89 ab       	std	Y+49, r24	; 0x31
    188a:	9a ab       	std	Y+50, r25	; 0x32
    188c:	ab ab       	std	Y+51, r26	; 0x33
    188e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1890:	69 a9       	ldd	r22, Y+49	; 0x31
    1892:	7a a9       	ldd	r23, Y+50	; 0x32
    1894:	8b a9       	ldd	r24, Y+51	; 0x33
    1896:	9c a9       	ldd	r25, Y+52	; 0x34
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e8       	ldi	r20, 0x80	; 128
    189e:	5f e3       	ldi	r21, 0x3F	; 63
    18a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a4:	88 23       	and	r24, r24
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <LCD_VidSendData+0x7c>
		__ticks = 1;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	98 ab       	std	Y+48, r25	; 0x30
    18ae:	8f a7       	std	Y+47, r24	; 0x2f
    18b0:	3f c0       	rjmp	.+126    	; 0x1930 <LCD_VidSendData+0xfa>
	else if (__tmp > 65535)
    18b2:	69 a9       	ldd	r22, Y+49	; 0x31
    18b4:	7a a9       	ldd	r23, Y+50	; 0x32
    18b6:	8b a9       	ldd	r24, Y+51	; 0x33
    18b8:	9c a9       	ldd	r25, Y+52	; 0x34
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	3f ef       	ldi	r19, 0xFF	; 255
    18be:	4f e7       	ldi	r20, 0x7F	; 127
    18c0:	57 e4       	ldi	r21, 0x47	; 71
    18c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c6:	18 16       	cp	r1, r24
    18c8:	4c f5       	brge	.+82     	; 0x191c <LCD_VidSendData+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ca:	6d a9       	ldd	r22, Y+53	; 0x35
    18cc:	7e a9       	ldd	r23, Y+54	; 0x36
    18ce:	8f a9       	ldd	r24, Y+55	; 0x37
    18d0:	98 ad       	ldd	r25, Y+56	; 0x38
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e2       	ldi	r20, 0x20	; 32
    18d8:	51 e4       	ldi	r21, 0x41	; 65
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	98 ab       	std	Y+48, r25	; 0x30
    18f0:	8f a7       	std	Y+47, r24	; 0x2f
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <LCD_VidSendData+0xdc>
    18f4:	88 ec       	ldi	r24, 0xC8	; 200
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9e a7       	std	Y+46, r25	; 0x2e
    18fa:	8d a7       	std	Y+45, r24	; 0x2d
    18fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    18fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <LCD_VidSendData+0xca>
    1904:	9e a7       	std	Y+46, r25	; 0x2e
    1906:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1908:	8f a5       	ldd	r24, Y+47	; 0x2f
    190a:	98 a9       	ldd	r25, Y+48	; 0x30
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	98 ab       	std	Y+48, r25	; 0x30
    1910:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1912:	8f a5       	ldd	r24, Y+47	; 0x2f
    1914:	98 a9       	ldd	r25, Y+48	; 0x30
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	69 f7       	brne	.-38     	; 0x18f4 <LCD_VidSendData+0xbe>
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <LCD_VidSendData+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191c:	69 a9       	ldd	r22, Y+49	; 0x31
    191e:	7a a9       	ldd	r23, Y+50	; 0x32
    1920:	8b a9       	ldd	r24, Y+51	; 0x33
    1922:	9c a9       	ldd	r25, Y+52	; 0x34
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	98 ab       	std	Y+48, r25	; 0x30
    192e:	8f a7       	std	Y+47, r24	; 0x2f
    1930:	8f a5       	ldd	r24, Y+47	; 0x2f
    1932:	98 a9       	ldd	r25, Y+48	; 0x30
    1934:	9c a7       	std	Y+44, r25	; 0x2c
    1936:	8b a7       	std	Y+43, r24	; 0x2b
    1938:	8b a5       	ldd	r24, Y+43	; 0x2b
    193a:	9c a5       	ldd	r25, Y+44	; 0x2c
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <LCD_VidSendData+0x106>
    1940:	9c a7       	std	Y+44, r25	; 0x2c
    1942:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		DIO_VidSetPortValue(LDcopy_u8PORT,copy_u8data);
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	69 ad       	ldd	r22, Y+57	; 0x39
    1948:	0e 94 96 08 	call	0x112c	; 0x112c <DIO_VidSetPortValue>
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a0 e8       	ldi	r26, 0x80	; 128
    1952:	bf e3       	ldi	r27, 0x3F	; 63
    1954:	8f a3       	std	Y+39, r24	; 0x27
    1956:	98 a7       	std	Y+40, r25	; 0x28
    1958:	a9 a7       	std	Y+41, r26	; 0x29
    195a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195c:	6f a1       	ldd	r22, Y+39	; 0x27
    195e:	78 a5       	ldd	r23, Y+40	; 0x28
    1960:	89 a5       	ldd	r24, Y+41	; 0x29
    1962:	9a a5       	ldd	r25, Y+42	; 0x2a
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	4a ef       	ldi	r20, 0xFA	; 250
    196a:	54 e4       	ldi	r21, 0x44	; 68
    196c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	8b a3       	std	Y+35, r24	; 0x23
    1976:	9c a3       	std	Y+36, r25	; 0x24
    1978:	ad a3       	std	Y+37, r26	; 0x25
    197a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    197c:	6b a1       	ldd	r22, Y+35	; 0x23
    197e:	7c a1       	ldd	r23, Y+36	; 0x24
    1980:	8d a1       	ldd	r24, Y+37	; 0x25
    1982:	9e a1       	ldd	r25, Y+38	; 0x26
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e8       	ldi	r20, 0x80	; 128
    198a:	5f e3       	ldi	r21, 0x3F	; 63
    198c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1990:	88 23       	and	r24, r24
    1992:	2c f4       	brge	.+10     	; 0x199e <LCD_VidSendData+0x168>
		__ticks = 1;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9a a3       	std	Y+34, r25	; 0x22
    199a:	89 a3       	std	Y+33, r24	; 0x21
    199c:	3f c0       	rjmp	.+126    	; 0x1a1c <LCD_VidSendData+0x1e6>
	else if (__tmp > 65535)
    199e:	6b a1       	ldd	r22, Y+35	; 0x23
    19a0:	7c a1       	ldd	r23, Y+36	; 0x24
    19a2:	8d a1       	ldd	r24, Y+37	; 0x25
    19a4:	9e a1       	ldd	r25, Y+38	; 0x26
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	3f ef       	ldi	r19, 0xFF	; 255
    19aa:	4f e7       	ldi	r20, 0x7F	; 127
    19ac:	57 e4       	ldi	r21, 0x47	; 71
    19ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b2:	18 16       	cp	r1, r24
    19b4:	4c f5       	brge	.+82     	; 0x1a08 <LCD_VidSendData+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b6:	6f a1       	ldd	r22, Y+39	; 0x27
    19b8:	78 a5       	ldd	r23, Y+40	; 0x28
    19ba:	89 a5       	ldd	r24, Y+41	; 0x29
    19bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e2       	ldi	r20, 0x20	; 32
    19c4:	51 e4       	ldi	r21, 0x41	; 65
    19c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	bc 01       	movw	r22, r24
    19d0:	cd 01       	movw	r24, r26
    19d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	9a a3       	std	Y+34, r25	; 0x22
    19dc:	89 a3       	std	Y+33, r24	; 0x21
    19de:	0f c0       	rjmp	.+30     	; 0x19fe <LCD_VidSendData+0x1c8>
    19e0:	88 ec       	ldi	r24, 0xC8	; 200
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	98 a3       	std	Y+32, r25	; 0x20
    19e6:	8f 8f       	std	Y+31, r24	; 0x1f
    19e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19ea:	98 a1       	ldd	r25, Y+32	; 0x20
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <LCD_VidSendData+0x1b6>
    19f0:	98 a3       	std	Y+32, r25	; 0x20
    19f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f4:	89 a1       	ldd	r24, Y+33	; 0x21
    19f6:	9a a1       	ldd	r25, Y+34	; 0x22
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	9a a3       	std	Y+34, r25	; 0x22
    19fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1a00:	9a a1       	ldd	r25, Y+34	; 0x22
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	69 f7       	brne	.-38     	; 0x19e0 <LCD_VidSendData+0x1aa>
    1a06:	14 c0       	rjmp	.+40     	; 0x1a30 <LCD_VidSendData+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a08:	6b a1       	ldd	r22, Y+35	; 0x23
    1a0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	9a a3       	std	Y+34, r25	; 0x22
    1a1a:	89 a3       	std	Y+33, r24	; 0x21
    1a1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a20:	9e 8f       	std	Y+30, r25	; 0x1e
    1a22:	8d 8f       	std	Y+29, r24	; 0x1d
    1a24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <LCD_VidSendData+0x1f2>
    1a2c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a2e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,1);  // E=1; Upload Command
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	62 e0       	ldi	r22, 0x02	; 2
    1a34:	41 e0       	ldi	r20, 0x01	; 1
    1a36:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a0 e8       	ldi	r26, 0x80	; 128
    1a40:	bf e3       	ldi	r27, 0x3F	; 63
    1a42:	89 8f       	std	Y+25, r24	; 0x19
    1a44:	9a 8f       	std	Y+26, r25	; 0x1a
    1a46:	ab 8f       	std	Y+27, r26	; 0x1b
    1a48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	4a ef       	ldi	r20, 0xFA	; 250
    1a58:	54 e4       	ldi	r21, 0x44	; 68
    1a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	8d 8b       	std	Y+21, r24	; 0x15
    1a64:	9e 8b       	std	Y+22, r25	; 0x16
    1a66:	af 8b       	std	Y+23, r26	; 0x17
    1a68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a70:	98 8d       	ldd	r25, Y+24	; 0x18
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e8       	ldi	r20, 0x80	; 128
    1a78:	5f e3       	ldi	r21, 0x3F	; 63
    1a7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	2c f4       	brge	.+10     	; 0x1a8c <LCD_VidSendData+0x256>
		__ticks = 1;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9c 8b       	std	Y+20, r25	; 0x14
    1a88:	8b 8b       	std	Y+19, r24	; 0x13
    1a8a:	3f c0       	rjmp	.+126    	; 0x1b0a <LCD_VidSendData+0x2d4>
	else if (__tmp > 65535)
    1a8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a90:	8f 89       	ldd	r24, Y+23	; 0x17
    1a92:	98 8d       	ldd	r25, Y+24	; 0x18
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	3f ef       	ldi	r19, 0xFF	; 255
    1a98:	4f e7       	ldi	r20, 0x7F	; 127
    1a9a:	57 e4       	ldi	r21, 0x47	; 71
    1a9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa0:	18 16       	cp	r1, r24
    1aa2:	4c f5       	brge	.+82     	; 0x1af6 <LCD_VidSendData+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa4:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e2       	ldi	r20, 0x20	; 32
    1ab2:	51 e4       	ldi	r21, 0x41	; 65
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	bc 01       	movw	r22, r24
    1abe:	cd 01       	movw	r24, r26
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9c 8b       	std	Y+20, r25	; 0x14
    1aca:	8b 8b       	std	Y+19, r24	; 0x13
    1acc:	0f c0       	rjmp	.+30     	; 0x1aec <LCD_VidSendData+0x2b6>
    1ace:	88 ec       	ldi	r24, 0xC8	; 200
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9a 8b       	std	Y+18, r25	; 0x12
    1ad4:	89 8b       	std	Y+17, r24	; 0x11
    1ad6:	89 89       	ldd	r24, Y+17	; 0x11
    1ad8:	9a 89       	ldd	r25, Y+18	; 0x12
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <LCD_VidSendData+0x2a4>
    1ade:	9a 8b       	std	Y+18, r25	; 0x12
    1ae0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	9c 8b       	std	Y+20, r25	; 0x14
    1aea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aec:	8b 89       	ldd	r24, Y+19	; 0x13
    1aee:	9c 89       	ldd	r25, Y+20	; 0x14
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	69 f7       	brne	.-38     	; 0x1ace <LCD_VidSendData+0x298>
    1af4:	14 c0       	rjmp	.+40     	; 0x1b1e <LCD_VidSendData+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af6:	6d 89       	ldd	r22, Y+21	; 0x15
    1af8:	7e 89       	ldd	r23, Y+22	; 0x16
    1afa:	8f 89       	ldd	r24, Y+23	; 0x17
    1afc:	98 8d       	ldd	r25, Y+24	; 0x18
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9c 8b       	std	Y+20, r25	; 0x14
    1b08:	8b 8b       	std	Y+19, r24	; 0x13
    1b0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0e:	98 8b       	std	Y+16, r25	; 0x10
    1b10:	8f 87       	std	Y+15, r24	; 0x0f
    1b12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b14:	98 89       	ldd	r25, Y+16	; 0x10
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LCD_VidSendData+0x2e0>
    1b1a:	98 8b       	std	Y+16, r25	; 0x10
    1b1c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);   // E=0 Display Command
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	62 e0       	ldi	r22, 0x02	; 2
    1b22:	40 e0       	ldi	r20, 0x00	; 0
    1b24:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	a0 e8       	ldi	r26, 0x80	; 128
    1b2e:	bf e3       	ldi	r27, 0x3F	; 63
    1b30:	8b 87       	std	Y+11, r24	; 0x0b
    1b32:	9c 87       	std	Y+12, r25	; 0x0c
    1b34:	ad 87       	std	Y+13, r26	; 0x0d
    1b36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	4a ef       	ldi	r20, 0xFA	; 250
    1b46:	54 e4       	ldi	r21, 0x44	; 68
    1b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	8f 83       	std	Y+7, r24	; 0x07
    1b52:	98 87       	std	Y+8, r25	; 0x08
    1b54:	a9 87       	std	Y+9, r26	; 0x09
    1b56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b58:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5a:	78 85       	ldd	r23, Y+8	; 0x08
    1b5c:	89 85       	ldd	r24, Y+9	; 0x09
    1b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e8       	ldi	r20, 0x80	; 128
    1b66:	5f e3       	ldi	r21, 0x3F	; 63
    1b68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b6c:	88 23       	and	r24, r24
    1b6e:	2c f4       	brge	.+10     	; 0x1b7a <LCD_VidSendData+0x344>
		__ticks = 1;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	9e 83       	std	Y+6, r25	; 0x06
    1b76:	8d 83       	std	Y+5, r24	; 0x05
    1b78:	3f c0       	rjmp	.+126    	; 0x1bf8 <LCD_VidSendData+0x3c2>
	else if (__tmp > 65535)
    1b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7c:	78 85       	ldd	r23, Y+8	; 0x08
    1b7e:	89 85       	ldd	r24, Y+9	; 0x09
    1b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	3f ef       	ldi	r19, 0xFF	; 255
    1b86:	4f e7       	ldi	r20, 0x7F	; 127
    1b88:	57 e4       	ldi	r21, 0x47	; 71
    1b8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	4c f5       	brge	.+82     	; 0x1be4 <LCD_VidSendData+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e2       	ldi	r20, 0x20	; 32
    1ba0:	51 e4       	ldi	r21, 0x41	; 65
    1ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	bc 01       	movw	r22, r24
    1bac:	cd 01       	movw	r24, r26
    1bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9e 83       	std	Y+6, r25	; 0x06
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	0f c0       	rjmp	.+30     	; 0x1bda <LCD_VidSendData+0x3a4>
    1bbc:	88 ec       	ldi	r24, 0xC8	; 200
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9c 83       	std	Y+4, r25	; 0x04
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <LCD_VidSendData+0x392>
    1bcc:	9c 83       	std	Y+4, r25	; 0x04
    1bce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	9e 83       	std	Y+6, r25	; 0x06
    1bd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bda:	8d 81       	ldd	r24, Y+5	; 0x05
    1bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	69 f7       	brne	.-38     	; 0x1bbc <LCD_VidSendData+0x386>
    1be2:	14 c0       	rjmp	.+40     	; 0x1c0c <LCD_VidSendData+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be4:	6f 81       	ldd	r22, Y+7	; 0x07
    1be6:	78 85       	ldd	r23, Y+8	; 0x08
    1be8:	89 85       	ldd	r24, Y+9	; 0x09
    1bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9e 83       	std	Y+6, r25	; 0x06
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
    1bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfc:	9a 83       	std	Y+2, r25	; 0x02
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <LCD_VidSendData+0x3ce>
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);   // E=0 Display Command
		_delay_ms(2);

	#endif
}
    1c0c:	e9 96       	adiw	r28, 0x39	; 57
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <LCD_VidSendCommand>:

void LCD_VidSendCommand(u8 copy_u8command)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	6d 97       	sbiw	r28, 0x1d	; 29
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	8d 8f       	std	Y+29, r24	; 0x1d
	#if LCD_Mode==EIGHT_BIT
	DIO_VidSetPinValue(Lcopy_u8PORT,  RS_copy_u8Pin,0);
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	40 e0       	ldi	r20, 0x00	; 0
    1c3a:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(Lcopy_u8PORT,  R_w_copy_u8Pin,0);
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	61 e0       	ldi	r22, 0x01	; 1
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
	
	
	DIO_VidSetPortValue(LDcopy_u8PORT,copy_u8command);
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c4c:	0e 94 96 08 	call	0x112c	; 0x112c <DIO_VidSetPortValue>
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,1);  // E=1; Upload Command
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	62 e0       	ldi	r22, 0x02	; 2
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a0 e8       	ldi	r26, 0x80	; 128
    1c60:	bf e3       	ldi	r27, 0x3F	; 63
    1c62:	89 8f       	std	Y+25, r24	; 0x19
    1c64:	9a 8f       	std	Y+26, r25	; 0x1a
    1c66:	ab 8f       	std	Y+27, r26	; 0x1b
    1c68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	4a ef       	ldi	r20, 0xFA	; 250
    1c78:	54 e4       	ldi	r21, 0x44	; 68
    1c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	8d 8b       	std	Y+21, r24	; 0x15
    1c84:	9e 8b       	std	Y+22, r25	; 0x16
    1c86:	af 8b       	std	Y+23, r26	; 0x17
    1c88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c90:	98 8d       	ldd	r25, Y+24	; 0x18
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e8       	ldi	r20, 0x80	; 128
    1c98:	5f e3       	ldi	r21, 0x3F	; 63
    1c9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c9e:	88 23       	and	r24, r24
    1ca0:	2c f4       	brge	.+10     	; 0x1cac <LCD_VidSendCommand+0x8e>
		__ticks = 1;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	9c 8b       	std	Y+20, r25	; 0x14
    1ca8:	8b 8b       	std	Y+19, r24	; 0x13
    1caa:	3f c0       	rjmp	.+126    	; 0x1d2a <LCD_VidSendCommand+0x10c>
	else if (__tmp > 65535)
    1cac:	6d 89       	ldd	r22, Y+21	; 0x15
    1cae:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	3f ef       	ldi	r19, 0xFF	; 255
    1cb8:	4f e7       	ldi	r20, 0x7F	; 127
    1cba:	57 e4       	ldi	r21, 0x47	; 71
    1cbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cc0:	18 16       	cp	r1, r24
    1cc2:	4c f5       	brge	.+82     	; 0x1d16 <LCD_VidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc4:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e2       	ldi	r20, 0x20	; 32
    1cd2:	51 e4       	ldi	r21, 0x41	; 65
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	bc 01       	movw	r22, r24
    1cde:	cd 01       	movw	r24, r26
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	9c 8b       	std	Y+20, r25	; 0x14
    1cea:	8b 8b       	std	Y+19, r24	; 0x13
    1cec:	0f c0       	rjmp	.+30     	; 0x1d0c <LCD_VidSendCommand+0xee>
    1cee:	88 ec       	ldi	r24, 0xC8	; 200
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	9a 8b       	std	Y+18, r25	; 0x12
    1cf4:	89 8b       	std	Y+17, r24	; 0x11
    1cf6:	89 89       	ldd	r24, Y+17	; 0x11
    1cf8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <LCD_VidSendCommand+0xdc>
    1cfe:	9a 8b       	std	Y+18, r25	; 0x12
    1d00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d02:	8b 89       	ldd	r24, Y+19	; 0x13
    1d04:	9c 89       	ldd	r25, Y+20	; 0x14
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	9c 8b       	std	Y+20, r25	; 0x14
    1d0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	69 f7       	brne	.-38     	; 0x1cee <LCD_VidSendCommand+0xd0>
    1d14:	14 c0       	rjmp	.+40     	; 0x1d3e <LCD_VidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d16:	6d 89       	ldd	r22, Y+21	; 0x15
    1d18:	7e 89       	ldd	r23, Y+22	; 0x16
    1d1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	9c 8b       	std	Y+20, r25	; 0x14
    1d28:	8b 8b       	std	Y+19, r24	; 0x13
    1d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2e:	98 8b       	std	Y+16, r25	; 0x10
    1d30:	8f 87       	std	Y+15, r24	; 0x0f
    1d32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d34:	98 89       	ldd	r25, Y+16	; 0x10
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <LCD_VidSendCommand+0x118>
    1d3a:	98 8b       	std	Y+16, r25	; 0x10
    1d3c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);   // E=0 Display Command
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	62 e0       	ldi	r22, 0x02	; 2
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
	if (copy_u8command==1)
    1d48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <LCD_VidSendCommand+0x132>
    1d4e:	72 c0       	rjmp	.+228    	; 0x1e34 <LCD_VidSendCommand+0x216>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	a0 e0       	ldi	r26, 0x00	; 0
    1d56:	b0 e4       	ldi	r27, 0x40	; 64
    1d58:	8b 87       	std	Y+11, r24	; 0x0b
    1d5a:	9c 87       	std	Y+12, r25	; 0x0c
    1d5c:	ad 87       	std	Y+13, r26	; 0x0d
    1d5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	4a ef       	ldi	r20, 0xFA	; 250
    1d6e:	54 e4       	ldi	r21, 0x44	; 68
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	8f 83       	std	Y+7, r24	; 0x07
    1d7a:	98 87       	std	Y+8, r25	; 0x08
    1d7c:	a9 87       	std	Y+9, r26	; 0x09
    1d7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d80:	6f 81       	ldd	r22, Y+7	; 0x07
    1d82:	78 85       	ldd	r23, Y+8	; 0x08
    1d84:	89 85       	ldd	r24, Y+9	; 0x09
    1d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e8       	ldi	r20, 0x80	; 128
    1d8e:	5f e3       	ldi	r21, 0x3F	; 63
    1d90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d94:	88 23       	and	r24, r24
    1d96:	2c f4       	brge	.+10     	; 0x1da2 <LCD_VidSendCommand+0x184>
		__ticks = 1;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
    1da0:	3f c0       	rjmp	.+126    	; 0x1e20 <LCD_VidSendCommand+0x202>
	else if (__tmp > 65535)
    1da2:	6f 81       	ldd	r22, Y+7	; 0x07
    1da4:	78 85       	ldd	r23, Y+8	; 0x08
    1da6:	89 85       	ldd	r24, Y+9	; 0x09
    1da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	3f ef       	ldi	r19, 0xFF	; 255
    1dae:	4f e7       	ldi	r20, 0x7F	; 127
    1db0:	57 e4       	ldi	r21, 0x47	; 71
    1db2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db6:	18 16       	cp	r1, r24
    1db8:	4c f5       	brge	.+82     	; 0x1e0c <LCD_VidSendCommand+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e2       	ldi	r20, 0x20	; 32
    1dc8:	51 e4       	ldi	r21, 0x41	; 65
    1dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	bc 01       	movw	r22, r24
    1dd4:	cd 01       	movw	r24, r26
    1dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	9e 83       	std	Y+6, r25	; 0x06
    1de0:	8d 83       	std	Y+5, r24	; 0x05
    1de2:	0f c0       	rjmp	.+30     	; 0x1e02 <LCD_VidSendCommand+0x1e4>
    1de4:	88 ec       	ldi	r24, 0xC8	; 200
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	9c 83       	std	Y+4, r25	; 0x04
    1dea:	8b 83       	std	Y+3, r24	; 0x03
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	9c 81       	ldd	r25, Y+4	; 0x04
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <LCD_VidSendCommand+0x1d2>
    1df4:	9c 83       	std	Y+4, r25	; 0x04
    1df6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	9e 83       	std	Y+6, r25	; 0x06
    1e00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e02:	8d 81       	ldd	r24, Y+5	; 0x05
    1e04:	9e 81       	ldd	r25, Y+6	; 0x06
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	69 f7       	brne	.-38     	; 0x1de4 <LCD_VidSendCommand+0x1c6>
    1e0a:	14 c0       	rjmp	.+40     	; 0x1e34 <LCD_VidSendCommand+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0e:	78 85       	ldd	r23, Y+8	; 0x08
    1e10:	89 85       	ldd	r24, Y+9	; 0x09
    1e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9e 83       	std	Y+6, r25	; 0x06
    1e1e:	8d 83       	std	Y+5, r24	; 0x05
    1e20:	8d 81       	ldd	r24, Y+5	; 0x05
    1e22:	9e 81       	ldd	r25, Y+6	; 0x06
    1e24:	9a 83       	std	Y+2, r25	; 0x02
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <LCD_VidSendCommand+0x20e>
    1e30:	9a 83       	std	Y+2, r25	; 0x02
    1e32:	89 83       	std	Y+1, r24	; 0x01
	DIO_VidSetPinValue(Lcopy_u8PORT,  E_copy_u8Pin,0);
	_delay_ms(2);

	_delay_ms(5);
	#endif
}
    1e34:	6d 96       	adiw	r28, 0x1d	; 29
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <LCD_VidSendString>:

void LCD_VidSendString( u8 *copy_u8string)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <LCD_VidSendString+0x6>
    1e4c:	0f 92       	push	r0
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	9b 83       	std	Y+3, r25	; 0x03
    1e54:	8a 83       	std	Y+2, r24	; 0x02

	u8 i=0;
    1e56:	19 82       	std	Y+1, r1	; 0x01
    1e58:	0e c0       	rjmp	.+28     	; 0x1e76 <LCD_VidSendString+0x30>

	while(copy_u8string[i] != '\0')
	{

		LCD_VidSendData(copy_u8string[i]);
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	9b 81       	ldd	r25, Y+3	; 0x03
    1e64:	fc 01       	movw	r30, r24
    1e66:	e2 0f       	add	r30, r18
    1e68:	f3 1f       	adc	r31, r19
    1e6a:	80 81       	ld	r24, Z
    1e6c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_VidSendData>
		i++;
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	8f 5f       	subi	r24, 0xFF	; 255
    1e74:	89 83       	std	Y+1, r24	; 0x01
void LCD_VidSendString( u8 *copy_u8string)
{

	u8 i=0;

	while(copy_u8string[i] != '\0')
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	28 2f       	mov	r18, r24
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e80:	fc 01       	movw	r30, r24
    1e82:	e2 0f       	add	r30, r18
    1e84:	f3 1f       	adc	r31, r19
    1e86:	80 81       	ld	r24, Z
    1e88:	88 23       	and	r24, r24
    1e8a:	39 f7       	brne	.-50     	; 0x1e5a <LCD_VidSendString+0x14>
		LCD_VidSendData(copy_u8string[i]);
		i++;
	}


}
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <LCD_VidSendNumber>:

 void LCD_VidSendNumber( u8 copy_u16number)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	29 97       	sbiw	r28, 0x09	; 9
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	8f 83       	std	Y+7, r24	; 0x07

	if (copy_u16number==0)
    1eae:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb0:	88 23       	and	r24, r24
    1eb2:	19 f4       	brne	.+6      	; 0x1eba <LCD_VidSendNumber+0x22>
	{
		LCD_VidSendData('0');
    1eb4:	80 e3       	ldi	r24, 0x30	; 48
    1eb6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_VidSendData>
	}
	s8 i=0;
    1eba:	19 82       	std	Y+1, r1	; 0x01
    1ebc:	1b c0       	rjmp	.+54     	; 0x1ef4 <LCD_VidSendNumber+0x5c>
	u8 str_num[5];
	while(copy_u16number>0)
	{
		str_num[i]=copy_u16number%10;
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	48 2f       	mov	r20, r24
    1ec2:	55 27       	eor	r21, r21
    1ec4:	47 fd       	sbrc	r20, 7
    1ec6:	50 95       	com	r21
    1ec8:	8f 81       	ldd	r24, Y+7	; 0x07
    1eca:	9a e0       	ldi	r25, 0x0A	; 10
    1ecc:	69 2f       	mov	r22, r25
    1ece:	0e 94 be 23 	call	0x477c	; 0x477c <__udivmodqi4>
    1ed2:	89 2f       	mov	r24, r25
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	02 96       	adiw	r24, 0x02	; 2
    1eda:	fc 01       	movw	r30, r24
    1edc:	e4 0f       	add	r30, r20
    1ede:	f5 1f       	adc	r31, r21
    1ee0:	20 83       	st	Z, r18
		copy_u16number/=10;
    1ee2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee4:	9a e0       	ldi	r25, 0x0A	; 10
    1ee6:	69 2f       	mov	r22, r25
    1ee8:	0e 94 be 23 	call	0x477c	; 0x477c <__udivmodqi4>
    1eec:	8f 83       	std	Y+7, r24	; 0x07
		i++;
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	8f 5f       	subi	r24, 0xFF	; 255
    1ef2:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_VidSendData('0');
	}
	s8 i=0;
	u8 str_num[5];
	while(copy_u16number>0)
    1ef4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef6:	88 23       	and	r24, r24
    1ef8:	11 f7       	brne	.-60     	; 0x1ebe <LCD_VidSendNumber+0x26>
	{
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	81 50       	subi	r24, 0x01	; 1
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	7e c0       	rjmp	.+252    	; 0x1ffe <LCD_VidSendNumber+0x166>
	while(i>=0)
	{
		switch(str_num[i])
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	28 2f       	mov	r18, r24
    1f06:	33 27       	eor	r19, r19
    1f08:	27 fd       	sbrc	r18, 7
    1f0a:	30 95       	com	r19
    1f0c:	ce 01       	movw	r24, r28
    1f0e:	02 96       	adiw	r24, 0x02	; 2
    1f10:	fc 01       	movw	r30, r24
    1f12:	e2 0f       	add	r30, r18
    1f14:	f3 1f       	adc	r31, r19
    1f16:	80 81       	ld	r24, Z
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	39 87       	std	Y+9, r19	; 0x09
    1f1e:	28 87       	std	Y+8, r18	; 0x08
    1f20:	88 85       	ldd	r24, Y+8	; 0x08
    1f22:	99 85       	ldd	r25, Y+9	; 0x09
    1f24:	84 30       	cpi	r24, 0x04	; 4
    1f26:	91 05       	cpc	r25, r1
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <LCD_VidSendNumber+0x94>
    1f2a:	4f c0       	rjmp	.+158    	; 0x1fca <LCD_VidSendNumber+0x132>
    1f2c:	28 85       	ldd	r18, Y+8	; 0x08
    1f2e:	39 85       	ldd	r19, Y+9	; 0x09
    1f30:	25 30       	cpi	r18, 0x05	; 5
    1f32:	31 05       	cpc	r19, r1
    1f34:	d4 f4       	brge	.+52     	; 0x1f6a <LCD_VidSendNumber+0xd2>
    1f36:	88 85       	ldd	r24, Y+8	; 0x08
    1f38:	99 85       	ldd	r25, Y+9	; 0x09
    1f3a:	81 30       	cpi	r24, 0x01	; 1
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	c9 f1       	breq	.+114    	; 0x1fb2 <LCD_VidSendNumber+0x11a>
    1f40:	28 85       	ldd	r18, Y+8	; 0x08
    1f42:	39 85       	ldd	r19, Y+9	; 0x09
    1f44:	22 30       	cpi	r18, 0x02	; 2
    1f46:	31 05       	cpc	r19, r1
    1f48:	2c f4       	brge	.+10     	; 0x1f54 <LCD_VidSendNumber+0xbc>
    1f4a:	88 85       	ldd	r24, Y+8	; 0x08
    1f4c:	99 85       	ldd	r25, Y+9	; 0x09
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	61 f1       	breq	.+88     	; 0x1faa <LCD_VidSendNumber+0x112>
    1f52:	52 c0       	rjmp	.+164    	; 0x1ff8 <LCD_VidSendNumber+0x160>
    1f54:	28 85       	ldd	r18, Y+8	; 0x08
    1f56:	39 85       	ldd	r19, Y+9	; 0x09
    1f58:	22 30       	cpi	r18, 0x02	; 2
    1f5a:	31 05       	cpc	r19, r1
    1f5c:	71 f1       	breq	.+92     	; 0x1fba <LCD_VidSendNumber+0x122>
    1f5e:	88 85       	ldd	r24, Y+8	; 0x08
    1f60:	99 85       	ldd	r25, Y+9	; 0x09
    1f62:	83 30       	cpi	r24, 0x03	; 3
    1f64:	91 05       	cpc	r25, r1
    1f66:	69 f1       	breq	.+90     	; 0x1fc2 <LCD_VidSendNumber+0x12a>
    1f68:	47 c0       	rjmp	.+142    	; 0x1ff8 <LCD_VidSendNumber+0x160>
    1f6a:	28 85       	ldd	r18, Y+8	; 0x08
    1f6c:	39 85       	ldd	r19, Y+9	; 0x09
    1f6e:	27 30       	cpi	r18, 0x07	; 7
    1f70:	31 05       	cpc	r19, r1
    1f72:	b9 f1       	breq	.+110    	; 0x1fe2 <LCD_VidSendNumber+0x14a>
    1f74:	88 85       	ldd	r24, Y+8	; 0x08
    1f76:	99 85       	ldd	r25, Y+9	; 0x09
    1f78:	88 30       	cpi	r24, 0x08	; 8
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	5c f4       	brge	.+22     	; 0x1f94 <LCD_VidSendNumber+0xfc>
    1f7e:	28 85       	ldd	r18, Y+8	; 0x08
    1f80:	39 85       	ldd	r19, Y+9	; 0x09
    1f82:	25 30       	cpi	r18, 0x05	; 5
    1f84:	31 05       	cpc	r19, r1
    1f86:	29 f1       	breq	.+74     	; 0x1fd2 <LCD_VidSendNumber+0x13a>
    1f88:	88 85       	ldd	r24, Y+8	; 0x08
    1f8a:	99 85       	ldd	r25, Y+9	; 0x09
    1f8c:	86 30       	cpi	r24, 0x06	; 6
    1f8e:	91 05       	cpc	r25, r1
    1f90:	21 f1       	breq	.+72     	; 0x1fda <LCD_VidSendNumber+0x142>
    1f92:	32 c0       	rjmp	.+100    	; 0x1ff8 <LCD_VidSendNumber+0x160>
    1f94:	28 85       	ldd	r18, Y+8	; 0x08
    1f96:	39 85       	ldd	r19, Y+9	; 0x09
    1f98:	28 30       	cpi	r18, 0x08	; 8
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	31 f1       	breq	.+76     	; 0x1fea <LCD_VidSendNumber+0x152>
    1f9e:	88 85       	ldd	r24, Y+8	; 0x08
    1fa0:	99 85       	ldd	r25, Y+9	; 0x09
    1fa2:	89 30       	cpi	r24, 0x09	; 9
    1fa4:	91 05       	cpc	r25, r1
    1fa6:	29 f1       	breq	.+74     	; 0x1ff2 <LCD_VidSendNumber+0x15a>
    1fa8:	27 c0       	rjmp	.+78     	; 0x1ff8 <LCD_VidSendNumber+0x160>
		{
		case 0 : LCD_VidSendData('0');break;
    1faa:	80 e3       	ldi	r24, 0x30	; 48
    1fac:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_VidSendData>
    1fb0:	23 c0       	rjmp	.+70     	; 0x1ff8 <LCD_VidSendNumber+0x160>
		case 1 : LCD_VidSendData('1');break;
    1fb2:	81 e3       	ldi	r24, 0x31	; 49
    1fb4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_VidSendData>
    1fb8:	1f c0       	rjmp	.+62     	; 0x1ff8 <LCD_VidSendNumber+0x160>
		case 2 : LCD_VidSendData('2');break;
    1fba:	82 e3       	ldi	r24, 0x32	; 50
    1fbc:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_VidSendData>
    1fc0:	1b c0       	rjmp	.+54     	; 0x1ff8 <LCD_VidSendNumber+0x160>
		case 3 : LCD_VidSendData('3');break;
    1fc2:	83 e3       	ldi	r24, 0x33	; 51
    1fc4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_VidSendData>
    1fc8:	17 c0       	rjmp	.+46     	; 0x1ff8 <LCD_VidSendNumber+0x160>
		case 4 : LCD_VidSendData('4');break;
    1fca:	84 e3       	ldi	r24, 0x34	; 52
    1fcc:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_VidSendData>
    1fd0:	13 c0       	rjmp	.+38     	; 0x1ff8 <LCD_VidSendNumber+0x160>
		case 5 : LCD_VidSendData('5');break;
    1fd2:	85 e3       	ldi	r24, 0x35	; 53
    1fd4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_VidSendData>
    1fd8:	0f c0       	rjmp	.+30     	; 0x1ff8 <LCD_VidSendNumber+0x160>
		case 6 : LCD_VidSendData('6');break;
    1fda:	86 e3       	ldi	r24, 0x36	; 54
    1fdc:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_VidSendData>
    1fe0:	0b c0       	rjmp	.+22     	; 0x1ff8 <LCD_VidSendNumber+0x160>
		case 7 : LCD_VidSendData('7');break;
    1fe2:	87 e3       	ldi	r24, 0x37	; 55
    1fe4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_VidSendData>
    1fe8:	07 c0       	rjmp	.+14     	; 0x1ff8 <LCD_VidSendNumber+0x160>
		case 8 : LCD_VidSendData('8');break;
    1fea:	88 e3       	ldi	r24, 0x38	; 56
    1fec:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_VidSendData>
    1ff0:	03 c0       	rjmp	.+6      	; 0x1ff8 <LCD_VidSendNumber+0x160>
		case 9 : LCD_VidSendData('9');break;
    1ff2:	89 e3       	ldi	r24, 0x39	; 57
    1ff4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_VidSendData>
		}

		i--;
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	81 50       	subi	r24, 0x01	; 1
    1ffc:	89 83       	std	Y+1, r24	; 0x01
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
	while(i>=0)
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	88 23       	and	r24, r24
    2002:	0c f0       	brlt	.+2      	; 0x2006 <LCD_VidSendNumber+0x16e>
    2004:	7e cf       	rjmp	.-260    	; 0x1f02 <LCD_VidSendNumber+0x6a>

		i--;
	}


}
    2006:	29 96       	adiw	r28, 0x09	; 9
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <LCD_VidSetPosition>:


void LCD_VidSetPosition(u8 raw, u8 column)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	00 d0       	rcall	.+0      	; 0x201e <LCD_VidSetPosition+0x6>
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	6a 83       	std	Y+2, r22	; 0x02
	if(0==raw)       // raw= 0
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	88 23       	and	r24, r24
    202a:	21 f4       	brne	.+8      	; 0x2034 <LCD_VidSetPosition+0x1c>
	{
	LCD_VidSendCommand(128+column);    // 0b10000000=128 +column
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	80 58       	subi	r24, 0x80	; 128
    2030:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_VidSendCommand>
	}
	if(1==raw)
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	21 f4       	brne	.+8      	; 0x2042 <LCD_VidSetPosition+0x2a>
	{
	LCD_VidSendCommand(128+64+column);  //  // 0b10000000=128 +column+64
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	80 54       	subi	r24, 0x40	; 64
    203e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_VidSendCommand>
	                                    // 64 is the start address of row 2
	}

}
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	08 95       	ret

0000204c <LCD_VidClear>:

void LCD_VidClear(void)
{
    204c:	df 93       	push	r29
    204e:	cf 93       	push	r28
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(1);
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_VidSendCommand>


}
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <LCD_VidShiftRight>:

void LCD_VidShiftRight(void)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0b00011100);
    2068:	8c e1       	ldi	r24, 0x1C	; 28
    206a:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_VidSendCommand>

}
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <LCD_VidShiftLeft>:

void LCD_VidShiftLeft(void)
{
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0x18);
    207c:	88 e1       	ldi	r24, 0x18	; 24
    207e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_VidSendCommand>

}
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <LCD_voidReturnHome>:

void LCD_voidReturnHome(void)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0x02);
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_VidSendCommand>

}
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	27 97       	sbiw	r28, 0x07	; 7
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	9d 83       	std	Y+5, r25	; 0x05
    20b2:	8c 83       	std	Y+4, r24	; 0x04
    20b4:	6e 83       	std	Y+6, r22	; 0x06
    20b6:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    20b8:	8a e1       	ldi	r24, 0x1A	; 26
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	0e 94 26 13 	call	0x264c	; 0x264c <pvPortMalloc>
    20c0:	9a 83       	std	Y+2, r25	; 0x02
    20c2:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	9a 81       	ldd	r25, Y+2	; 0x02
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	09 f4       	brne	.+2      	; 0x20ce <xCoRoutineCreate+0x32>
    20cc:	6f c0       	rjmp	.+222    	; 0x21ac <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    20ce:	80 91 90 00 	lds	r24, 0x0090
    20d2:	90 91 91 00 	lds	r25, 0x0091
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	41 f4       	brne	.+16     	; 0x20ea <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	9a 81       	ldd	r25, Y+2	; 0x02
    20de:	90 93 91 00 	sts	0x0091, r25
    20e2:	80 93 90 00 	sts	0x0090, r24
			prvInitialiseCoRoutineLists();
    20e6:	0e 94 b5 12 	call	0x256a	; 0x256a <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    20ea:	8e 81       	ldd	r24, Y+6	; 0x06
    20ec:	82 30       	cpi	r24, 0x02	; 2
    20ee:	10 f0       	brcs	.+4      	; 0x20f4 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    20f4:	e9 81       	ldd	r30, Y+1	; 0x01
    20f6:	fa 81       	ldd	r31, Y+2	; 0x02
    20f8:	11 8e       	std	Z+25, r1	; 0x19
    20fa:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    20fc:	e9 81       	ldd	r30, Y+1	; 0x01
    20fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2100:	8e 81       	ldd	r24, Y+6	; 0x06
    2102:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    2104:	e9 81       	ldd	r30, Y+1	; 0x01
    2106:	fa 81       	ldd	r31, Y+2	; 0x02
    2108:	8f 81       	ldd	r24, Y+7	; 0x07
    210a:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    210c:	e9 81       	ldd	r30, Y+1	; 0x01
    210e:	fa 81       	ldd	r31, Y+2	; 0x02
    2110:	8c 81       	ldd	r24, Y+4	; 0x04
    2112:	9d 81       	ldd	r25, Y+5	; 0x05
    2114:	91 83       	std	Z+1, r25	; 0x01
    2116:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	9a 81       	ldd	r25, Y+2	; 0x02
    211c:	02 96       	adiw	r24, 0x02	; 2
    211e:	0e 94 bc 13 	call	0x2778	; 0x2778 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	9a 81       	ldd	r25, Y+2	; 0x02
    2126:	0c 96       	adiw	r24, 0x0c	; 12
    2128:	0e 94 bc 13 	call	0x2778	; 0x2778 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    212c:	e9 81       	ldd	r30, Y+1	; 0x01
    212e:	fa 81       	ldd	r31, Y+2	; 0x02
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	91 87       	std	Z+9, r25	; 0x09
    2136:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2138:	e9 81       	ldd	r30, Y+1	; 0x01
    213a:	fa 81       	ldd	r31, Y+2	; 0x02
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	9a 81       	ldd	r25, Y+2	; 0x02
    2140:	93 8b       	std	Z+19, r25	; 0x13
    2142:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2144:	8e 81       	ldd	r24, Y+6	; 0x06
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	89 e0       	ldi	r24, 0x09	; 9
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	82 1b       	sub	r24, r18
    2150:	93 0b       	sbc	r25, r19
    2152:	e9 81       	ldd	r30, Y+1	; 0x01
    2154:	fa 81       	ldd	r31, Y+2	; 0x02
    2156:	95 87       	std	Z+13, r25	; 0x0d
    2158:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    215a:	e9 81       	ldd	r30, Y+1	; 0x01
    215c:	fa 81       	ldd	r31, Y+2	; 0x02
    215e:	96 89       	ldd	r25, Z+22	; 0x16
    2160:	80 91 92 00 	lds	r24, 0x0092
    2164:	89 17       	cp	r24, r25
    2166:	28 f4       	brcc	.+10     	; 0x2172 <xCoRoutineCreate+0xd6>
    2168:	e9 81       	ldd	r30, Y+1	; 0x01
    216a:	fa 81       	ldd	r31, Y+2	; 0x02
    216c:	86 89       	ldd	r24, Z+22	; 0x16
    216e:	80 93 92 00 	sts	0x0092, r24
    2172:	e9 81       	ldd	r30, Y+1	; 0x01
    2174:	fa 81       	ldd	r31, Y+2	; 0x02
    2176:	86 89       	ldd	r24, Z+22	; 0x16
    2178:	28 2f       	mov	r18, r24
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	c9 01       	movw	r24, r18
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	88 0f       	add	r24, r24
    2188:	99 1f       	adc	r25, r25
    218a:	82 0f       	add	r24, r18
    218c:	93 1f       	adc	r25, r19
    218e:	ac 01       	movw	r20, r24
    2190:	47 56       	subi	r20, 0x67	; 103
    2192:	5f 4f       	sbci	r21, 0xFF	; 255
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	9c 01       	movw	r18, r24
    219a:	2e 5f       	subi	r18, 0xFE	; 254
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	ca 01       	movw	r24, r20
    21a0:	b9 01       	movw	r22, r18
    21a2:	0e 94 cc 13 	call	0x2798	; 0x2798 <vListInsertEnd>

		xReturn = pdPASS;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	8b 83       	std	Y+3, r24	; 0x03
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    21ac:	8f ef       	ldi	r24, 0xFF	; 255
    21ae:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    21b2:	27 96       	adiw	r28, 0x07	; 7
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <vCoRoutineAddToDelayedList+0x6>
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <vCoRoutineAddToDelayedList+0x8>
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <vCoRoutineAddToDelayedList+0xa>
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	9c 83       	std	Y+4, r25	; 0x04
    21d4:	8b 83       	std	Y+3, r24	; 0x03
    21d6:	7e 83       	std	Y+6, r23	; 0x06
    21d8:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    21da:	20 91 93 00 	lds	r18, 0x0093
    21de:	30 91 94 00 	lds	r19, 0x0094
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	82 0f       	add	r24, r18
    21e8:	93 1f       	adc	r25, r19
    21ea:	9a 83       	std	Y+2, r25	; 0x02
    21ec:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    21ee:	80 91 90 00 	lds	r24, 0x0090
    21f2:	90 91 91 00 	lds	r25, 0x0091
    21f6:	02 96       	adiw	r24, 0x02	; 2
    21f8:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    21fc:	e0 91 90 00 	lds	r30, 0x0090
    2200:	f0 91 91 00 	lds	r31, 0x0091
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	9a 81       	ldd	r25, Y+2	; 0x02
    2208:	93 83       	std	Z+3, r25	; 0x03
    220a:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    220c:	20 91 93 00 	lds	r18, 0x0093
    2210:	30 91 94 00 	lds	r19, 0x0094
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	82 17       	cp	r24, r18
    221a:	93 07       	cpc	r25, r19
    221c:	70 f4       	brcc	.+28     	; 0x223a <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    221e:	80 91 bf 00 	lds	r24, 0x00BF
    2222:	90 91 c0 00 	lds	r25, 0x00C0
    2226:	20 91 90 00 	lds	r18, 0x0090
    222a:	30 91 91 00 	lds	r19, 0x0091
    222e:	2e 5f       	subi	r18, 0xFE	; 254
    2230:	3f 4f       	sbci	r19, 0xFF	; 255
    2232:	b9 01       	movw	r22, r18
    2234:	0e 94 18 14 	call	0x2830	; 0x2830 <vListInsert>
    2238:	0d c0       	rjmp	.+26     	; 0x2254 <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    223a:	80 91 bd 00 	lds	r24, 0x00BD
    223e:	90 91 be 00 	lds	r25, 0x00BE
    2242:	20 91 90 00 	lds	r18, 0x0090
    2246:	30 91 91 00 	lds	r19, 0x0091
    224a:	2e 5f       	subi	r18, 0xFE	; 254
    224c:	3f 4f       	sbci	r19, 0xFF	; 255
    224e:	b9 01       	movw	r22, r18
    2250:	0e 94 18 14 	call	0x2830	; 0x2830 <vListInsert>
	}

	if( pxEventList )
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	61 f0       	breq	.+24     	; 0x2274 <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    225c:	80 91 90 00 	lds	r24, 0x0090
    2260:	90 91 91 00 	lds	r25, 0x0091
    2264:	9c 01       	movw	r18, r24
    2266:	24 5f       	subi	r18, 0xF4	; 244
    2268:	3f 4f       	sbci	r19, 0xFF	; 255
    226a:	8d 81       	ldd	r24, Y+5	; 0x05
    226c:	9e 81       	ldd	r25, Y+6	; 0x06
    226e:	b9 01       	movw	r22, r18
    2270:	0e 94 18 14 	call	0x2830	; 0x2830 <vListInsert>
	}
}
    2274:	26 96       	adiw	r28, 0x06	; 6
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	cf 91       	pop	r28
    2282:	df 91       	pop	r29
    2284:	08 95       	ret

00002286 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	00 d0       	rcall	.+0      	; 0x228c <prvCheckPendingReadyList+0x6>
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	3a c0       	rjmp	.+116    	; 0x2306 <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2292:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2294:	e0 91 c6 00 	lds	r30, 0x00C6
    2298:	f0 91 c7 00 	lds	r31, 0x00C7
    229c:	86 81       	ldd	r24, Z+6	; 0x06
    229e:	97 81       	ldd	r25, Z+7	; 0x07
    22a0:	9a 83       	std	Y+2, r25	; 0x02
    22a2:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	9a 81       	ldd	r25, Y+2	; 0x02
    22a8:	0c 96       	adiw	r24, 0x0c	; 12
    22aa:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    22ae:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	9a 81       	ldd	r25, Y+2	; 0x02
    22b4:	02 96       	adiw	r24, 0x02	; 2
    22b6:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    22ba:	e9 81       	ldd	r30, Y+1	; 0x01
    22bc:	fa 81       	ldd	r31, Y+2	; 0x02
    22be:	96 89       	ldd	r25, Z+22	; 0x16
    22c0:	80 91 92 00 	lds	r24, 0x0092
    22c4:	89 17       	cp	r24, r25
    22c6:	28 f4       	brcc	.+10     	; 0x22d2 <prvCheckPendingReadyList+0x4c>
    22c8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ca:	fa 81       	ldd	r31, Y+2	; 0x02
    22cc:	86 89       	ldd	r24, Z+22	; 0x16
    22ce:	80 93 92 00 	sts	0x0092, r24
    22d2:	e9 81       	ldd	r30, Y+1	; 0x01
    22d4:	fa 81       	ldd	r31, Y+2	; 0x02
    22d6:	86 89       	ldd	r24, Z+22	; 0x16
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	c9 01       	movw	r24, r18
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	88 0f       	add	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	82 0f       	add	r24, r18
    22ec:	93 1f       	adc	r25, r19
    22ee:	ac 01       	movw	r20, r24
    22f0:	47 56       	subi	r20, 0x67	; 103
    22f2:	5f 4f       	sbci	r21, 0xFF	; 255
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	9c 01       	movw	r18, r24
    22fa:	2e 5f       	subi	r18, 0xFE	; 254
    22fc:	3f 4f       	sbci	r19, 0xFF	; 255
    22fe:	ca 01       	movw	r24, r20
    2300:	b9 01       	movw	r22, r18
    2302:	0e 94 cc 13 	call	0x2798	; 0x2798 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2306:	80 91 c1 00 	lds	r24, 0x00C1
    230a:	88 23       	and	r24, r24
    230c:	09 f0       	breq	.+2      	; 0x2310 <prvCheckPendingReadyList+0x8a>
    230e:	c1 cf       	rjmp	.-126    	; 0x2292 <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	00 d0       	rcall	.+0      	; 0x2320 <prvCheckDelayedList+0x6>
    2320:	00 d0       	rcall	.+0      	; 0x2322 <prvCheckDelayedList+0x8>
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2326:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <xTaskGetTickCount>
    232a:	20 91 95 00 	lds	r18, 0x0095
    232e:	30 91 96 00 	lds	r19, 0x0096
    2332:	82 1b       	sub	r24, r18
    2334:	93 0b       	sbc	r25, r19
    2336:	90 93 98 00 	sts	0x0098, r25
    233a:	80 93 97 00 	sts	0x0097, r24
    233e:	85 c0       	rjmp	.+266    	; 0x244a <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    2340:	80 91 93 00 	lds	r24, 0x0093
    2344:	90 91 94 00 	lds	r25, 0x0094
    2348:	01 96       	adiw	r24, 0x01	; 1
    234a:	90 93 94 00 	sts	0x0094, r25
    234e:	80 93 93 00 	sts	0x0093, r24
		xPassedTicks--;
    2352:	80 91 97 00 	lds	r24, 0x0097
    2356:	90 91 98 00 	lds	r25, 0x0098
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	90 93 98 00 	sts	0x0098, r25
    2360:	80 93 97 00 	sts	0x0097, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2364:	80 91 93 00 	lds	r24, 0x0093
    2368:	90 91 94 00 	lds	r25, 0x0094
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	09 f0       	breq	.+2      	; 0x2372 <prvCheckDelayedList+0x58>
    2370:	64 c0       	rjmp	.+200    	; 0x243a <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    2372:	80 91 bd 00 	lds	r24, 0x00BD
    2376:	90 91 be 00 	lds	r25, 0x00BE
    237a:	9a 83       	std	Y+2, r25	; 0x02
    237c:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    237e:	80 91 bf 00 	lds	r24, 0x00BF
    2382:	90 91 c0 00 	lds	r25, 0x00C0
    2386:	90 93 be 00 	sts	0x00BE, r25
    238a:	80 93 bd 00 	sts	0x00BD, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	90 93 c0 00 	sts	0x00C0, r25
    2396:	80 93 bf 00 	sts	0x00BF, r24
    239a:	4f c0       	rjmp	.+158    	; 0x243a <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    239c:	e0 91 bd 00 	lds	r30, 0x00BD
    23a0:	f0 91 be 00 	lds	r31, 0x00BE
    23a4:	05 80       	ldd	r0, Z+5	; 0x05
    23a6:	f6 81       	ldd	r31, Z+6	; 0x06
    23a8:	e0 2d       	mov	r30, r0
    23aa:	86 81       	ldd	r24, Z+6	; 0x06
    23ac:	97 81       	ldd	r25, Z+7	; 0x07
    23ae:	9c 83       	std	Y+4, r25	; 0x04
    23b0:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    23b2:	eb 81       	ldd	r30, Y+3	; 0x03
    23b4:	fc 81       	ldd	r31, Y+4	; 0x04
    23b6:	22 81       	ldd	r18, Z+2	; 0x02
    23b8:	33 81       	ldd	r19, Z+3	; 0x03
    23ba:	80 91 93 00 	lds	r24, 0x0093
    23be:	90 91 94 00 	lds	r25, 0x0094
    23c2:	82 17       	cp	r24, r18
    23c4:	93 07       	cpc	r25, r19
    23c6:	08 f4       	brcc	.+2      	; 0x23ca <prvCheckDelayedList+0xb0>
    23c8:	40 c0       	rjmp	.+128    	; 0x244a <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    23ca:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	9c 81       	ldd	r25, Y+4	; 0x04
    23d0:	02 96       	adiw	r24, 0x02	; 2
    23d2:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    23d6:	eb 81       	ldd	r30, Y+3	; 0x03
    23d8:	fc 81       	ldd	r31, Y+4	; 0x04
    23da:	84 89       	ldd	r24, Z+20	; 0x14
    23dc:	95 89       	ldd	r25, Z+21	; 0x15
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	29 f0       	breq	.+10     	; 0x23ec <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	9c 81       	ldd	r25, Y+4	; 0x04
    23e6:	0c 96       	adiw	r24, 0x0c	; 12
    23e8:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    23ec:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    23ee:	eb 81       	ldd	r30, Y+3	; 0x03
    23f0:	fc 81       	ldd	r31, Y+4	; 0x04
    23f2:	96 89       	ldd	r25, Z+22	; 0x16
    23f4:	80 91 92 00 	lds	r24, 0x0092
    23f8:	89 17       	cp	r24, r25
    23fa:	28 f4       	brcc	.+10     	; 0x2406 <prvCheckDelayedList+0xec>
    23fc:	eb 81       	ldd	r30, Y+3	; 0x03
    23fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2400:	86 89       	ldd	r24, Z+22	; 0x16
    2402:	80 93 92 00 	sts	0x0092, r24
    2406:	eb 81       	ldd	r30, Y+3	; 0x03
    2408:	fc 81       	ldd	r31, Y+4	; 0x04
    240a:	86 89       	ldd	r24, Z+22	; 0x16
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	c9 01       	movw	r24, r18
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	88 0f       	add	r24, r24
    2418:	99 1f       	adc	r25, r25
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	82 0f       	add	r24, r18
    2420:	93 1f       	adc	r25, r19
    2422:	ac 01       	movw	r20, r24
    2424:	47 56       	subi	r20, 0x67	; 103
    2426:	5f 4f       	sbci	r21, 0xFF	; 255
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	9c 81       	ldd	r25, Y+4	; 0x04
    242c:	9c 01       	movw	r18, r24
    242e:	2e 5f       	subi	r18, 0xFE	; 254
    2430:	3f 4f       	sbci	r19, 0xFF	; 255
    2432:	ca 01       	movw	r24, r20
    2434:	b9 01       	movw	r22, r18
    2436:	0e 94 cc 13 	call	0x2798	; 0x2798 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    243a:	e0 91 bd 00 	lds	r30, 0x00BD
    243e:	f0 91 be 00 	lds	r31, 0x00BE
    2442:	80 81       	ld	r24, Z
    2444:	88 23       	and	r24, r24
    2446:	09 f0       	breq	.+2      	; 0x244a <prvCheckDelayedList+0x130>
    2448:	a9 cf       	rjmp	.-174    	; 0x239c <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    244a:	80 91 97 00 	lds	r24, 0x0097
    244e:	90 91 98 00 	lds	r25, 0x0098
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	09 f0       	breq	.+2      	; 0x2458 <prvCheckDelayedList+0x13e>
    2456:	74 cf       	rjmp	.-280    	; 0x2340 <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2458:	80 91 93 00 	lds	r24, 0x0093
    245c:	90 91 94 00 	lds	r25, 0x0094
    2460:	90 93 96 00 	sts	0x0096, r25
    2464:	80 93 95 00 	sts	0x0095, r24
}
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	08 95       	ret

00002476 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    2476:	df 93       	push	r29
    2478:	cf 93       	push	r28
    247a:	00 d0       	rcall	.+0      	; 0x247c <vCoRoutineSchedule+0x6>
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2480:	0e 94 43 11 	call	0x2286	; 0x2286 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2484:	0e 94 8d 11 	call	0x231a	; 0x231a <prvCheckDelayedList>
    2488:	0a c0       	rjmp	.+20     	; 0x249e <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    248a:	80 91 92 00 	lds	r24, 0x0092
    248e:	88 23       	and	r24, r24
    2490:	09 f4       	brne	.+2      	; 0x2494 <vCoRoutineSchedule+0x1e>
    2492:	66 c0       	rjmp	.+204    	; 0x2560 <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    2494:	80 91 92 00 	lds	r24, 0x0092
    2498:	81 50       	subi	r24, 0x01	; 1
    249a:	80 93 92 00 	sts	0x0092, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    249e:	80 91 92 00 	lds	r24, 0x0092
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	c9 01       	movw	r24, r18
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	82 0f       	add	r24, r18
    24b6:	93 1f       	adc	r25, r19
    24b8:	fc 01       	movw	r30, r24
    24ba:	e7 56       	subi	r30, 0x67	; 103
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	80 81       	ld	r24, Z
    24c0:	88 23       	and	r24, r24
    24c2:	19 f3       	breq	.-58     	; 0x248a <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    24c4:	80 91 92 00 	lds	r24, 0x0092
    24c8:	28 2f       	mov	r18, r24
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	c9 01       	movw	r24, r18
    24ce:	88 0f       	add	r24, r24
    24d0:	99 1f       	adc	r25, r25
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	82 0f       	add	r24, r18
    24dc:	93 1f       	adc	r25, r19
    24de:	87 56       	subi	r24, 0x67	; 103
    24e0:	9f 4f       	sbci	r25, 0xFF	; 255
    24e2:	9a 83       	std	Y+2, r25	; 0x02
    24e4:	89 83       	std	Y+1, r24	; 0x01
    24e6:	e9 81       	ldd	r30, Y+1	; 0x01
    24e8:	fa 81       	ldd	r31, Y+2	; 0x02
    24ea:	01 80       	ldd	r0, Z+1	; 0x01
    24ec:	f2 81       	ldd	r31, Z+2	; 0x02
    24ee:	e0 2d       	mov	r30, r0
    24f0:	82 81       	ldd	r24, Z+2	; 0x02
    24f2:	93 81       	ldd	r25, Z+3	; 0x03
    24f4:	e9 81       	ldd	r30, Y+1	; 0x01
    24f6:	fa 81       	ldd	r31, Y+2	; 0x02
    24f8:	92 83       	std	Z+2, r25	; 0x02
    24fa:	81 83       	std	Z+1, r24	; 0x01
    24fc:	e9 81       	ldd	r30, Y+1	; 0x01
    24fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2500:	21 81       	ldd	r18, Z+1	; 0x01
    2502:	32 81       	ldd	r19, Z+2	; 0x02
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	9a 81       	ldd	r25, Y+2	; 0x02
    2508:	03 96       	adiw	r24, 0x03	; 3
    250a:	28 17       	cp	r18, r24
    250c:	39 07       	cpc	r19, r25
    250e:	59 f4       	brne	.+22     	; 0x2526 <vCoRoutineSchedule+0xb0>
    2510:	e9 81       	ldd	r30, Y+1	; 0x01
    2512:	fa 81       	ldd	r31, Y+2	; 0x02
    2514:	01 80       	ldd	r0, Z+1	; 0x01
    2516:	f2 81       	ldd	r31, Z+2	; 0x02
    2518:	e0 2d       	mov	r30, r0
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	e9 81       	ldd	r30, Y+1	; 0x01
    2520:	fa 81       	ldd	r31, Y+2	; 0x02
    2522:	92 83       	std	Z+2, r25	; 0x02
    2524:	81 83       	std	Z+1, r24	; 0x01
    2526:	e9 81       	ldd	r30, Y+1	; 0x01
    2528:	fa 81       	ldd	r31, Y+2	; 0x02
    252a:	01 80       	ldd	r0, Z+1	; 0x01
    252c:	f2 81       	ldd	r31, Z+2	; 0x02
    252e:	e0 2d       	mov	r30, r0
    2530:	86 81       	ldd	r24, Z+6	; 0x06
    2532:	97 81       	ldd	r25, Z+7	; 0x07
    2534:	90 93 91 00 	sts	0x0091, r25
    2538:	80 93 90 00 	sts	0x0090, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    253c:	e0 91 90 00 	lds	r30, 0x0090
    2540:	f0 91 91 00 	lds	r31, 0x0091
    2544:	40 81       	ld	r20, Z
    2546:	51 81       	ldd	r21, Z+1	; 0x01
    2548:	80 91 90 00 	lds	r24, 0x0090
    254c:	90 91 91 00 	lds	r25, 0x0091
    2550:	e0 91 90 00 	lds	r30, 0x0090
    2554:	f0 91 91 00 	lds	r31, 0x0091
    2558:	27 89       	ldd	r18, Z+23	; 0x17
    255a:	62 2f       	mov	r22, r18
    255c:	fa 01       	movw	r30, r20
    255e:	09 95       	icall

	return;
}
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	0f 92       	push	r0
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2574:	19 82       	std	Y+1, r1	; 0x01
    2576:	13 c0       	rjmp	.+38     	; 0x259e <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	28 2f       	mov	r18, r24
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	c9 01       	movw	r24, r18
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	88 0f       	add	r24, r24
    2586:	99 1f       	adc	r25, r25
    2588:	88 0f       	add	r24, r24
    258a:	99 1f       	adc	r25, r25
    258c:	82 0f       	add	r24, r18
    258e:	93 1f       	adc	r25, r19
    2590:	87 56       	subi	r24, 0x67	; 103
    2592:	9f 4f       	sbci	r25, 0xFF	; 255
    2594:	0e 94 92 13 	call	0x2724	; 0x2724 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	8f 5f       	subi	r24, 0xFF	; 255
    259c:	89 83       	std	Y+1, r24	; 0x01
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	82 30       	cpi	r24, 0x02	; 2
    25a2:	50 f3       	brcs	.-44     	; 0x2578 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    25a4:	8b ea       	ldi	r24, 0xAB	; 171
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 92 13 	call	0x2724	; 0x2724 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    25ac:	84 eb       	ldi	r24, 0xB4	; 180
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	0e 94 92 13 	call	0x2724	; 0x2724 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    25b4:	81 ec       	ldi	r24, 0xC1	; 193
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	0e 94 92 13 	call	0x2724	; 0x2724 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    25bc:	8b ea       	ldi	r24, 0xAB	; 171
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	90 93 be 00 	sts	0x00BE, r25
    25c4:	80 93 bd 00 	sts	0x00BD, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    25c8:	84 eb       	ldi	r24, 0xB4	; 180
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	90 93 c0 00 	sts	0x00C0, r25
    25d0:	80 93 bf 00 	sts	0x00BF, r24
}
    25d4:	0f 90       	pop	r0
    25d6:	cf 91       	pop	r28
    25d8:	df 91       	pop	r29
    25da:	08 95       	ret

000025dc <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    25dc:	df 93       	push	r29
    25de:	cf 93       	push	r28
    25e0:	00 d0       	rcall	.+0      	; 0x25e2 <xCoRoutineRemoveFromEventList+0x6>
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <xCoRoutineRemoveFromEventList+0x8>
    25e4:	0f 92       	push	r0
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	9d 83       	std	Y+5, r25	; 0x05
    25ec:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    25ee:	ec 81       	ldd	r30, Y+4	; 0x04
    25f0:	fd 81       	ldd	r31, Y+5	; 0x05
    25f2:	05 80       	ldd	r0, Z+5	; 0x05
    25f4:	f6 81       	ldd	r31, Z+6	; 0x06
    25f6:	e0 2d       	mov	r30, r0
    25f8:	86 81       	ldd	r24, Z+6	; 0x06
    25fa:	97 81       	ldd	r25, Z+7	; 0x07
    25fc:	9b 83       	std	Y+3, r25	; 0x03
    25fe:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	9b 81       	ldd	r25, Y+3	; 0x03
    2604:	0c 96       	adiw	r24, 0x0c	; 12
    2606:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	9b 81       	ldd	r25, Y+3	; 0x03
    260e:	9c 01       	movw	r18, r24
    2610:	24 5f       	subi	r18, 0xF4	; 244
    2612:	3f 4f       	sbci	r19, 0xFF	; 255
    2614:	81 ec       	ldi	r24, 0xC1	; 193
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	b9 01       	movw	r22, r18
    261a:	0e 94 cc 13 	call	0x2798	; 0x2798 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    261e:	ea 81       	ldd	r30, Y+2	; 0x02
    2620:	fb 81       	ldd	r31, Y+3	; 0x03
    2622:	96 89       	ldd	r25, Z+22	; 0x16
    2624:	e0 91 90 00 	lds	r30, 0x0090
    2628:	f0 91 91 00 	lds	r31, 0x0091
    262c:	86 89       	ldd	r24, Z+22	; 0x16
    262e:	98 17       	cp	r25, r24
    2630:	18 f0       	brcs	.+6      	; 0x2638 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	01 c0       	rjmp	.+2      	; 0x263a <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    2638:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    263a:	89 81       	ldd	r24, Y+1	; 0x01
}
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	00 d0       	rcall	.+0      	; 0x2652 <pvPortMalloc+0x6>
    2652:	00 d0       	rcall	.+0      	; 0x2654 <pvPortMalloc+0x8>
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	9c 83       	std	Y+4, r25	; 0x04
    265a:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
    265c:	1a 82       	std	Y+2, r1	; 0x02
    265e:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    2660:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    2664:	80 91 ca 00 	lds	r24, 0x00CA
    2668:	90 91 cb 00 	lds	r25, 0x00CB
    266c:	2b 81       	ldd	r18, Y+3	; 0x03
    266e:	3c 81       	ldd	r19, Y+4	; 0x04
    2670:	82 0f       	add	r24, r18
    2672:	93 1f       	adc	r25, r19
    2674:	24 e0       	ldi	r18, 0x04	; 4
    2676:	80 3b       	cpi	r24, 0xB0	; 176
    2678:	92 07       	cpc	r25, r18
    267a:	18 f5       	brcc	.+70     	; 0x26c2 <pvPortMalloc+0x76>
    267c:	20 91 ca 00 	lds	r18, 0x00CA
    2680:	30 91 cb 00 	lds	r19, 0x00CB
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	9c 81       	ldd	r25, Y+4	; 0x04
    2688:	28 0f       	add	r18, r24
    268a:	39 1f       	adc	r19, r25
    268c:	80 91 ca 00 	lds	r24, 0x00CA
    2690:	90 91 cb 00 	lds	r25, 0x00CB
    2694:	82 17       	cp	r24, r18
    2696:	93 07       	cpc	r25, r19
    2698:	a0 f4       	brcc	.+40     	; 0x26c2 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    269a:	80 91 ca 00 	lds	r24, 0x00CA
    269e:	90 91 cb 00 	lds	r25, 0x00CB
    26a2:	84 53       	subi	r24, 0x34	; 52
    26a4:	9f 4f       	sbci	r25, 0xFF	; 255
    26a6:	9a 83       	std	Y+2, r25	; 0x02
    26a8:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
    26aa:	20 91 ca 00 	lds	r18, 0x00CA
    26ae:	30 91 cb 00 	lds	r19, 0x00CB
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	9c 81       	ldd	r25, Y+4	; 0x04
    26b6:	82 0f       	add	r24, r18
    26b8:	93 1f       	adc	r25, r19
    26ba:	90 93 cb 00 	sts	0x00CB, r25
    26be:	80 93 ca 00 	sts	0x00CA, r24
		}	
	}
	xTaskResumeAll();
    26c2:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	08 95       	ret

000026d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	00 d0       	rcall	.+0      	; 0x26de <vPortFree+0x6>
    26de:	cd b7       	in	r28, 0x3d	; 61
    26e0:	de b7       	in	r29, 0x3e	; 62
    26e2:	9a 83       	std	Y+2, r25	; 0x02
    26e4:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	08 95       	ret

000026f0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    26f8:	10 92 cb 00 	sts	0x00CB, r1
    26fc:	10 92 ca 00 	sts	0x00CA, r1
}
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    270e:	20 91 ca 00 	lds	r18, 0x00CA
    2712:	30 91 cb 00 	lds	r19, 0x00CB
    2716:	80 eb       	ldi	r24, 0xB0	; 176
    2718:	94 e0       	ldi	r25, 0x04	; 4
    271a:	82 1b       	sub	r24, r18
    271c:	93 0b       	sbc	r25, r19
}
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	00 d0       	rcall	.+0      	; 0x272a <vListInitialise+0x6>
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	9a 83       	std	Y+2, r25	; 0x02
    2730:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	9a 81       	ldd	r25, Y+2	; 0x02
    2736:	03 96       	adiw	r24, 0x03	; 3
    2738:	e9 81       	ldd	r30, Y+1	; 0x01
    273a:	fa 81       	ldd	r31, Y+2	; 0x02
    273c:	92 83       	std	Z+2, r25	; 0x02
    273e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2740:	e9 81       	ldd	r30, Y+1	; 0x01
    2742:	fa 81       	ldd	r31, Y+2	; 0x02
    2744:	8f ef       	ldi	r24, 0xFF	; 255
    2746:	9f ef       	ldi	r25, 0xFF	; 255
    2748:	94 83       	std	Z+4, r25	; 0x04
    274a:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	9a 81       	ldd	r25, Y+2	; 0x02
    2750:	03 96       	adiw	r24, 0x03	; 3
    2752:	e9 81       	ldd	r30, Y+1	; 0x01
    2754:	fa 81       	ldd	r31, Y+2	; 0x02
    2756:	96 83       	std	Z+6, r25	; 0x06
    2758:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	9a 81       	ldd	r25, Y+2	; 0x02
    275e:	03 96       	adiw	r24, 0x03	; 3
    2760:	e9 81       	ldd	r30, Y+1	; 0x01
    2762:	fa 81       	ldd	r31, Y+2	; 0x02
    2764:	90 87       	std	Z+8, r25	; 0x08
    2766:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2768:	e9 81       	ldd	r30, Y+1	; 0x01
    276a:	fa 81       	ldd	r31, Y+2	; 0x02
    276c:	10 82       	st	Z, r1
}
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	08 95       	ret

00002778 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	00 d0       	rcall	.+0      	; 0x277e <vListInitialiseItem+0x6>
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	9a 83       	std	Y+2, r25	; 0x02
    2784:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2786:	e9 81       	ldd	r30, Y+1	; 0x01
    2788:	fa 81       	ldd	r31, Y+2	; 0x02
    278a:	11 86       	std	Z+9, r1	; 0x09
    278c:	10 86       	std	Z+8, r1	; 0x08
}
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	08 95       	ret

00002798 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2798:	df 93       	push	r29
    279a:	cf 93       	push	r28
    279c:	00 d0       	rcall	.+0      	; 0x279e <vListInsertEnd+0x6>
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <vListInsertEnd+0x8>
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <vListInsertEnd+0xa>
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	9c 83       	std	Y+4, r25	; 0x04
    27a8:	8b 83       	std	Y+3, r24	; 0x03
    27aa:	7e 83       	std	Y+6, r23	; 0x06
    27ac:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    27ae:	eb 81       	ldd	r30, Y+3	; 0x03
    27b0:	fc 81       	ldd	r31, Y+4	; 0x04
    27b2:	81 81       	ldd	r24, Z+1	; 0x01
    27b4:	92 81       	ldd	r25, Z+2	; 0x02
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    27ba:	e9 81       	ldd	r30, Y+1	; 0x01
    27bc:	fa 81       	ldd	r31, Y+2	; 0x02
    27be:	82 81       	ldd	r24, Z+2	; 0x02
    27c0:	93 81       	ldd	r25, Z+3	; 0x03
    27c2:	ed 81       	ldd	r30, Y+5	; 0x05
    27c4:	fe 81       	ldd	r31, Y+6	; 0x06
    27c6:	93 83       	std	Z+3, r25	; 0x03
    27c8:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    27ca:	eb 81       	ldd	r30, Y+3	; 0x03
    27cc:	fc 81       	ldd	r31, Y+4	; 0x04
    27ce:	81 81       	ldd	r24, Z+1	; 0x01
    27d0:	92 81       	ldd	r25, Z+2	; 0x02
    27d2:	ed 81       	ldd	r30, Y+5	; 0x05
    27d4:	fe 81       	ldd	r31, Y+6	; 0x06
    27d6:	95 83       	std	Z+5, r25	; 0x05
    27d8:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    27da:	e9 81       	ldd	r30, Y+1	; 0x01
    27dc:	fa 81       	ldd	r31, Y+2	; 0x02
    27de:	02 80       	ldd	r0, Z+2	; 0x02
    27e0:	f3 81       	ldd	r31, Z+3	; 0x03
    27e2:	e0 2d       	mov	r30, r0
    27e4:	8d 81       	ldd	r24, Y+5	; 0x05
    27e6:	9e 81       	ldd	r25, Y+6	; 0x06
    27e8:	95 83       	std	Z+5, r25	; 0x05
    27ea:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    27ec:	8d 81       	ldd	r24, Y+5	; 0x05
    27ee:	9e 81       	ldd	r25, Y+6	; 0x06
    27f0:	e9 81       	ldd	r30, Y+1	; 0x01
    27f2:	fa 81       	ldd	r31, Y+2	; 0x02
    27f4:	93 83       	std	Z+3, r25	; 0x03
    27f6:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    27f8:	8d 81       	ldd	r24, Y+5	; 0x05
    27fa:	9e 81       	ldd	r25, Y+6	; 0x06
    27fc:	eb 81       	ldd	r30, Y+3	; 0x03
    27fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2800:	92 83       	std	Z+2, r25	; 0x02
    2802:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2804:	ed 81       	ldd	r30, Y+5	; 0x05
    2806:	fe 81       	ldd	r31, Y+6	; 0x06
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	9c 81       	ldd	r25, Y+4	; 0x04
    280c:	91 87       	std	Z+9, r25	; 0x09
    280e:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2810:	eb 81       	ldd	r30, Y+3	; 0x03
    2812:	fc 81       	ldd	r31, Y+4	; 0x04
    2814:	80 81       	ld	r24, Z
    2816:	8f 5f       	subi	r24, 0xFF	; 255
    2818:	eb 81       	ldd	r30, Y+3	; 0x03
    281a:	fc 81       	ldd	r31, Y+4	; 0x04
    281c:	80 83       	st	Z, r24
}
    281e:	26 96       	adiw	r28, 0x06	; 6
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	28 97       	sbiw	r28, 0x08	; 8
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	9e 83       	std	Y+6, r25	; 0x06
    2846:	8d 83       	std	Y+5, r24	; 0x05
    2848:	78 87       	std	Y+8, r23	; 0x08
    284a:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    284c:	ef 81       	ldd	r30, Y+7	; 0x07
    284e:	f8 85       	ldd	r31, Y+8	; 0x08
    2850:	80 81       	ld	r24, Z
    2852:	91 81       	ldd	r25, Z+1	; 0x01
    2854:	9a 83       	std	Y+2, r25	; 0x02
    2856:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	9a 81       	ldd	r25, Y+2	; 0x02
    285c:	2f ef       	ldi	r18, 0xFF	; 255
    285e:	8f 3f       	cpi	r24, 0xFF	; 255
    2860:	92 07       	cpc	r25, r18
    2862:	39 f4       	brne	.+14     	; 0x2872 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2864:	ed 81       	ldd	r30, Y+5	; 0x05
    2866:	fe 81       	ldd	r31, Y+6	; 0x06
    2868:	87 81       	ldd	r24, Z+7	; 0x07
    286a:	90 85       	ldd	r25, Z+8	; 0x08
    286c:	9c 83       	std	Y+4, r25	; 0x04
    286e:	8b 83       	std	Y+3, r24	; 0x03
    2870:	18 c0       	rjmp	.+48     	; 0x28a2 <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2872:	8d 81       	ldd	r24, Y+5	; 0x05
    2874:	9e 81       	ldd	r25, Y+6	; 0x06
    2876:	03 96       	adiw	r24, 0x03	; 3
    2878:	9c 83       	std	Y+4, r25	; 0x04
    287a:	8b 83       	std	Y+3, r24	; 0x03
    287c:	06 c0       	rjmp	.+12     	; 0x288a <vListInsert+0x5a>
    287e:	eb 81       	ldd	r30, Y+3	; 0x03
    2880:	fc 81       	ldd	r31, Y+4	; 0x04
    2882:	82 81       	ldd	r24, Z+2	; 0x02
    2884:	93 81       	ldd	r25, Z+3	; 0x03
    2886:	9c 83       	std	Y+4, r25	; 0x04
    2888:	8b 83       	std	Y+3, r24	; 0x03
    288a:	eb 81       	ldd	r30, Y+3	; 0x03
    288c:	fc 81       	ldd	r31, Y+4	; 0x04
    288e:	02 80       	ldd	r0, Z+2	; 0x02
    2890:	f3 81       	ldd	r31, Z+3	; 0x03
    2892:	e0 2d       	mov	r30, r0
    2894:	20 81       	ld	r18, Z
    2896:	31 81       	ldd	r19, Z+1	; 0x01
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	9a 81       	ldd	r25, Y+2	; 0x02
    289c:	82 17       	cp	r24, r18
    289e:	93 07       	cpc	r25, r19
    28a0:	70 f7       	brcc	.-36     	; 0x287e <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    28a2:	eb 81       	ldd	r30, Y+3	; 0x03
    28a4:	fc 81       	ldd	r31, Y+4	; 0x04
    28a6:	82 81       	ldd	r24, Z+2	; 0x02
    28a8:	93 81       	ldd	r25, Z+3	; 0x03
    28aa:	ef 81       	ldd	r30, Y+7	; 0x07
    28ac:	f8 85       	ldd	r31, Y+8	; 0x08
    28ae:	93 83       	std	Z+3, r25	; 0x03
    28b0:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    28b2:	ef 81       	ldd	r30, Y+7	; 0x07
    28b4:	f8 85       	ldd	r31, Y+8	; 0x08
    28b6:	02 80       	ldd	r0, Z+2	; 0x02
    28b8:	f3 81       	ldd	r31, Z+3	; 0x03
    28ba:	e0 2d       	mov	r30, r0
    28bc:	8f 81       	ldd	r24, Y+7	; 0x07
    28be:	98 85       	ldd	r25, Y+8	; 0x08
    28c0:	95 83       	std	Z+5, r25	; 0x05
    28c2:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    28c4:	ef 81       	ldd	r30, Y+7	; 0x07
    28c6:	f8 85       	ldd	r31, Y+8	; 0x08
    28c8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ca:	9c 81       	ldd	r25, Y+4	; 0x04
    28cc:	95 83       	std	Z+5, r25	; 0x05
    28ce:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    28d0:	8f 81       	ldd	r24, Y+7	; 0x07
    28d2:	98 85       	ldd	r25, Y+8	; 0x08
    28d4:	eb 81       	ldd	r30, Y+3	; 0x03
    28d6:	fc 81       	ldd	r31, Y+4	; 0x04
    28d8:	93 83       	std	Z+3, r25	; 0x03
    28da:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    28dc:	ef 81       	ldd	r30, Y+7	; 0x07
    28de:	f8 85       	ldd	r31, Y+8	; 0x08
    28e0:	8d 81       	ldd	r24, Y+5	; 0x05
    28e2:	9e 81       	ldd	r25, Y+6	; 0x06
    28e4:	91 87       	std	Z+9, r25	; 0x09
    28e6:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    28e8:	ed 81       	ldd	r30, Y+5	; 0x05
    28ea:	fe 81       	ldd	r31, Y+6	; 0x06
    28ec:	80 81       	ld	r24, Z
    28ee:	8f 5f       	subi	r24, 0xFF	; 255
    28f0:	ed 81       	ldd	r30, Y+5	; 0x05
    28f2:	fe 81       	ldd	r31, Y+6	; 0x06
    28f4:	80 83       	st	Z, r24
}
    28f6:	28 96       	adiw	r28, 0x08	; 8
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	08 95       	ret

00002908 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	00 d0       	rcall	.+0      	; 0x290e <vListRemove+0x6>
    290e:	00 d0       	rcall	.+0      	; 0x2910 <vListRemove+0x8>
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	9c 83       	std	Y+4, r25	; 0x04
    2916:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2918:	eb 81       	ldd	r30, Y+3	; 0x03
    291a:	fc 81       	ldd	r31, Y+4	; 0x04
    291c:	a2 81       	ldd	r26, Z+2	; 0x02
    291e:	b3 81       	ldd	r27, Z+3	; 0x03
    2920:	eb 81       	ldd	r30, Y+3	; 0x03
    2922:	fc 81       	ldd	r31, Y+4	; 0x04
    2924:	84 81       	ldd	r24, Z+4	; 0x04
    2926:	95 81       	ldd	r25, Z+5	; 0x05
    2928:	15 96       	adiw	r26, 0x05	; 5
    292a:	9c 93       	st	X, r25
    292c:	8e 93       	st	-X, r24
    292e:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2930:	eb 81       	ldd	r30, Y+3	; 0x03
    2932:	fc 81       	ldd	r31, Y+4	; 0x04
    2934:	a4 81       	ldd	r26, Z+4	; 0x04
    2936:	b5 81       	ldd	r27, Z+5	; 0x05
    2938:	eb 81       	ldd	r30, Y+3	; 0x03
    293a:	fc 81       	ldd	r31, Y+4	; 0x04
    293c:	82 81       	ldd	r24, Z+2	; 0x02
    293e:	93 81       	ldd	r25, Z+3	; 0x03
    2940:	13 96       	adiw	r26, 0x03	; 3
    2942:	9c 93       	st	X, r25
    2944:	8e 93       	st	-X, r24
    2946:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2948:	eb 81       	ldd	r30, Y+3	; 0x03
    294a:	fc 81       	ldd	r31, Y+4	; 0x04
    294c:	80 85       	ldd	r24, Z+8	; 0x08
    294e:	91 85       	ldd	r25, Z+9	; 0x09
    2950:	9a 83       	std	Y+2, r25	; 0x02
    2952:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2954:	e9 81       	ldd	r30, Y+1	; 0x01
    2956:	fa 81       	ldd	r31, Y+2	; 0x02
    2958:	21 81       	ldd	r18, Z+1	; 0x01
    295a:	32 81       	ldd	r19, Z+2	; 0x02
    295c:	8b 81       	ldd	r24, Y+3	; 0x03
    295e:	9c 81       	ldd	r25, Y+4	; 0x04
    2960:	28 17       	cp	r18, r24
    2962:	39 07       	cpc	r19, r25
    2964:	41 f4       	brne	.+16     	; 0x2976 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2966:	eb 81       	ldd	r30, Y+3	; 0x03
    2968:	fc 81       	ldd	r31, Y+4	; 0x04
    296a:	84 81       	ldd	r24, Z+4	; 0x04
    296c:	95 81       	ldd	r25, Z+5	; 0x05
    296e:	e9 81       	ldd	r30, Y+1	; 0x01
    2970:	fa 81       	ldd	r31, Y+2	; 0x02
    2972:	92 83       	std	Z+2, r25	; 0x02
    2974:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    2976:	eb 81       	ldd	r30, Y+3	; 0x03
    2978:	fc 81       	ldd	r31, Y+4	; 0x04
    297a:	11 86       	std	Z+9, r1	; 0x09
    297c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    297e:	e9 81       	ldd	r30, Y+1	; 0x01
    2980:	fa 81       	ldd	r31, Y+2	; 0x02
    2982:	80 81       	ld	r24, Z
    2984:	81 50       	subi	r24, 0x01	; 1
    2986:	e9 81       	ldd	r30, Y+1	; 0x01
    2988:	fa 81       	ldd	r31, Y+2	; 0x02
    298a:	80 83       	st	Z, r24
}
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	cf 91       	pop	r28
    2996:	df 91       	pop	r29
    2998:	08 95       	ret

0000299a <LCDTASK1>:

xSemaphoreHandle LCDsem;


void LCDTASK1(void* ptr)
{
    299a:	df 93       	push	r29
    299c:	cf 93       	push	r28
    299e:	00 d0       	rcall	.+0      	; 0x29a0 <LCDTASK1+0x6>
    29a0:	0f 92       	push	r0
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	9b 83       	std	Y+3, r25	; 0x03
    29a8:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{
		u8 State = xSemaphoreTake(LCDsem, 5);
    29aa:	80 91 03 06 	lds	r24, 0x0603
    29ae:	90 91 04 06 	lds	r25, 0x0604
    29b2:	60 e0       	ldi	r22, 0x00	; 0
    29b4:	70 e0       	ldi	r23, 0x00	; 0
    29b6:	45 e0       	ldi	r20, 0x05	; 5
    29b8:	50 e0       	ldi	r21, 0x00	; 0
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	0e 94 e6 19 	call	0x33cc	; 0x33cc <xQueueGenericReceive>
    29c0:	89 83       	std	Y+1, r24	; 0x01
		if (State== pdPASS)
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	81 30       	cpi	r24, 0x01	; 1
    29c6:	79 f4       	brne	.+30     	; 0x29e6 <LCDTASK1+0x4c>
		{
			LCD_VidSendString("Khalid Mosad");
    29c8:	80 e6       	ldi	r24, 0x60	; 96
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_VidSendString>
			xSemaphoreGive(LCDsem);
    29d0:	80 91 03 06 	lds	r24, 0x0603
    29d4:	90 91 04 06 	lds	r25, 0x0604
    29d8:	60 e0       	ldi	r22, 0x00	; 0
    29da:	70 e0       	ldi	r23, 0x00	; 0
    29dc:	40 e0       	ldi	r20, 0x00	; 0
    29de:	50 e0       	ldi	r21, 0x00	; 0
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <xQueueGenericSend>
		}
		vTaskDelay(1000);
    29e6:	88 ee       	ldi	r24, 0xE8	; 232
    29e8:	93 e0       	ldi	r25, 0x03	; 3
    29ea:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <vTaskDelay>
    29ee:	dd cf       	rjmp	.-70     	; 0x29aa <LCDTASK1+0x10>

000029f0 <LCDTASK2>:
	}
}
void LCDTASK2(void* ptr)
{
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	00 d0       	rcall	.+0      	; 0x29f6 <LCDTASK2+0x6>
    29f6:	0f 92       	push	r0
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	9b 83       	std	Y+3, r25	; 0x03
    29fe:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{
		u8 State = xSemaphoreTake(LCDsem, 5);
    2a00:	80 91 03 06 	lds	r24, 0x0603
    2a04:	90 91 04 06 	lds	r25, 0x0604
    2a08:	60 e0       	ldi	r22, 0x00	; 0
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	45 e0       	ldi	r20, 0x05	; 5
    2a0e:	50 e0       	ldi	r21, 0x00	; 0
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	0e 94 e6 19 	call	0x33cc	; 0x33cc <xQueueGenericReceive>
    2a16:	89 83       	std	Y+1, r24	; 0x01
		if (State== pdPASS)
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	81 30       	cpi	r24, 0x01	; 1
    2a1c:	79 f4       	brne	.+30     	; 0x2a3c <LCDTASK2+0x4c>
		{
			LCD_VidSendString("Zakaria Abdullkader");
    2a1e:	8d e6       	ldi	r24, 0x6D	; 109
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_VidSendString>
			xSemaphoreGive(LCDsem);
    2a26:	80 91 03 06 	lds	r24, 0x0603
    2a2a:	90 91 04 06 	lds	r25, 0x0604
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	70 e0       	ldi	r23, 0x00	; 0
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <xQueueGenericSend>

		}
		vTaskDelay(1000);
    2a3c:	88 ee       	ldi	r24, 0xE8	; 232
    2a3e:	93 e0       	ldi	r25, 0x03	; 3
    2a40:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <vTaskDelay>
    2a44:	dd cf       	rjmp	.-70     	; 0x2a00 <LCDTASK2+0x10>

00002a46 <main>:




int main()
{
    2a46:	af 92       	push	r10
    2a48:	bf 92       	push	r11
    2a4a:	cf 92       	push	r12
    2a4c:	df 92       	push	r13
    2a4e:	ef 92       	push	r14
    2a50:	ff 92       	push	r15
    2a52:	0f 93       	push	r16
    2a54:	df 93       	push	r29
    2a56:	cf 93       	push	r28
    2a58:	cd b7       	in	r28, 0x3d	; 61
    2a5a:	de b7       	in	r29, 0x3e	; 62
	vSemaphoreCreateBinary(LCDsem);
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	60 e0       	ldi	r22, 0x00	; 0
    2a60:	0e 94 52 18 	call	0x30a4	; 0x30a4 <xQueueCreate>
    2a64:	90 93 04 06 	sts	0x0604, r25
    2a68:	80 93 03 06 	sts	0x0603, r24
    2a6c:	80 91 03 06 	lds	r24, 0x0603
    2a70:	90 91 04 06 	lds	r25, 0x0604
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	59 f0       	breq	.+22     	; 0x2a8e <main+0x48>
    2a78:	80 91 03 06 	lds	r24, 0x0603
    2a7c:	90 91 04 06 	lds	r25, 0x0604
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	40 e0       	ldi	r20, 0x00	; 0
    2a86:	50 e0       	ldi	r21, 0x00	; 0
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <xQueueGenericSend>
	LCD_VidInit();
    2a8e:	0e 94 96 09 	call	0x132c	; 0x132c <LCD_VidInit>
	DIO_VidSetPortDirection(1,OUTPUT);
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	61 e0       	ldi	r22, 0x01	; 1
    2a96:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_VidSetPortDirection>
		if(xTaskCreate(LCDTASK1,NULL,250,NULL,5,NULL)==pdPASS)
    2a9a:	8d ec       	ldi	r24, 0xCD	; 205
    2a9c:	94 e1       	ldi	r25, 0x14	; 20
    2a9e:	60 e0       	ldi	r22, 0x00	; 0
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	4a ef       	ldi	r20, 0xFA	; 250
    2aa4:	50 e0       	ldi	r21, 0x00	; 0
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	05 e0       	ldi	r16, 0x05	; 5
    2aac:	ee 24       	eor	r14, r14
    2aae:	ff 24       	eor	r15, r15
    2ab0:	cc 24       	eor	r12, r12
    2ab2:	dd 24       	eor	r13, r13
    2ab4:	aa 24       	eor	r10, r10
    2ab6:	bb 24       	eor	r11, r11
    2ab8:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <xTaskGenericCreate>
    2abc:	81 30       	cpi	r24, 0x01	; 1
    2abe:	29 f4       	brne	.+10     	; 0x2aca <main+0x84>
		{
				DIO_VidSetPinValue(1,PIN6,HIGH);
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	66 e0       	ldi	r22, 0x06	; 6
    2ac4:	41 e0       	ldi	r20, 0x01	; 1
    2ac6:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		}
		if(xTaskCreate(LCDTASK2,NULL,250,NULL,5,NULL)==pdPASS)
    2aca:	88 ef       	ldi	r24, 0xF8	; 248
    2acc:	94 e1       	ldi	r25, 0x14	; 20
    2ace:	60 e0       	ldi	r22, 0x00	; 0
    2ad0:	70 e0       	ldi	r23, 0x00	; 0
    2ad2:	4a ef       	ldi	r20, 0xFA	; 250
    2ad4:	50 e0       	ldi	r21, 0x00	; 0
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	05 e0       	ldi	r16, 0x05	; 5
    2adc:	ee 24       	eor	r14, r14
    2ade:	ff 24       	eor	r15, r15
    2ae0:	cc 24       	eor	r12, r12
    2ae2:	dd 24       	eor	r13, r13
    2ae4:	aa 24       	eor	r10, r10
    2ae6:	bb 24       	eor	r11, r11
    2ae8:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <xTaskGenericCreate>
    2aec:	81 30       	cpi	r24, 0x01	; 1
    2aee:	29 f4       	brne	.+10     	; 0x2afa <main+0xb4>
		{
			DIO_VidSetPinValue(1,PIN7,HIGH);
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	67 e0       	ldi	r22, 0x07	; 7
    2af4:	41 e0       	ldi	r20, 0x01	; 1
    2af6:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		}


	vTaskStartScheduler();
    2afa:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <vTaskStartScheduler>
    2afe:	ff cf       	rjmp	.-2      	; 0x2afe <main+0xb8>

00002b00 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
    2b08:	28 97       	sbiw	r28, 0x08	; 8
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	f8 94       	cli
    2b0e:	de bf       	out	0x3e, r29	; 62
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	cd bf       	out	0x3d, r28	; 61
    2b14:	9c 83       	std	Y+4, r25	; 0x04
    2b16:	8b 83       	std	Y+3, r24	; 0x03
    2b18:	7e 83       	std	Y+6, r23	; 0x06
    2b1a:	6d 83       	std	Y+5, r22	; 0x05
    2b1c:	58 87       	std	Y+8, r21	; 0x08
    2b1e:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2b20:	eb 81       	ldd	r30, Y+3	; 0x03
    2b22:	fc 81       	ldd	r31, Y+4	; 0x04
    2b24:	81 e1       	ldi	r24, 0x11	; 17
    2b26:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	9c 83       	std	Y+4, r25	; 0x04
    2b30:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    2b32:	eb 81       	ldd	r30, Y+3	; 0x03
    2b34:	fc 81       	ldd	r31, Y+4	; 0x04
    2b36:	82 e2       	ldi	r24, 0x22	; 34
    2b38:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	9c 83       	std	Y+4, r25	; 0x04
    2b42:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    2b44:	eb 81       	ldd	r30, Y+3	; 0x03
    2b46:	fc 81       	ldd	r31, Y+4	; 0x04
    2b48:	83 e3       	ldi	r24, 0x33	; 51
    2b4a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b50:	01 97       	sbiw	r24, 0x01	; 1
    2b52:	9c 83       	std	Y+4, r25	; 0x04
    2b54:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    2b56:	8d 81       	ldd	r24, Y+5	; 0x05
    2b58:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5a:	9a 83       	std	Y+2, r25	; 0x02
    2b5c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	eb 81       	ldd	r30, Y+3	; 0x03
    2b62:	fc 81       	ldd	r31, Y+4	; 0x04
    2b64:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b66:	8b 81       	ldd	r24, Y+3	; 0x03
    2b68:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	9c 83       	std	Y+4, r25	; 0x04
    2b6e:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	9a 81       	ldd	r25, Y+2	; 0x02
    2b74:	89 2f       	mov	r24, r25
    2b76:	99 27       	eor	r25, r25
    2b78:	9a 83       	std	Y+2, r25	; 0x02
    2b7a:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b80:	fc 81       	ldd	r31, Y+4	; 0x04
    2b82:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	9c 81       	ldd	r25, Y+4	; 0x04
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	9c 83       	std	Y+4, r25	; 0x04
    2b8c:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    2b8e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b90:	fc 81       	ldd	r31, Y+4	; 0x04
    2b92:	10 82       	st	Z, r1
	pxTopOfStack--;
    2b94:	8b 81       	ldd	r24, Y+3	; 0x03
    2b96:	9c 81       	ldd	r25, Y+4	; 0x04
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	9c 83       	std	Y+4, r25	; 0x04
    2b9c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    2b9e:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ba2:	80 e8       	ldi	r24, 0x80	; 128
    2ba4:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	9c 83       	std	Y+4, r25	; 0x04
    2bae:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    2bb0:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb2:	fc 81       	ldd	r31, Y+4	; 0x04
    2bb4:	10 82       	st	Z, r1
	pxTopOfStack--;
    2bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	9c 83       	std	Y+4, r25	; 0x04
    2bbe:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    2bc0:	eb 81       	ldd	r30, Y+3	; 0x03
    2bc2:	fc 81       	ldd	r31, Y+4	; 0x04
    2bc4:	82 e0       	ldi	r24, 0x02	; 2
    2bc6:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	9c 81       	ldd	r25, Y+4	; 0x04
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	9c 83       	std	Y+4, r25	; 0x04
    2bd0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    2bd2:	eb 81       	ldd	r30, Y+3	; 0x03
    2bd4:	fc 81       	ldd	r31, Y+4	; 0x04
    2bd6:	83 e0       	ldi	r24, 0x03	; 3
    2bd8:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	9c 83       	std	Y+4, r25	; 0x04
    2be2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    2be4:	eb 81       	ldd	r30, Y+3	; 0x03
    2be6:	fc 81       	ldd	r31, Y+4	; 0x04
    2be8:	84 e0       	ldi	r24, 0x04	; 4
    2bea:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	9c 83       	std	Y+4, r25	; 0x04
    2bf4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    2bf6:	eb 81       	ldd	r30, Y+3	; 0x03
    2bf8:	fc 81       	ldd	r31, Y+4	; 0x04
    2bfa:	85 e0       	ldi	r24, 0x05	; 5
    2bfc:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2c00:	9c 81       	ldd	r25, Y+4	; 0x04
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	9c 83       	std	Y+4, r25	; 0x04
    2c06:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    2c08:	eb 81       	ldd	r30, Y+3	; 0x03
    2c0a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c0c:	86 e0       	ldi	r24, 0x06	; 6
    2c0e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	9c 81       	ldd	r25, Y+4	; 0x04
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	9c 83       	std	Y+4, r25	; 0x04
    2c18:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    2c1a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c1c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c1e:	87 e0       	ldi	r24, 0x07	; 7
    2c20:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c22:	8b 81       	ldd	r24, Y+3	; 0x03
    2c24:	9c 81       	ldd	r25, Y+4	; 0x04
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	9c 83       	std	Y+4, r25	; 0x04
    2c2a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    2c2c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c2e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c30:	88 e0       	ldi	r24, 0x08	; 8
    2c32:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c34:	8b 81       	ldd	r24, Y+3	; 0x03
    2c36:	9c 81       	ldd	r25, Y+4	; 0x04
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	9c 83       	std	Y+4, r25	; 0x04
    2c3c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    2c3e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c40:	fc 81       	ldd	r31, Y+4	; 0x04
    2c42:	89 e0       	ldi	r24, 0x09	; 9
    2c44:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	9c 83       	std	Y+4, r25	; 0x04
    2c4e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    2c50:	eb 81       	ldd	r30, Y+3	; 0x03
    2c52:	fc 81       	ldd	r31, Y+4	; 0x04
    2c54:	80 e1       	ldi	r24, 0x10	; 16
    2c56:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	9c 83       	std	Y+4, r25	; 0x04
    2c60:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    2c62:	eb 81       	ldd	r30, Y+3	; 0x03
    2c64:	fc 81       	ldd	r31, Y+4	; 0x04
    2c66:	81 e1       	ldi	r24, 0x11	; 17
    2c68:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	9c 83       	std	Y+4, r25	; 0x04
    2c72:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    2c74:	eb 81       	ldd	r30, Y+3	; 0x03
    2c76:	fc 81       	ldd	r31, Y+4	; 0x04
    2c78:	82 e1       	ldi	r24, 0x12	; 18
    2c7a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	9c 83       	std	Y+4, r25	; 0x04
    2c84:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    2c86:	eb 81       	ldd	r30, Y+3	; 0x03
    2c88:	fc 81       	ldd	r31, Y+4	; 0x04
    2c8a:	83 e1       	ldi	r24, 0x13	; 19
    2c8c:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c90:	9c 81       	ldd	r25, Y+4	; 0x04
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	9c 83       	std	Y+4, r25	; 0x04
    2c96:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    2c98:	eb 81       	ldd	r30, Y+3	; 0x03
    2c9a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c9c:	84 e1       	ldi	r24, 0x14	; 20
    2c9e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	9c 83       	std	Y+4, r25	; 0x04
    2ca8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    2caa:	eb 81       	ldd	r30, Y+3	; 0x03
    2cac:	fc 81       	ldd	r31, Y+4	; 0x04
    2cae:	85 e1       	ldi	r24, 0x15	; 21
    2cb0:	80 83       	st	Z, r24
	pxTopOfStack--;
    2cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	9c 83       	std	Y+4, r25	; 0x04
    2cba:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    2cbc:	eb 81       	ldd	r30, Y+3	; 0x03
    2cbe:	fc 81       	ldd	r31, Y+4	; 0x04
    2cc0:	86 e1       	ldi	r24, 0x16	; 22
    2cc2:	80 83       	st	Z, r24
	pxTopOfStack--;
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	9c 83       	std	Y+4, r25	; 0x04
    2ccc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    2cce:	eb 81       	ldd	r30, Y+3	; 0x03
    2cd0:	fc 81       	ldd	r31, Y+4	; 0x04
    2cd2:	87 e1       	ldi	r24, 0x17	; 23
    2cd4:	80 83       	st	Z, r24
	pxTopOfStack--;
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	9c 83       	std	Y+4, r25	; 0x04
    2cde:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    2ce0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ce2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ce4:	88 e1       	ldi	r24, 0x18	; 24
    2ce6:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	9c 81       	ldd	r25, Y+4	; 0x04
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	9c 83       	std	Y+4, r25	; 0x04
    2cf0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    2cf2:	eb 81       	ldd	r30, Y+3	; 0x03
    2cf4:	fc 81       	ldd	r31, Y+4	; 0x04
    2cf6:	89 e1       	ldi	r24, 0x19	; 25
    2cf8:	80 83       	st	Z, r24
	pxTopOfStack--;
    2cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	9c 83       	std	Y+4, r25	; 0x04
    2d02:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    2d04:	eb 81       	ldd	r30, Y+3	; 0x03
    2d06:	fc 81       	ldd	r31, Y+4	; 0x04
    2d08:	80 e2       	ldi	r24, 0x20	; 32
    2d0a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	9c 83       	std	Y+4, r25	; 0x04
    2d14:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    2d16:	eb 81       	ldd	r30, Y+3	; 0x03
    2d18:	fc 81       	ldd	r31, Y+4	; 0x04
    2d1a:	81 e2       	ldi	r24, 0x21	; 33
    2d1c:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d20:	9c 81       	ldd	r25, Y+4	; 0x04
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	9c 83       	std	Y+4, r25	; 0x04
    2d26:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    2d28:	eb 81       	ldd	r30, Y+3	; 0x03
    2d2a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d2c:	82 e2       	ldi	r24, 0x22	; 34
    2d2e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	9c 81       	ldd	r25, Y+4	; 0x04
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	9c 83       	std	Y+4, r25	; 0x04
    2d38:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    2d3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d3e:	83 e2       	ldi	r24, 0x23	; 35
    2d40:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d42:	8b 81       	ldd	r24, Y+3	; 0x03
    2d44:	9c 81       	ldd	r25, Y+4	; 0x04
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	9c 83       	std	Y+4, r25	; 0x04
    2d4a:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    2d4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2d4e:	98 85       	ldd	r25, Y+8	; 0x08
    2d50:	9a 83       	std	Y+2, r25	; 0x02
    2d52:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	eb 81       	ldd	r30, Y+3	; 0x03
    2d58:	fc 81       	ldd	r31, Y+4	; 0x04
    2d5a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	9c 83       	std	Y+4, r25	; 0x04
    2d64:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6a:	89 2f       	mov	r24, r25
    2d6c:	99 27       	eor	r25, r25
    2d6e:	9a 83       	std	Y+2, r25	; 0x02
    2d70:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	eb 81       	ldd	r30, Y+3	; 0x03
    2d76:	fc 81       	ldd	r31, Y+4	; 0x04
    2d78:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	9c 83       	std	Y+4, r25	; 0x04
    2d82:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    2d84:	eb 81       	ldd	r30, Y+3	; 0x03
    2d86:	fc 81       	ldd	r31, Y+4	; 0x04
    2d88:	86 e2       	ldi	r24, 0x26	; 38
    2d8a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	9c 83       	std	Y+4, r25	; 0x04
    2d94:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    2d96:	eb 81       	ldd	r30, Y+3	; 0x03
    2d98:	fc 81       	ldd	r31, Y+4	; 0x04
    2d9a:	87 e2       	ldi	r24, 0x27	; 39
    2d9c:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	9c 81       	ldd	r25, Y+4	; 0x04
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	9c 83       	std	Y+4, r25	; 0x04
    2da6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    2da8:	eb 81       	ldd	r30, Y+3	; 0x03
    2daa:	fc 81       	ldd	r31, Y+4	; 0x04
    2dac:	88 e2       	ldi	r24, 0x28	; 40
    2dae:	80 83       	st	Z, r24
	pxTopOfStack--;
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	9c 81       	ldd	r25, Y+4	; 0x04
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	9c 83       	std	Y+4, r25	; 0x04
    2db8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    2dba:	eb 81       	ldd	r30, Y+3	; 0x03
    2dbc:	fc 81       	ldd	r31, Y+4	; 0x04
    2dbe:	89 e2       	ldi	r24, 0x29	; 41
    2dc0:	80 83       	st	Z, r24
	pxTopOfStack--;
    2dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	9c 83       	std	Y+4, r25	; 0x04
    2dca:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    2dcc:	eb 81       	ldd	r30, Y+3	; 0x03
    2dce:	fc 81       	ldd	r31, Y+4	; 0x04
    2dd0:	80 e3       	ldi	r24, 0x30	; 48
    2dd2:	80 83       	st	Z, r24
	pxTopOfStack--;
    2dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	9c 83       	std	Y+4, r25	; 0x04
    2ddc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    2dde:	eb 81       	ldd	r30, Y+3	; 0x03
    2de0:	fc 81       	ldd	r31, Y+4	; 0x04
    2de2:	81 e3       	ldi	r24, 0x31	; 49
    2de4:	80 83       	st	Z, r24
	pxTopOfStack--;
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	9c 83       	std	Y+4, r25	; 0x04
    2dee:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2df4:	28 96       	adiw	r28, 0x08	; 8
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	de bf       	out	0x3e, r29	; 62
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	cd bf       	out	0x3d, r28	; 61
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	08 95       	ret

00002e06 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    2e06:	df 93       	push	r29
    2e08:	cf 93       	push	r28
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    2e0e:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    2e12:	a0 91 7c 05 	lds	r26, 0x057C
    2e16:	b0 91 7d 05 	lds	r27, 0x057D
    2e1a:	cd 91       	ld	r28, X+
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	dd 91       	ld	r29, X+
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	ff 91       	pop	r31
    2e24:	ef 91       	pop	r30
    2e26:	df 91       	pop	r29
    2e28:	cf 91       	pop	r28
    2e2a:	bf 91       	pop	r27
    2e2c:	af 91       	pop	r26
    2e2e:	9f 91       	pop	r25
    2e30:	8f 91       	pop	r24
    2e32:	7f 91       	pop	r23
    2e34:	6f 91       	pop	r22
    2e36:	5f 91       	pop	r21
    2e38:	4f 91       	pop	r20
    2e3a:	3f 91       	pop	r19
    2e3c:	2f 91       	pop	r18
    2e3e:	1f 91       	pop	r17
    2e40:	0f 91       	pop	r16
    2e42:	ff 90       	pop	r15
    2e44:	ef 90       	pop	r14
    2e46:	df 90       	pop	r13
    2e48:	cf 90       	pop	r12
    2e4a:	bf 90       	pop	r11
    2e4c:	af 90       	pop	r10
    2e4e:	9f 90       	pop	r9
    2e50:	8f 90       	pop	r8
    2e52:	7f 90       	pop	r7
    2e54:	6f 90       	pop	r6
    2e56:	5f 90       	pop	r5
    2e58:	4f 90       	pop	r4
    2e5a:	3f 90       	pop	r3
    2e5c:	2f 90       	pop	r2
    2e5e:	1f 90       	pop	r1
    2e60:	0f 90       	pop	r0
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    2e66:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    2e68:	81 e0       	ldi	r24, 0x01	; 1
}
    2e6a:	cf 91       	pop	r28
    2e6c:	df 91       	pop	r29
    2e6e:	08 95       	ret

00002e70 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2e70:	df 93       	push	r29
    2e72:	cf 93       	push	r28
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2e78:	cf 91       	pop	r28
    2e7a:	df 91       	pop	r29
    2e7c:	08 95       	ret

00002e7e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2e7e:	0f 92       	push	r0
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	0f 92       	push	r0
    2e86:	1f 92       	push	r1
    2e88:	11 24       	eor	r1, r1
    2e8a:	2f 92       	push	r2
    2e8c:	3f 92       	push	r3
    2e8e:	4f 92       	push	r4
    2e90:	5f 92       	push	r5
    2e92:	6f 92       	push	r6
    2e94:	7f 92       	push	r7
    2e96:	8f 92       	push	r8
    2e98:	9f 92       	push	r9
    2e9a:	af 92       	push	r10
    2e9c:	bf 92       	push	r11
    2e9e:	cf 92       	push	r12
    2ea0:	df 92       	push	r13
    2ea2:	ef 92       	push	r14
    2ea4:	ff 92       	push	r15
    2ea6:	0f 93       	push	r16
    2ea8:	1f 93       	push	r17
    2eaa:	2f 93       	push	r18
    2eac:	3f 93       	push	r19
    2eae:	4f 93       	push	r20
    2eb0:	5f 93       	push	r21
    2eb2:	6f 93       	push	r22
    2eb4:	7f 93       	push	r23
    2eb6:	8f 93       	push	r24
    2eb8:	9f 93       	push	r25
    2eba:	af 93       	push	r26
    2ebc:	bf 93       	push	r27
    2ebe:	cf 93       	push	r28
    2ec0:	df 93       	push	r29
    2ec2:	ef 93       	push	r30
    2ec4:	ff 93       	push	r31
    2ec6:	a0 91 7c 05 	lds	r26, 0x057C
    2eca:	b0 91 7d 05 	lds	r27, 0x057D
    2ece:	0d b6       	in	r0, 0x3d	; 61
    2ed0:	0d 92       	st	X+, r0
    2ed2:	0e b6       	in	r0, 0x3e	; 62
    2ed4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2ed6:	0e 94 af 20 	call	0x415e	; 0x415e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2eda:	a0 91 7c 05 	lds	r26, 0x057C
    2ede:	b0 91 7d 05 	lds	r27, 0x057D
    2ee2:	cd 91       	ld	r28, X+
    2ee4:	cd bf       	out	0x3d, r28	; 61
    2ee6:	dd 91       	ld	r29, X+
    2ee8:	de bf       	out	0x3e, r29	; 62
    2eea:	ff 91       	pop	r31
    2eec:	ef 91       	pop	r30
    2eee:	df 91       	pop	r29
    2ef0:	cf 91       	pop	r28
    2ef2:	bf 91       	pop	r27
    2ef4:	af 91       	pop	r26
    2ef6:	9f 91       	pop	r25
    2ef8:	8f 91       	pop	r24
    2efa:	7f 91       	pop	r23
    2efc:	6f 91       	pop	r22
    2efe:	5f 91       	pop	r21
    2f00:	4f 91       	pop	r20
    2f02:	3f 91       	pop	r19
    2f04:	2f 91       	pop	r18
    2f06:	1f 91       	pop	r17
    2f08:	0f 91       	pop	r16
    2f0a:	ff 90       	pop	r15
    2f0c:	ef 90       	pop	r14
    2f0e:	df 90       	pop	r13
    2f10:	cf 90       	pop	r12
    2f12:	bf 90       	pop	r11
    2f14:	af 90       	pop	r10
    2f16:	9f 90       	pop	r9
    2f18:	8f 90       	pop	r8
    2f1a:	7f 90       	pop	r7
    2f1c:	6f 90       	pop	r6
    2f1e:	5f 90       	pop	r5
    2f20:	4f 90       	pop	r4
    2f22:	3f 90       	pop	r3
    2f24:	2f 90       	pop	r2
    2f26:	1f 90       	pop	r1
    2f28:	0f 90       	pop	r0
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2f2e:	08 95       	ret

00002f30 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2f30:	0f 92       	push	r0
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	0f 92       	push	r0
    2f38:	1f 92       	push	r1
    2f3a:	11 24       	eor	r1, r1
    2f3c:	2f 92       	push	r2
    2f3e:	3f 92       	push	r3
    2f40:	4f 92       	push	r4
    2f42:	5f 92       	push	r5
    2f44:	6f 92       	push	r6
    2f46:	7f 92       	push	r7
    2f48:	8f 92       	push	r8
    2f4a:	9f 92       	push	r9
    2f4c:	af 92       	push	r10
    2f4e:	bf 92       	push	r11
    2f50:	cf 92       	push	r12
    2f52:	df 92       	push	r13
    2f54:	ef 92       	push	r14
    2f56:	ff 92       	push	r15
    2f58:	0f 93       	push	r16
    2f5a:	1f 93       	push	r17
    2f5c:	2f 93       	push	r18
    2f5e:	3f 93       	push	r19
    2f60:	4f 93       	push	r20
    2f62:	5f 93       	push	r21
    2f64:	6f 93       	push	r22
    2f66:	7f 93       	push	r23
    2f68:	8f 93       	push	r24
    2f6a:	9f 93       	push	r25
    2f6c:	af 93       	push	r26
    2f6e:	bf 93       	push	r27
    2f70:	cf 93       	push	r28
    2f72:	df 93       	push	r29
    2f74:	ef 93       	push	r30
    2f76:	ff 93       	push	r31
    2f78:	a0 91 7c 05 	lds	r26, 0x057C
    2f7c:	b0 91 7d 05 	lds	r27, 0x057D
    2f80:	0d b6       	in	r0, 0x3d	; 61
    2f82:	0d 92       	st	X+, r0
    2f84:	0e b6       	in	r0, 0x3e	; 62
    2f86:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    2f88:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <vTaskIncrementTick>
	vTaskSwitchContext();
    2f8c:	0e 94 af 20 	call	0x415e	; 0x415e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2f90:	a0 91 7c 05 	lds	r26, 0x057C
    2f94:	b0 91 7d 05 	lds	r27, 0x057D
    2f98:	cd 91       	ld	r28, X+
    2f9a:	cd bf       	out	0x3d, r28	; 61
    2f9c:	dd 91       	ld	r29, X+
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	ff 91       	pop	r31
    2fa2:	ef 91       	pop	r30
    2fa4:	df 91       	pop	r29
    2fa6:	cf 91       	pop	r28
    2fa8:	bf 91       	pop	r27
    2faa:	af 91       	pop	r26
    2fac:	9f 91       	pop	r25
    2fae:	8f 91       	pop	r24
    2fb0:	7f 91       	pop	r23
    2fb2:	6f 91       	pop	r22
    2fb4:	5f 91       	pop	r21
    2fb6:	4f 91       	pop	r20
    2fb8:	3f 91       	pop	r19
    2fba:	2f 91       	pop	r18
    2fbc:	1f 91       	pop	r17
    2fbe:	0f 91       	pop	r16
    2fc0:	ff 90       	pop	r15
    2fc2:	ef 90       	pop	r14
    2fc4:	df 90       	pop	r13
    2fc6:	cf 90       	pop	r12
    2fc8:	bf 90       	pop	r11
    2fca:	af 90       	pop	r10
    2fcc:	9f 90       	pop	r9
    2fce:	8f 90       	pop	r8
    2fd0:	7f 90       	pop	r7
    2fd2:	6f 90       	pop	r6
    2fd4:	5f 90       	pop	r5
    2fd6:	4f 90       	pop	r4
    2fd8:	3f 90       	pop	r3
    2fda:	2f 90       	pop	r2
    2fdc:	1f 90       	pop	r1
    2fde:	0f 90       	pop	r0
    2fe0:	0f be       	out	0x3f, r0	; 63
    2fe2:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2fe4:	08 95       	ret

00002fe6 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    2fe6:	df 93       	push	r29
    2fe8:	cf 93       	push	r28
    2fea:	00 d0       	rcall	.+0      	; 0x2fec <prvSetupTimerInterrupt+0x6>
    2fec:	00 d0       	rcall	.+0      	; 0x2fee <prvSetupTimerInterrupt+0x8>
    2fee:	00 d0       	rcall	.+0      	; 0x2ff0 <prvSetupTimerInterrupt+0xa>
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    2ff4:	80 e4       	ldi	r24, 0x40	; 64
    2ff6:	9f e1       	ldi	r25, 0x1F	; 31
    2ff8:	a0 e0       	ldi	r26, 0x00	; 0
    2ffa:	b0 e0       	ldi	r27, 0x00	; 0
    2ffc:	8b 83       	std	Y+3, r24	; 0x03
    2ffe:	9c 83       	std	Y+4, r25	; 0x04
    3000:	ad 83       	std	Y+5, r26	; 0x05
    3002:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    3004:	8b 81       	ldd	r24, Y+3	; 0x03
    3006:	9c 81       	ldd	r25, Y+4	; 0x04
    3008:	ad 81       	ldd	r26, Y+5	; 0x05
    300a:	be 81       	ldd	r27, Y+6	; 0x06
    300c:	68 94       	set
    300e:	15 f8       	bld	r1, 5
    3010:	b6 95       	lsr	r27
    3012:	a7 95       	ror	r26
    3014:	97 95       	ror	r25
    3016:	87 95       	ror	r24
    3018:	16 94       	lsr	r1
    301a:	d1 f7       	brne	.-12     	; 0x3010 <prvSetupTimerInterrupt+0x2a>
    301c:	8b 83       	std	Y+3, r24	; 0x03
    301e:	9c 83       	std	Y+4, r25	; 0x04
    3020:	ad 83       	std	Y+5, r26	; 0x05
    3022:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    3024:	8b 81       	ldd	r24, Y+3	; 0x03
    3026:	9c 81       	ldd	r25, Y+4	; 0x04
    3028:	ad 81       	ldd	r26, Y+5	; 0x05
    302a:	be 81       	ldd	r27, Y+6	; 0x06
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	a1 09       	sbc	r26, r1
    3030:	b1 09       	sbc	r27, r1
    3032:	8b 83       	std	Y+3, r24	; 0x03
    3034:	9c 83       	std	Y+4, r25	; 0x04
    3036:	ad 83       	std	Y+5, r26	; 0x05
    3038:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    303a:	8b 81       	ldd	r24, Y+3	; 0x03
    303c:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    303e:	8b 81       	ldd	r24, Y+3	; 0x03
    3040:	9c 81       	ldd	r25, Y+4	; 0x04
    3042:	ad 81       	ldd	r26, Y+5	; 0x05
    3044:	be 81       	ldd	r27, Y+6	; 0x06
    3046:	89 2f       	mov	r24, r25
    3048:	9a 2f       	mov	r25, r26
    304a:	ab 2f       	mov	r26, r27
    304c:	bb 27       	eor	r27, r27
    304e:	8b 83       	std	Y+3, r24	; 0x03
    3050:	9c 83       	std	Y+4, r25	; 0x04
    3052:	ad 83       	std	Y+5, r26	; 0x05
    3054:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    3056:	8b 81       	ldd	r24, Y+3	; 0x03
    3058:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    305a:	eb e4       	ldi	r30, 0x4B	; 75
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	8a 81       	ldd	r24, Y+2	; 0x02
    3060:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    3062:	ea e4       	ldi	r30, 0x4A	; 74
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	89 81       	ldd	r24, Y+1	; 0x01
    3068:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    306a:	8b e0       	ldi	r24, 0x0B	; 11
    306c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    306e:	ee e4       	ldi	r30, 0x4E	; 78
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    3076:	e9 e5       	ldi	r30, 0x59	; 89
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	80 81       	ld	r24, Z
    307c:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	80 61       	ori	r24, 0x10	; 16
    3082:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    3084:	e9 e5       	ldi	r30, 0x59	; 89
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	80 83       	st	Z, r24
}
    308c:	26 96       	adiw	r28, 0x06	; 6
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	f8 94       	cli
    3092:	de bf       	out	0x3e, r29	; 62
    3094:	0f be       	out	0x3f, r0	; 63
    3096:	cd bf       	out	0x3d, r28	; 61
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	08 95       	ret

0000309e <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    309e:	0e 94 98 17 	call	0x2f30	; 0x2f30 <vPortYieldFromTick>
		asm volatile ( "reti" );
    30a2:	18 95       	reti

000030a4 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    30a4:	df 93       	push	r29
    30a6:	cf 93       	push	r28
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
    30ac:	28 97       	sbiw	r28, 0x08	; 8
    30ae:	0f b6       	in	r0, 0x3f	; 63
    30b0:	f8 94       	cli
    30b2:	de bf       	out	0x3e, r29	; 62
    30b4:	0f be       	out	0x3f, r0	; 63
    30b6:	cd bf       	out	0x3d, r28	; 61
    30b8:	8f 83       	std	Y+7, r24	; 0x07
    30ba:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    30bc:	1a 82       	std	Y+2, r1	; 0x02
    30be:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    30c0:	8f 81       	ldd	r24, Y+7	; 0x07
    30c2:	88 23       	and	r24, r24
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <xQueueCreate+0x24>
    30c6:	8c c0       	rjmp	.+280    	; 0x31e0 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    30c8:	8f e1       	ldi	r24, 0x1F	; 31
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	0e 94 26 13 	call	0x264c	; 0x264c <pvPortMalloc>
    30d0:	9e 83       	std	Y+6, r25	; 0x06
    30d2:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    30d4:	8d 81       	ldd	r24, Y+5	; 0x05
    30d6:	9e 81       	ldd	r25, Y+6	; 0x06
    30d8:	00 97       	sbiw	r24, 0x00	; 0
    30da:	09 f4       	brne	.+2      	; 0x30de <xQueueCreate+0x3a>
    30dc:	81 c0       	rjmp	.+258    	; 0x31e0 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    30de:	8f 81       	ldd	r24, Y+7	; 0x07
    30e0:	28 2f       	mov	r18, r24
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	88 85       	ldd	r24, Y+8	; 0x08
    30e6:	88 2f       	mov	r24, r24
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	ac 01       	movw	r20, r24
    30ec:	24 9f       	mul	r18, r20
    30ee:	c0 01       	movw	r24, r0
    30f0:	25 9f       	mul	r18, r21
    30f2:	90 0d       	add	r25, r0
    30f4:	34 9f       	mul	r19, r20
    30f6:	90 0d       	add	r25, r0
    30f8:	11 24       	eor	r1, r1
    30fa:	01 96       	adiw	r24, 0x01	; 1
    30fc:	9c 83       	std	Y+4, r25	; 0x04
    30fe:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    3100:	8b 81       	ldd	r24, Y+3	; 0x03
    3102:	9c 81       	ldd	r25, Y+4	; 0x04
    3104:	0e 94 26 13 	call	0x264c	; 0x264c <pvPortMalloc>
    3108:	ed 81       	ldd	r30, Y+5	; 0x05
    310a:	fe 81       	ldd	r31, Y+6	; 0x06
    310c:	91 83       	std	Z+1, r25	; 0x01
    310e:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    3110:	ed 81       	ldd	r30, Y+5	; 0x05
    3112:	fe 81       	ldd	r31, Y+6	; 0x06
    3114:	80 81       	ld	r24, Z
    3116:	91 81       	ldd	r25, Z+1	; 0x01
    3118:	00 97       	sbiw	r24, 0x00	; 0
    311a:	09 f4       	brne	.+2      	; 0x311e <xQueueCreate+0x7a>
    311c:	5d c0       	rjmp	.+186    	; 0x31d8 <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    311e:	ed 81       	ldd	r30, Y+5	; 0x05
    3120:	fe 81       	ldd	r31, Y+6	; 0x06
    3122:	40 81       	ld	r20, Z
    3124:	51 81       	ldd	r21, Z+1	; 0x01
    3126:	8f 81       	ldd	r24, Y+7	; 0x07
    3128:	28 2f       	mov	r18, r24
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	88 85       	ldd	r24, Y+8	; 0x08
    312e:	88 2f       	mov	r24, r24
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	bc 01       	movw	r22, r24
    3134:	26 9f       	mul	r18, r22
    3136:	c0 01       	movw	r24, r0
    3138:	27 9f       	mul	r18, r23
    313a:	90 0d       	add	r25, r0
    313c:	36 9f       	mul	r19, r22
    313e:	90 0d       	add	r25, r0
    3140:	11 24       	eor	r1, r1
    3142:	84 0f       	add	r24, r20
    3144:	95 1f       	adc	r25, r21
    3146:	ed 81       	ldd	r30, Y+5	; 0x05
    3148:	fe 81       	ldd	r31, Y+6	; 0x06
    314a:	93 83       	std	Z+3, r25	; 0x03
    314c:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    314e:	ed 81       	ldd	r30, Y+5	; 0x05
    3150:	fe 81       	ldd	r31, Y+6	; 0x06
    3152:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    3154:	ed 81       	ldd	r30, Y+5	; 0x05
    3156:	fe 81       	ldd	r31, Y+6	; 0x06
    3158:	80 81       	ld	r24, Z
    315a:	91 81       	ldd	r25, Z+1	; 0x01
    315c:	ed 81       	ldd	r30, Y+5	; 0x05
    315e:	fe 81       	ldd	r31, Y+6	; 0x06
    3160:	95 83       	std	Z+5, r25	; 0x05
    3162:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    3164:	ed 81       	ldd	r30, Y+5	; 0x05
    3166:	fe 81       	ldd	r31, Y+6	; 0x06
    3168:	40 81       	ld	r20, Z
    316a:	51 81       	ldd	r21, Z+1	; 0x01
    316c:	8f 81       	ldd	r24, Y+7	; 0x07
    316e:	88 2f       	mov	r24, r24
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	9c 01       	movw	r18, r24
    3174:	21 50       	subi	r18, 0x01	; 1
    3176:	30 40       	sbci	r19, 0x00	; 0
    3178:	88 85       	ldd	r24, Y+8	; 0x08
    317a:	88 2f       	mov	r24, r24
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	bc 01       	movw	r22, r24
    3180:	26 9f       	mul	r18, r22
    3182:	c0 01       	movw	r24, r0
    3184:	27 9f       	mul	r18, r23
    3186:	90 0d       	add	r25, r0
    3188:	36 9f       	mul	r19, r22
    318a:	90 0d       	add	r25, r0
    318c:	11 24       	eor	r1, r1
    318e:	84 0f       	add	r24, r20
    3190:	95 1f       	adc	r25, r21
    3192:	ed 81       	ldd	r30, Y+5	; 0x05
    3194:	fe 81       	ldd	r31, Y+6	; 0x06
    3196:	97 83       	std	Z+7, r25	; 0x07
    3198:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    319a:	ed 81       	ldd	r30, Y+5	; 0x05
    319c:	fe 81       	ldd	r31, Y+6	; 0x06
    319e:	8f 81       	ldd	r24, Y+7	; 0x07
    31a0:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    31a2:	ed 81       	ldd	r30, Y+5	; 0x05
    31a4:	fe 81       	ldd	r31, Y+6	; 0x06
    31a6:	88 85       	ldd	r24, Y+8	; 0x08
    31a8:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    31aa:	ed 81       	ldd	r30, Y+5	; 0x05
    31ac:	fe 81       	ldd	r31, Y+6	; 0x06
    31ae:	8f ef       	ldi	r24, 0xFF	; 255
    31b0:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    31b2:	ed 81       	ldd	r30, Y+5	; 0x05
    31b4:	fe 81       	ldd	r31, Y+6	; 0x06
    31b6:	8f ef       	ldi	r24, 0xFF	; 255
    31b8:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    31ba:	8d 81       	ldd	r24, Y+5	; 0x05
    31bc:	9e 81       	ldd	r25, Y+6	; 0x06
    31be:	08 96       	adiw	r24, 0x08	; 8
    31c0:	0e 94 92 13 	call	0x2724	; 0x2724 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    31c4:	8d 81       	ldd	r24, Y+5	; 0x05
    31c6:	9e 81       	ldd	r25, Y+6	; 0x06
    31c8:	41 96       	adiw	r24, 0x11	; 17
    31ca:	0e 94 92 13 	call	0x2724	; 0x2724 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    31ce:	8d 81       	ldd	r24, Y+5	; 0x05
    31d0:	9e 81       	ldd	r25, Y+6	; 0x06
    31d2:	9a 83       	std	Y+2, r25	; 0x02
    31d4:	89 83       	std	Y+1, r24	; 0x01
    31d6:	04 c0       	rjmp	.+8      	; 0x31e0 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    31d8:	8d 81       	ldd	r24, Y+5	; 0x05
    31da:	9e 81       	ldd	r25, Y+6	; 0x06
    31dc:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    31e4:	28 96       	adiw	r28, 0x08	; 8
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	cf 91       	pop	r28
    31f2:	df 91       	pop	r29
    31f4:	08 95       	ret

000031f6 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    31f6:	df 93       	push	r29
    31f8:	cf 93       	push	r28
    31fa:	cd b7       	in	r28, 0x3d	; 61
    31fc:	de b7       	in	r29, 0x3e	; 62
    31fe:	2c 97       	sbiw	r28, 0x0c	; 12
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61
    320a:	9e 83       	std	Y+6, r25	; 0x06
    320c:	8d 83       	std	Y+5, r24	; 0x05
    320e:	78 87       	std	Y+8, r23	; 0x08
    3210:	6f 83       	std	Y+7, r22	; 0x07
    3212:	5a 87       	std	Y+10, r21	; 0x0a
    3214:	49 87       	std	Y+9, r20	; 0x09
    3216:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3218:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3220:	ed 81       	ldd	r30, Y+5	; 0x05
    3222:	fe 81       	ldd	r31, Y+6	; 0x06
    3224:	92 8d       	ldd	r25, Z+26	; 0x1a
    3226:	ed 81       	ldd	r30, Y+5	; 0x05
    3228:	fe 81       	ldd	r31, Y+6	; 0x06
    322a:	83 8d       	ldd	r24, Z+27	; 0x1b
    322c:	98 17       	cp	r25, r24
    322e:	d8 f4       	brcc	.+54     	; 0x3266 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3230:	8d 81       	ldd	r24, Y+5	; 0x05
    3232:	9e 81       	ldd	r25, Y+6	; 0x06
    3234:	2f 81       	ldd	r18, Y+7	; 0x07
    3236:	38 85       	ldd	r19, Y+8	; 0x08
    3238:	b9 01       	movw	r22, r18
    323a:	4b 85       	ldd	r20, Y+11	; 0x0b
    323c:	0e 94 36 1b 	call	0x366c	; 0x366c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3240:	ed 81       	ldd	r30, Y+5	; 0x05
    3242:	fe 81       	ldd	r31, Y+6	; 0x06
    3244:	81 89       	ldd	r24, Z+17	; 0x11
    3246:	88 23       	and	r24, r24
    3248:	49 f0       	breq	.+18     	; 0x325c <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    324a:	8d 81       	ldd	r24, Y+5	; 0x05
    324c:	9e 81       	ldd	r25, Y+6	; 0x06
    324e:	41 96       	adiw	r24, 0x11	; 17
    3250:	0e 94 4b 21 	call	0x4296	; 0x4296 <xTaskRemoveFromEventList>
    3254:	81 30       	cpi	r24, 0x01	; 1
    3256:	11 f4       	brne	.+4      	; 0x325c <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    3258:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    325c:	0f 90       	pop	r0
    325e:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	8c 87       	std	Y+12, r24	; 0x0c
    3264:	5c c0       	rjmp	.+184    	; 0x331e <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    3266:	89 85       	ldd	r24, Y+9	; 0x09
    3268:	9a 85       	ldd	r25, Y+10	; 0x0a
    326a:	00 97       	sbiw	r24, 0x00	; 0
    326c:	21 f4       	brne	.+8      	; 0x3276 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    326e:	0f 90       	pop	r0
    3270:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    3272:	1c 86       	std	Y+12, r1	; 0x0c
    3274:	54 c0       	rjmp	.+168    	; 0x331e <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	88 23       	and	r24, r24
    327a:	31 f4       	brne	.+12     	; 0x3288 <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    327c:	ce 01       	movw	r24, r28
    327e:	02 96       	adiw	r24, 0x02	; 2
    3280:	0e 94 b3 21 	call	0x4366	; 0x4366 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    3288:	0f 90       	pop	r0
    328a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    328c:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3290:	0f b6       	in	r0, 0x3f	; 63
    3292:	f8 94       	cli
    3294:	0f 92       	push	r0
    3296:	ed 81       	ldd	r30, Y+5	; 0x05
    3298:	fe 81       	ldd	r31, Y+6	; 0x06
    329a:	85 8d       	ldd	r24, Z+29	; 0x1d
    329c:	8f 3f       	cpi	r24, 0xFF	; 255
    329e:	19 f4       	brne	.+6      	; 0x32a6 <xQueueGenericSend+0xb0>
    32a0:	ed 81       	ldd	r30, Y+5	; 0x05
    32a2:	fe 81       	ldd	r31, Y+6	; 0x06
    32a4:	15 8e       	std	Z+29, r1	; 0x1d
    32a6:	ed 81       	ldd	r30, Y+5	; 0x05
    32a8:	fe 81       	ldd	r31, Y+6	; 0x06
    32aa:	86 8d       	ldd	r24, Z+30	; 0x1e
    32ac:	8f 3f       	cpi	r24, 0xFF	; 255
    32ae:	19 f4       	brne	.+6      	; 0x32b6 <xQueueGenericSend+0xc0>
    32b0:	ed 81       	ldd	r30, Y+5	; 0x05
    32b2:	fe 81       	ldd	r31, Y+6	; 0x06
    32b4:	16 8e       	std	Z+30, r1	; 0x1e
    32b6:	0f 90       	pop	r0
    32b8:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    32ba:	ce 01       	movw	r24, r28
    32bc:	02 96       	adiw	r24, 0x02	; 2
    32be:	9e 01       	movw	r18, r28
    32c0:	27 5f       	subi	r18, 0xF7	; 247
    32c2:	3f 4f       	sbci	r19, 0xFF	; 255
    32c4:	b9 01       	movw	r22, r18
    32c6:	0e 94 cc 21 	call	0x4398	; 0x4398 <xTaskCheckForTimeOut>
    32ca:	88 23       	and	r24, r24
    32cc:	09 f5       	brne	.+66     	; 0x3310 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    32ce:	8d 81       	ldd	r24, Y+5	; 0x05
    32d0:	9e 81       	ldd	r25, Y+6	; 0x06
    32d2:	0e 94 9a 1c 	call	0x3934	; 0x3934 <prvIsQueueFull>
    32d6:	88 23       	and	r24, r24
    32d8:	a1 f0       	breq	.+40     	; 0x3302 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    32da:	8d 81       	ldd	r24, Y+5	; 0x05
    32dc:	9e 81       	ldd	r25, Y+6	; 0x06
    32de:	08 96       	adiw	r24, 0x08	; 8
    32e0:	29 85       	ldd	r18, Y+9	; 0x09
    32e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    32e4:	b9 01       	movw	r22, r18
    32e6:	0e 94 15 21 	call	0x422a	; 0x422a <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    32ea:	8d 81       	ldd	r24, Y+5	; 0x05
    32ec:	9e 81       	ldd	r25, Y+6	; 0x06
    32ee:	0e 94 13 1c 	call	0x3826	; 0x3826 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    32f2:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <xTaskResumeAll>
    32f6:	88 23       	and	r24, r24
    32f8:	09 f0       	breq	.+2      	; 0x32fc <xQueueGenericSend+0x106>
    32fa:	8f cf       	rjmp	.-226    	; 0x321a <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    32fc:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <vPortYield>
    3300:	8c cf       	rjmp	.-232    	; 0x321a <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3302:	8d 81       	ldd	r24, Y+5	; 0x05
    3304:	9e 81       	ldd	r25, Y+6	; 0x06
    3306:	0e 94 13 1c 	call	0x3826	; 0x3826 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    330a:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <xTaskResumeAll>
    330e:	85 cf       	rjmp	.-246    	; 0x321a <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    3310:	8d 81       	ldd	r24, Y+5	; 0x05
    3312:	9e 81       	ldd	r25, Y+6	; 0x06
    3314:	0e 94 13 1c 	call	0x3826	; 0x3826 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3318:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    331c:	1c 86       	std	Y+12, r1	; 0x0c
    331e:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    3320:	2c 96       	adiw	r28, 0x0c	; 12
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
    332c:	cf 91       	pop	r28
    332e:	df 91       	pop	r29
    3330:	08 95       	ret

00003332 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    3332:	df 93       	push	r29
    3334:	cf 93       	push	r28
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62
    333a:	29 97       	sbiw	r28, 0x09	; 9
    333c:	0f b6       	in	r0, 0x3f	; 63
    333e:	f8 94       	cli
    3340:	de bf       	out	0x3e, r29	; 62
    3342:	0f be       	out	0x3f, r0	; 63
    3344:	cd bf       	out	0x3d, r28	; 61
    3346:	9c 83       	std	Y+4, r25	; 0x04
    3348:	8b 83       	std	Y+3, r24	; 0x03
    334a:	7e 83       	std	Y+6, r23	; 0x06
    334c:	6d 83       	std	Y+5, r22	; 0x05
    334e:	58 87       	std	Y+8, r21	; 0x08
    3350:	4f 83       	std	Y+7, r20	; 0x07
    3352:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3354:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3356:	eb 81       	ldd	r30, Y+3	; 0x03
    3358:	fc 81       	ldd	r31, Y+4	; 0x04
    335a:	92 8d       	ldd	r25, Z+26	; 0x1a
    335c:	eb 81       	ldd	r30, Y+3	; 0x03
    335e:	fc 81       	ldd	r31, Y+4	; 0x04
    3360:	83 8d       	ldd	r24, Z+27	; 0x1b
    3362:	98 17       	cp	r25, r24
    3364:	40 f5       	brcc	.+80     	; 0x33b6 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3366:	8b 81       	ldd	r24, Y+3	; 0x03
    3368:	9c 81       	ldd	r25, Y+4	; 0x04
    336a:	2d 81       	ldd	r18, Y+5	; 0x05
    336c:	3e 81       	ldd	r19, Y+6	; 0x06
    336e:	b9 01       	movw	r22, r18
    3370:	49 85       	ldd	r20, Y+9	; 0x09
    3372:	0e 94 36 1b 	call	0x366c	; 0x366c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3376:	eb 81       	ldd	r30, Y+3	; 0x03
    3378:	fc 81       	ldd	r31, Y+4	; 0x04
    337a:	86 8d       	ldd	r24, Z+30	; 0x1e
    337c:	8f 3f       	cpi	r24, 0xFF	; 255
    337e:	89 f4       	brne	.+34     	; 0x33a2 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3380:	eb 81       	ldd	r30, Y+3	; 0x03
    3382:	fc 81       	ldd	r31, Y+4	; 0x04
    3384:	81 89       	ldd	r24, Z+17	; 0x11
    3386:	88 23       	and	r24, r24
    3388:	99 f0       	breq	.+38     	; 0x33b0 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    338a:	8b 81       	ldd	r24, Y+3	; 0x03
    338c:	9c 81       	ldd	r25, Y+4	; 0x04
    338e:	41 96       	adiw	r24, 0x11	; 17
    3390:	0e 94 4b 21 	call	0x4296	; 0x4296 <xTaskRemoveFromEventList>
    3394:	88 23       	and	r24, r24
    3396:	61 f0       	breq	.+24     	; 0x33b0 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    3398:	ef 81       	ldd	r30, Y+7	; 0x07
    339a:	f8 85       	ldd	r31, Y+8	; 0x08
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	80 83       	st	Z, r24
    33a0:	07 c0       	rjmp	.+14     	; 0x33b0 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    33a2:	eb 81       	ldd	r30, Y+3	; 0x03
    33a4:	fc 81       	ldd	r31, Y+4	; 0x04
    33a6:	86 8d       	ldd	r24, Z+30	; 0x1e
    33a8:	8f 5f       	subi	r24, 0xFF	; 255
    33aa:	eb 81       	ldd	r30, Y+3	; 0x03
    33ac:	fc 81       	ldd	r31, Y+4	; 0x04
    33ae:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	8a 83       	std	Y+2, r24	; 0x02
    33b4:	01 c0       	rjmp	.+2      	; 0x33b8 <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    33b6:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    33ba:	29 96       	adiw	r28, 0x09	; 9
    33bc:	0f b6       	in	r0, 0x3f	; 63
    33be:	f8 94       	cli
    33c0:	de bf       	out	0x3e, r29	; 62
    33c2:	0f be       	out	0x3f, r0	; 63
    33c4:	cd bf       	out	0x3d, r28	; 61
    33c6:	cf 91       	pop	r28
    33c8:	df 91       	pop	r29
    33ca:	08 95       	ret

000033cc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    33cc:	df 93       	push	r29
    33ce:	cf 93       	push	r28
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	2e 97       	sbiw	r28, 0x0e	; 14
    33d6:	0f b6       	in	r0, 0x3f	; 63
    33d8:	f8 94       	cli
    33da:	de bf       	out	0x3e, r29	; 62
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	cd bf       	out	0x3d, r28	; 61
    33e0:	98 87       	std	Y+8, r25	; 0x08
    33e2:	8f 83       	std	Y+7, r24	; 0x07
    33e4:	7a 87       	std	Y+10, r23	; 0x0a
    33e6:	69 87       	std	Y+9, r22	; 0x09
    33e8:	5c 87       	std	Y+12, r21	; 0x0c
    33ea:	4b 87       	std	Y+11, r20	; 0x0b
    33ec:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    33ee:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    33f0:	0f b6       	in	r0, 0x3f	; 63
    33f2:	f8 94       	cli
    33f4:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    33f6:	ef 81       	ldd	r30, Y+7	; 0x07
    33f8:	f8 85       	ldd	r31, Y+8	; 0x08
    33fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    33fc:	88 23       	and	r24, r24
    33fe:	09 f4       	brne	.+2      	; 0x3402 <xQueueGenericReceive+0x36>
    3400:	3f c0       	rjmp	.+126    	; 0x3480 <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    3402:	ef 81       	ldd	r30, Y+7	; 0x07
    3404:	f8 85       	ldd	r31, Y+8	; 0x08
    3406:	86 81       	ldd	r24, Z+6	; 0x06
    3408:	97 81       	ldd	r25, Z+7	; 0x07
    340a:	9a 83       	std	Y+2, r25	; 0x02
    340c:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    340e:	8f 81       	ldd	r24, Y+7	; 0x07
    3410:	98 85       	ldd	r25, Y+8	; 0x08
    3412:	29 85       	ldd	r18, Y+9	; 0x09
    3414:	3a 85       	ldd	r19, Y+10	; 0x0a
    3416:	b9 01       	movw	r22, r18
    3418:	0e 94 cb 1b 	call	0x3796	; 0x3796 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    341c:	8d 85       	ldd	r24, Y+13	; 0x0d
    341e:	88 23       	and	r24, r24
    3420:	b1 f4       	brne	.+44     	; 0x344e <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    3422:	ef 81       	ldd	r30, Y+7	; 0x07
    3424:	f8 85       	ldd	r31, Y+8	; 0x08
    3426:	82 8d       	ldd	r24, Z+26	; 0x1a
    3428:	81 50       	subi	r24, 0x01	; 1
    342a:	ef 81       	ldd	r30, Y+7	; 0x07
    342c:	f8 85       	ldd	r31, Y+8	; 0x08
    342e:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3430:	ef 81       	ldd	r30, Y+7	; 0x07
    3432:	f8 85       	ldd	r31, Y+8	; 0x08
    3434:	80 85       	ldd	r24, Z+8	; 0x08
    3436:	88 23       	and	r24, r24
    3438:	f1 f0       	breq	.+60     	; 0x3476 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    343a:	8f 81       	ldd	r24, Y+7	; 0x07
    343c:	98 85       	ldd	r25, Y+8	; 0x08
    343e:	08 96       	adiw	r24, 0x08	; 8
    3440:	0e 94 4b 21 	call	0x4296	; 0x4296 <xTaskRemoveFromEventList>
    3444:	81 30       	cpi	r24, 0x01	; 1
    3446:	b9 f4       	brne	.+46     	; 0x3476 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    3448:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <vPortYield>
    344c:	14 c0       	rjmp	.+40     	; 0x3476 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    344e:	ef 81       	ldd	r30, Y+7	; 0x07
    3450:	f8 85       	ldd	r31, Y+8	; 0x08
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	9a 81       	ldd	r25, Y+2	; 0x02
    3456:	97 83       	std	Z+7, r25	; 0x07
    3458:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    345a:	ef 81       	ldd	r30, Y+7	; 0x07
    345c:	f8 85       	ldd	r31, Y+8	; 0x08
    345e:	81 89       	ldd	r24, Z+17	; 0x11
    3460:	88 23       	and	r24, r24
    3462:	49 f0       	breq	.+18     	; 0x3476 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3464:	8f 81       	ldd	r24, Y+7	; 0x07
    3466:	98 85       	ldd	r25, Y+8	; 0x08
    3468:	41 96       	adiw	r24, 0x11	; 17
    346a:	0e 94 4b 21 	call	0x4296	; 0x4296 <xTaskRemoveFromEventList>
    346e:	88 23       	and	r24, r24
    3470:	11 f0       	breq	.+4      	; 0x3476 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    3472:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    3476:	0f 90       	pop	r0
    3478:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	8e 87       	std	Y+14, r24	; 0x0e
    347e:	5c c0       	rjmp	.+184    	; 0x3538 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    3480:	8b 85       	ldd	r24, Y+11	; 0x0b
    3482:	9c 85       	ldd	r25, Y+12	; 0x0c
    3484:	00 97       	sbiw	r24, 0x00	; 0
    3486:	21 f4       	brne	.+8      	; 0x3490 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3488:	0f 90       	pop	r0
    348a:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    348c:	1e 86       	std	Y+14, r1	; 0x0e
    348e:	54 c0       	rjmp	.+168    	; 0x3538 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    3490:	8b 81       	ldd	r24, Y+3	; 0x03
    3492:	88 23       	and	r24, r24
    3494:	31 f4       	brne	.+12     	; 0x34a2 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3496:	ce 01       	movw	r24, r28
    3498:	04 96       	adiw	r24, 0x04	; 4
    349a:	0e 94 b3 21 	call	0x4366	; 0x4366 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    349e:	81 e0       	ldi	r24, 0x01	; 1
    34a0:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    34a2:	0f 90       	pop	r0
    34a4:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    34a6:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    34aa:	0f b6       	in	r0, 0x3f	; 63
    34ac:	f8 94       	cli
    34ae:	0f 92       	push	r0
    34b0:	ef 81       	ldd	r30, Y+7	; 0x07
    34b2:	f8 85       	ldd	r31, Y+8	; 0x08
    34b4:	85 8d       	ldd	r24, Z+29	; 0x1d
    34b6:	8f 3f       	cpi	r24, 0xFF	; 255
    34b8:	19 f4       	brne	.+6      	; 0x34c0 <xQueueGenericReceive+0xf4>
    34ba:	ef 81       	ldd	r30, Y+7	; 0x07
    34bc:	f8 85       	ldd	r31, Y+8	; 0x08
    34be:	15 8e       	std	Z+29, r1	; 0x1d
    34c0:	ef 81       	ldd	r30, Y+7	; 0x07
    34c2:	f8 85       	ldd	r31, Y+8	; 0x08
    34c4:	86 8d       	ldd	r24, Z+30	; 0x1e
    34c6:	8f 3f       	cpi	r24, 0xFF	; 255
    34c8:	19 f4       	brne	.+6      	; 0x34d0 <xQueueGenericReceive+0x104>
    34ca:	ef 81       	ldd	r30, Y+7	; 0x07
    34cc:	f8 85       	ldd	r31, Y+8	; 0x08
    34ce:	16 8e       	std	Z+30, r1	; 0x1e
    34d0:	0f 90       	pop	r0
    34d2:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    34d4:	ce 01       	movw	r24, r28
    34d6:	04 96       	adiw	r24, 0x04	; 4
    34d8:	9e 01       	movw	r18, r28
    34da:	25 5f       	subi	r18, 0xF5	; 245
    34dc:	3f 4f       	sbci	r19, 0xFF	; 255
    34de:	b9 01       	movw	r22, r18
    34e0:	0e 94 cc 21 	call	0x4398	; 0x4398 <xTaskCheckForTimeOut>
    34e4:	88 23       	and	r24, r24
    34e6:	09 f5       	brne	.+66     	; 0x352a <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    34e8:	8f 81       	ldd	r24, Y+7	; 0x07
    34ea:	98 85       	ldd	r25, Y+8	; 0x08
    34ec:	0e 94 67 1c 	call	0x38ce	; 0x38ce <prvIsQueueEmpty>
    34f0:	88 23       	and	r24, r24
    34f2:	a1 f0       	breq	.+40     	; 0x351c <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    34f4:	8f 81       	ldd	r24, Y+7	; 0x07
    34f6:	98 85       	ldd	r25, Y+8	; 0x08
    34f8:	41 96       	adiw	r24, 0x11	; 17
    34fa:	2b 85       	ldd	r18, Y+11	; 0x0b
    34fc:	3c 85       	ldd	r19, Y+12	; 0x0c
    34fe:	b9 01       	movw	r22, r18
    3500:	0e 94 15 21 	call	0x422a	; 0x422a <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    3504:	8f 81       	ldd	r24, Y+7	; 0x07
    3506:	98 85       	ldd	r25, Y+8	; 0x08
    3508:	0e 94 13 1c 	call	0x3826	; 0x3826 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    350c:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <xTaskResumeAll>
    3510:	88 23       	and	r24, r24
    3512:	09 f0       	breq	.+2      	; 0x3516 <xQueueGenericReceive+0x14a>
    3514:	6d cf       	rjmp	.-294    	; 0x33f0 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    3516:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <vPortYield>
    351a:	6a cf       	rjmp	.-300    	; 0x33f0 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    351c:	8f 81       	ldd	r24, Y+7	; 0x07
    351e:	98 85       	ldd	r25, Y+8	; 0x08
    3520:	0e 94 13 1c 	call	0x3826	; 0x3826 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3524:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <xTaskResumeAll>
    3528:	63 cf       	rjmp	.-314    	; 0x33f0 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    352a:	8f 81       	ldd	r24, Y+7	; 0x07
    352c:	98 85       	ldd	r25, Y+8	; 0x08
    352e:	0e 94 13 1c 	call	0x3826	; 0x3826 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3532:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3536:	1e 86       	std	Y+14, r1	; 0x0e
    3538:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    353a:	2e 96       	adiw	r28, 0x0e	; 14
    353c:	0f b6       	in	r0, 0x3f	; 63
    353e:	f8 94       	cli
    3540:	de bf       	out	0x3e, r29	; 62
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	cd bf       	out	0x3d, r28	; 61
    3546:	cf 91       	pop	r28
    3548:	df 91       	pop	r29
    354a:	08 95       	ret

0000354c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    354c:	df 93       	push	r29
    354e:	cf 93       	push	r28
    3550:	cd b7       	in	r28, 0x3d	; 61
    3552:	de b7       	in	r29, 0x3e	; 62
    3554:	28 97       	sbiw	r28, 0x08	; 8
    3556:	0f b6       	in	r0, 0x3f	; 63
    3558:	f8 94       	cli
    355a:	de bf       	out	0x3e, r29	; 62
    355c:	0f be       	out	0x3f, r0	; 63
    355e:	cd bf       	out	0x3d, r28	; 61
    3560:	9c 83       	std	Y+4, r25	; 0x04
    3562:	8b 83       	std	Y+3, r24	; 0x03
    3564:	7e 83       	std	Y+6, r23	; 0x06
    3566:	6d 83       	std	Y+5, r22	; 0x05
    3568:	58 87       	std	Y+8, r21	; 0x08
    356a:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    356c:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    356e:	eb 81       	ldd	r30, Y+3	; 0x03
    3570:	fc 81       	ldd	r31, Y+4	; 0x04
    3572:	82 8d       	ldd	r24, Z+26	; 0x1a
    3574:	88 23       	and	r24, r24
    3576:	71 f1       	breq	.+92     	; 0x35d4 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3578:	8b 81       	ldd	r24, Y+3	; 0x03
    357a:	9c 81       	ldd	r25, Y+4	; 0x04
    357c:	2d 81       	ldd	r18, Y+5	; 0x05
    357e:	3e 81       	ldd	r19, Y+6	; 0x06
    3580:	b9 01       	movw	r22, r18
    3582:	0e 94 cb 1b 	call	0x3796	; 0x3796 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    3586:	eb 81       	ldd	r30, Y+3	; 0x03
    3588:	fc 81       	ldd	r31, Y+4	; 0x04
    358a:	82 8d       	ldd	r24, Z+26	; 0x1a
    358c:	81 50       	subi	r24, 0x01	; 1
    358e:	eb 81       	ldd	r30, Y+3	; 0x03
    3590:	fc 81       	ldd	r31, Y+4	; 0x04
    3592:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    3594:	eb 81       	ldd	r30, Y+3	; 0x03
    3596:	fc 81       	ldd	r31, Y+4	; 0x04
    3598:	85 8d       	ldd	r24, Z+29	; 0x1d
    359a:	8f 3f       	cpi	r24, 0xFF	; 255
    359c:	89 f4       	brne	.+34     	; 0x35c0 <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    359e:	eb 81       	ldd	r30, Y+3	; 0x03
    35a0:	fc 81       	ldd	r31, Y+4	; 0x04
    35a2:	80 85       	ldd	r24, Z+8	; 0x08
    35a4:	88 23       	and	r24, r24
    35a6:	99 f0       	breq	.+38     	; 0x35ce <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    35a8:	8b 81       	ldd	r24, Y+3	; 0x03
    35aa:	9c 81       	ldd	r25, Y+4	; 0x04
    35ac:	08 96       	adiw	r24, 0x08	; 8
    35ae:	0e 94 4b 21 	call	0x4296	; 0x4296 <xTaskRemoveFromEventList>
    35b2:	88 23       	and	r24, r24
    35b4:	61 f0       	breq	.+24     	; 0x35ce <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    35b6:	ef 81       	ldd	r30, Y+7	; 0x07
    35b8:	f8 85       	ldd	r31, Y+8	; 0x08
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	80 83       	st	Z, r24
    35be:	07 c0       	rjmp	.+14     	; 0x35ce <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    35c0:	eb 81       	ldd	r30, Y+3	; 0x03
    35c2:	fc 81       	ldd	r31, Y+4	; 0x04
    35c4:	85 8d       	ldd	r24, Z+29	; 0x1d
    35c6:	8f 5f       	subi	r24, 0xFF	; 255
    35c8:	eb 81       	ldd	r30, Y+3	; 0x03
    35ca:	fc 81       	ldd	r31, Y+4	; 0x04
    35cc:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	8a 83       	std	Y+2, r24	; 0x02
    35d2:	01 c0       	rjmp	.+2      	; 0x35d6 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    35d4:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    35d6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    35d8:	28 96       	adiw	r28, 0x08	; 8
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	de bf       	out	0x3e, r29	; 62
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	cd bf       	out	0x3d, r28	; 61
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	08 95       	ret

000035ea <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    35ea:	df 93       	push	r29
    35ec:	cf 93       	push	r28
    35ee:	00 d0       	rcall	.+0      	; 0x35f0 <uxQueueMessagesWaiting+0x6>
    35f0:	0f 92       	push	r0
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	9b 83       	std	Y+3, r25	; 0x03
    35f8:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    35fa:	0f b6       	in	r0, 0x3f	; 63
    35fc:	f8 94       	cli
    35fe:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    3600:	ea 81       	ldd	r30, Y+2	; 0x02
    3602:	fb 81       	ldd	r31, Y+3	; 0x03
    3604:	82 8d       	ldd	r24, Z+26	; 0x1a
    3606:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3608:	0f 90       	pop	r0
    360a:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    360c:	89 81       	ldd	r24, Y+1	; 0x01
}
    360e:	0f 90       	pop	r0
    3610:	0f 90       	pop	r0
    3612:	0f 90       	pop	r0
    3614:	cf 91       	pop	r28
    3616:	df 91       	pop	r29
    3618:	08 95       	ret

0000361a <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    361a:	df 93       	push	r29
    361c:	cf 93       	push	r28
    361e:	00 d0       	rcall	.+0      	; 0x3620 <uxQueueMessagesWaitingFromISR+0x6>
    3620:	0f 92       	push	r0
    3622:	cd b7       	in	r28, 0x3d	; 61
    3624:	de b7       	in	r29, 0x3e	; 62
    3626:	9b 83       	std	Y+3, r25	; 0x03
    3628:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    362a:	ea 81       	ldd	r30, Y+2	; 0x02
    362c:	fb 81       	ldd	r31, Y+3	; 0x03
    362e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3630:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    3632:	89 81       	ldd	r24, Y+1	; 0x01
}
    3634:	0f 90       	pop	r0
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	cf 91       	pop	r28
    363c:	df 91       	pop	r29
    363e:	08 95       	ret

00003640 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    3640:	df 93       	push	r29
    3642:	cf 93       	push	r28
    3644:	00 d0       	rcall	.+0      	; 0x3646 <vQueueDelete+0x6>
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
    364a:	9a 83       	std	Y+2, r25	; 0x02
    364c:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    364e:	e9 81       	ldd	r30, Y+1	; 0x01
    3650:	fa 81       	ldd	r31, Y+2	; 0x02
    3652:	80 81       	ld	r24, Z
    3654:	91 81       	ldd	r25, Z+1	; 0x01
    3656:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <vPortFree>
	vPortFree( pxQueue );
    365a:	89 81       	ldd	r24, Y+1	; 0x01
    365c:	9a 81       	ldd	r25, Y+2	; 0x02
    365e:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <vPortFree>
}
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	cf 91       	pop	r28
    3668:	df 91       	pop	r29
    366a:	08 95       	ret

0000366c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    366c:	df 93       	push	r29
    366e:	cf 93       	push	r28
    3670:	00 d0       	rcall	.+0      	; 0x3672 <prvCopyDataToQueue+0x6>
    3672:	00 d0       	rcall	.+0      	; 0x3674 <prvCopyDataToQueue+0x8>
    3674:	0f 92       	push	r0
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
    367a:	9a 83       	std	Y+2, r25	; 0x02
    367c:	89 83       	std	Y+1, r24	; 0x01
    367e:	7c 83       	std	Y+4, r23	; 0x04
    3680:	6b 83       	std	Y+3, r22	; 0x03
    3682:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    3684:	e9 81       	ldd	r30, Y+1	; 0x01
    3686:	fa 81       	ldd	r31, Y+2	; 0x02
    3688:	84 8d       	ldd	r24, Z+28	; 0x1c
    368a:	88 23       	and	r24, r24
    368c:	09 f4       	brne	.+2      	; 0x3690 <prvCopyDataToQueue+0x24>
    368e:	74 c0       	rjmp	.+232    	; 0x3778 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    3690:	8d 81       	ldd	r24, Y+5	; 0x05
    3692:	88 23       	and	r24, r24
    3694:	99 f5       	brne	.+102    	; 0x36fc <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3696:	e9 81       	ldd	r30, Y+1	; 0x01
    3698:	fa 81       	ldd	r31, Y+2	; 0x02
    369a:	64 81       	ldd	r22, Z+4	; 0x04
    369c:	75 81       	ldd	r23, Z+5	; 0x05
    369e:	e9 81       	ldd	r30, Y+1	; 0x01
    36a0:	fa 81       	ldd	r31, Y+2	; 0x02
    36a2:	84 8d       	ldd	r24, Z+28	; 0x1c
    36a4:	48 2f       	mov	r20, r24
    36a6:	50 e0       	ldi	r21, 0x00	; 0
    36a8:	2b 81       	ldd	r18, Y+3	; 0x03
    36aa:	3c 81       	ldd	r19, Y+4	; 0x04
    36ac:	cb 01       	movw	r24, r22
    36ae:	b9 01       	movw	r22, r18
    36b0:	0e 94 01 24 	call	0x4802	; 0x4802 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    36b4:	e9 81       	ldd	r30, Y+1	; 0x01
    36b6:	fa 81       	ldd	r31, Y+2	; 0x02
    36b8:	24 81       	ldd	r18, Z+4	; 0x04
    36ba:	35 81       	ldd	r19, Z+5	; 0x05
    36bc:	e9 81       	ldd	r30, Y+1	; 0x01
    36be:	fa 81       	ldd	r31, Y+2	; 0x02
    36c0:	84 8d       	ldd	r24, Z+28	; 0x1c
    36c2:	88 2f       	mov	r24, r24
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	82 0f       	add	r24, r18
    36c8:	93 1f       	adc	r25, r19
    36ca:	e9 81       	ldd	r30, Y+1	; 0x01
    36cc:	fa 81       	ldd	r31, Y+2	; 0x02
    36ce:	95 83       	std	Z+5, r25	; 0x05
    36d0:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    36d2:	e9 81       	ldd	r30, Y+1	; 0x01
    36d4:	fa 81       	ldd	r31, Y+2	; 0x02
    36d6:	24 81       	ldd	r18, Z+4	; 0x04
    36d8:	35 81       	ldd	r19, Z+5	; 0x05
    36da:	e9 81       	ldd	r30, Y+1	; 0x01
    36dc:	fa 81       	ldd	r31, Y+2	; 0x02
    36de:	82 81       	ldd	r24, Z+2	; 0x02
    36e0:	93 81       	ldd	r25, Z+3	; 0x03
    36e2:	28 17       	cp	r18, r24
    36e4:	39 07       	cpc	r19, r25
    36e6:	08 f4       	brcc	.+2      	; 0x36ea <prvCopyDataToQueue+0x7e>
    36e8:	47 c0       	rjmp	.+142    	; 0x3778 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    36ea:	e9 81       	ldd	r30, Y+1	; 0x01
    36ec:	fa 81       	ldd	r31, Y+2	; 0x02
    36ee:	80 81       	ld	r24, Z
    36f0:	91 81       	ldd	r25, Z+1	; 0x01
    36f2:	e9 81       	ldd	r30, Y+1	; 0x01
    36f4:	fa 81       	ldd	r31, Y+2	; 0x02
    36f6:	95 83       	std	Z+5, r25	; 0x05
    36f8:	84 83       	std	Z+4, r24	; 0x04
    36fa:	3e c0       	rjmp	.+124    	; 0x3778 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    36fc:	e9 81       	ldd	r30, Y+1	; 0x01
    36fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3700:	66 81       	ldd	r22, Z+6	; 0x06
    3702:	77 81       	ldd	r23, Z+7	; 0x07
    3704:	e9 81       	ldd	r30, Y+1	; 0x01
    3706:	fa 81       	ldd	r31, Y+2	; 0x02
    3708:	84 8d       	ldd	r24, Z+28	; 0x1c
    370a:	48 2f       	mov	r20, r24
    370c:	50 e0       	ldi	r21, 0x00	; 0
    370e:	2b 81       	ldd	r18, Y+3	; 0x03
    3710:	3c 81       	ldd	r19, Y+4	; 0x04
    3712:	cb 01       	movw	r24, r22
    3714:	b9 01       	movw	r22, r18
    3716:	0e 94 01 24 	call	0x4802	; 0x4802 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    371a:	e9 81       	ldd	r30, Y+1	; 0x01
    371c:	fa 81       	ldd	r31, Y+2	; 0x02
    371e:	26 81       	ldd	r18, Z+6	; 0x06
    3720:	37 81       	ldd	r19, Z+7	; 0x07
    3722:	e9 81       	ldd	r30, Y+1	; 0x01
    3724:	fa 81       	ldd	r31, Y+2	; 0x02
    3726:	84 8d       	ldd	r24, Z+28	; 0x1c
    3728:	88 2f       	mov	r24, r24
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	90 95       	com	r25
    372e:	81 95       	neg	r24
    3730:	9f 4f       	sbci	r25, 0xFF	; 255
    3732:	82 0f       	add	r24, r18
    3734:	93 1f       	adc	r25, r19
    3736:	e9 81       	ldd	r30, Y+1	; 0x01
    3738:	fa 81       	ldd	r31, Y+2	; 0x02
    373a:	97 83       	std	Z+7, r25	; 0x07
    373c:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    373e:	e9 81       	ldd	r30, Y+1	; 0x01
    3740:	fa 81       	ldd	r31, Y+2	; 0x02
    3742:	26 81       	ldd	r18, Z+6	; 0x06
    3744:	37 81       	ldd	r19, Z+7	; 0x07
    3746:	e9 81       	ldd	r30, Y+1	; 0x01
    3748:	fa 81       	ldd	r31, Y+2	; 0x02
    374a:	80 81       	ld	r24, Z
    374c:	91 81       	ldd	r25, Z+1	; 0x01
    374e:	28 17       	cp	r18, r24
    3750:	39 07       	cpc	r19, r25
    3752:	90 f4       	brcc	.+36     	; 0x3778 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    3754:	e9 81       	ldd	r30, Y+1	; 0x01
    3756:	fa 81       	ldd	r31, Y+2	; 0x02
    3758:	22 81       	ldd	r18, Z+2	; 0x02
    375a:	33 81       	ldd	r19, Z+3	; 0x03
    375c:	e9 81       	ldd	r30, Y+1	; 0x01
    375e:	fa 81       	ldd	r31, Y+2	; 0x02
    3760:	84 8d       	ldd	r24, Z+28	; 0x1c
    3762:	88 2f       	mov	r24, r24
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	90 95       	com	r25
    3768:	81 95       	neg	r24
    376a:	9f 4f       	sbci	r25, 0xFF	; 255
    376c:	82 0f       	add	r24, r18
    376e:	93 1f       	adc	r25, r19
    3770:	e9 81       	ldd	r30, Y+1	; 0x01
    3772:	fa 81       	ldd	r31, Y+2	; 0x02
    3774:	97 83       	std	Z+7, r25	; 0x07
    3776:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    3778:	e9 81       	ldd	r30, Y+1	; 0x01
    377a:	fa 81       	ldd	r31, Y+2	; 0x02
    377c:	82 8d       	ldd	r24, Z+26	; 0x1a
    377e:	8f 5f       	subi	r24, 0xFF	; 255
    3780:	e9 81       	ldd	r30, Y+1	; 0x01
    3782:	fa 81       	ldd	r31, Y+2	; 0x02
    3784:	82 8f       	std	Z+26, r24	; 0x1a
}
    3786:	0f 90       	pop	r0
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	cf 91       	pop	r28
    3792:	df 91       	pop	r29
    3794:	08 95       	ret

00003796 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    3796:	df 93       	push	r29
    3798:	cf 93       	push	r28
    379a:	00 d0       	rcall	.+0      	; 0x379c <prvCopyDataFromQueue+0x6>
    379c:	00 d0       	rcall	.+0      	; 0x379e <prvCopyDataFromQueue+0x8>
    379e:	cd b7       	in	r28, 0x3d	; 61
    37a0:	de b7       	in	r29, 0x3e	; 62
    37a2:	9a 83       	std	Y+2, r25	; 0x02
    37a4:	89 83       	std	Y+1, r24	; 0x01
    37a6:	7c 83       	std	Y+4, r23	; 0x04
    37a8:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    37aa:	e9 81       	ldd	r30, Y+1	; 0x01
    37ac:	fa 81       	ldd	r31, Y+2	; 0x02
    37ae:	80 81       	ld	r24, Z
    37b0:	91 81       	ldd	r25, Z+1	; 0x01
    37b2:	00 97       	sbiw	r24, 0x00	; 0
    37b4:	89 f1       	breq	.+98     	; 0x3818 <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    37b6:	e9 81       	ldd	r30, Y+1	; 0x01
    37b8:	fa 81       	ldd	r31, Y+2	; 0x02
    37ba:	26 81       	ldd	r18, Z+6	; 0x06
    37bc:	37 81       	ldd	r19, Z+7	; 0x07
    37be:	e9 81       	ldd	r30, Y+1	; 0x01
    37c0:	fa 81       	ldd	r31, Y+2	; 0x02
    37c2:	84 8d       	ldd	r24, Z+28	; 0x1c
    37c4:	88 2f       	mov	r24, r24
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	82 0f       	add	r24, r18
    37ca:	93 1f       	adc	r25, r19
    37cc:	e9 81       	ldd	r30, Y+1	; 0x01
    37ce:	fa 81       	ldd	r31, Y+2	; 0x02
    37d0:	97 83       	std	Z+7, r25	; 0x07
    37d2:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    37d4:	e9 81       	ldd	r30, Y+1	; 0x01
    37d6:	fa 81       	ldd	r31, Y+2	; 0x02
    37d8:	26 81       	ldd	r18, Z+6	; 0x06
    37da:	37 81       	ldd	r19, Z+7	; 0x07
    37dc:	e9 81       	ldd	r30, Y+1	; 0x01
    37de:	fa 81       	ldd	r31, Y+2	; 0x02
    37e0:	82 81       	ldd	r24, Z+2	; 0x02
    37e2:	93 81       	ldd	r25, Z+3	; 0x03
    37e4:	28 17       	cp	r18, r24
    37e6:	39 07       	cpc	r19, r25
    37e8:	40 f0       	brcs	.+16     	; 0x37fa <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    37ea:	e9 81       	ldd	r30, Y+1	; 0x01
    37ec:	fa 81       	ldd	r31, Y+2	; 0x02
    37ee:	80 81       	ld	r24, Z
    37f0:	91 81       	ldd	r25, Z+1	; 0x01
    37f2:	e9 81       	ldd	r30, Y+1	; 0x01
    37f4:	fa 81       	ldd	r31, Y+2	; 0x02
    37f6:	97 83       	std	Z+7, r25	; 0x07
    37f8:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    37fa:	e9 81       	ldd	r30, Y+1	; 0x01
    37fc:	fa 81       	ldd	r31, Y+2	; 0x02
    37fe:	46 81       	ldd	r20, Z+6	; 0x06
    3800:	57 81       	ldd	r21, Z+7	; 0x07
    3802:	e9 81       	ldd	r30, Y+1	; 0x01
    3804:	fa 81       	ldd	r31, Y+2	; 0x02
    3806:	84 8d       	ldd	r24, Z+28	; 0x1c
    3808:	28 2f       	mov	r18, r24
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	8b 81       	ldd	r24, Y+3	; 0x03
    380e:	9c 81       	ldd	r25, Y+4	; 0x04
    3810:	ba 01       	movw	r22, r20
    3812:	a9 01       	movw	r20, r18
    3814:	0e 94 01 24 	call	0x4802	; 0x4802 <memcpy>
	}
}
    3818:	0f 90       	pop	r0
    381a:	0f 90       	pop	r0
    381c:	0f 90       	pop	r0
    381e:	0f 90       	pop	r0
    3820:	cf 91       	pop	r28
    3822:	df 91       	pop	r29
    3824:	08 95       	ret

00003826 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    3826:	df 93       	push	r29
    3828:	cf 93       	push	r28
    382a:	00 d0       	rcall	.+0      	; 0x382c <prvUnlockQueue+0x6>
    382c:	cd b7       	in	r28, 0x3d	; 61
    382e:	de b7       	in	r29, 0x3e	; 62
    3830:	9a 83       	std	Y+2, r25	; 0x02
    3832:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	f8 94       	cli
    3838:	0f 92       	push	r0
    383a:	15 c0       	rjmp	.+42     	; 0x3866 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    383c:	e9 81       	ldd	r30, Y+1	; 0x01
    383e:	fa 81       	ldd	r31, Y+2	; 0x02
    3840:	81 89       	ldd	r24, Z+17	; 0x11
    3842:	88 23       	and	r24, r24
    3844:	a9 f0       	breq	.+42     	; 0x3870 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3846:	89 81       	ldd	r24, Y+1	; 0x01
    3848:	9a 81       	ldd	r25, Y+2	; 0x02
    384a:	41 96       	adiw	r24, 0x11	; 17
    384c:	0e 94 4b 21 	call	0x4296	; 0x4296 <xTaskRemoveFromEventList>
    3850:	88 23       	and	r24, r24
    3852:	11 f0       	breq	.+4      	; 0x3858 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    3854:	0e 94 29 22 	call	0x4452	; 0x4452 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    3858:	e9 81       	ldd	r30, Y+1	; 0x01
    385a:	fa 81       	ldd	r31, Y+2	; 0x02
    385c:	86 8d       	ldd	r24, Z+30	; 0x1e
    385e:	81 50       	subi	r24, 0x01	; 1
    3860:	e9 81       	ldd	r30, Y+1	; 0x01
    3862:	fa 81       	ldd	r31, Y+2	; 0x02
    3864:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3866:	e9 81       	ldd	r30, Y+1	; 0x01
    3868:	fa 81       	ldd	r31, Y+2	; 0x02
    386a:	86 8d       	ldd	r24, Z+30	; 0x1e
    386c:	18 16       	cp	r1, r24
    386e:	34 f3       	brlt	.-52     	; 0x383c <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3870:	e9 81       	ldd	r30, Y+1	; 0x01
    3872:	fa 81       	ldd	r31, Y+2	; 0x02
    3874:	8f ef       	ldi	r24, 0xFF	; 255
    3876:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    3878:	0f 90       	pop	r0
    387a:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    387c:	0f b6       	in	r0, 0x3f	; 63
    387e:	f8 94       	cli
    3880:	0f 92       	push	r0
    3882:	15 c0       	rjmp	.+42     	; 0x38ae <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3884:	e9 81       	ldd	r30, Y+1	; 0x01
    3886:	fa 81       	ldd	r31, Y+2	; 0x02
    3888:	80 85       	ldd	r24, Z+8	; 0x08
    388a:	88 23       	and	r24, r24
    388c:	a9 f0       	breq	.+42     	; 0x38b8 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	9a 81       	ldd	r25, Y+2	; 0x02
    3892:	08 96       	adiw	r24, 0x08	; 8
    3894:	0e 94 4b 21 	call	0x4296	; 0x4296 <xTaskRemoveFromEventList>
    3898:	88 23       	and	r24, r24
    389a:	11 f0       	breq	.+4      	; 0x38a0 <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    389c:	0e 94 29 22 	call	0x4452	; 0x4452 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    38a0:	e9 81       	ldd	r30, Y+1	; 0x01
    38a2:	fa 81       	ldd	r31, Y+2	; 0x02
    38a4:	85 8d       	ldd	r24, Z+29	; 0x1d
    38a6:	81 50       	subi	r24, 0x01	; 1
    38a8:	e9 81       	ldd	r30, Y+1	; 0x01
    38aa:	fa 81       	ldd	r31, Y+2	; 0x02
    38ac:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    38ae:	e9 81       	ldd	r30, Y+1	; 0x01
    38b0:	fa 81       	ldd	r31, Y+2	; 0x02
    38b2:	85 8d       	ldd	r24, Z+29	; 0x1d
    38b4:	18 16       	cp	r1, r24
    38b6:	34 f3       	brlt	.-52     	; 0x3884 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    38b8:	e9 81       	ldd	r30, Y+1	; 0x01
    38ba:	fa 81       	ldd	r31, Y+2	; 0x02
    38bc:	8f ef       	ldi	r24, 0xFF	; 255
    38be:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    38c0:	0f 90       	pop	r0
    38c2:	0f be       	out	0x3f, r0	; 63
}
    38c4:	0f 90       	pop	r0
    38c6:	0f 90       	pop	r0
    38c8:	cf 91       	pop	r28
    38ca:	df 91       	pop	r29
    38cc:	08 95       	ret

000038ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    38ce:	df 93       	push	r29
    38d0:	cf 93       	push	r28
    38d2:	00 d0       	rcall	.+0      	; 0x38d4 <prvIsQueueEmpty+0x6>
    38d4:	0f 92       	push	r0
    38d6:	cd b7       	in	r28, 0x3d	; 61
    38d8:	de b7       	in	r29, 0x3e	; 62
    38da:	9b 83       	std	Y+3, r25	; 0x03
    38dc:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    38de:	0f b6       	in	r0, 0x3f	; 63
    38e0:	f8 94       	cli
    38e2:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    38e4:	ea 81       	ldd	r30, Y+2	; 0x02
    38e6:	fb 81       	ldd	r31, Y+3	; 0x03
    38e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    38ea:	19 82       	std	Y+1, r1	; 0x01
    38ec:	88 23       	and	r24, r24
    38ee:	11 f4       	brne	.+4      	; 0x38f4 <prvIsQueueEmpty+0x26>
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    38f4:	0f 90       	pop	r0
    38f6:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    38fa:	0f 90       	pop	r0
    38fc:	0f 90       	pop	r0
    38fe:	0f 90       	pop	r0
    3900:	cf 91       	pop	r28
    3902:	df 91       	pop	r29
    3904:	08 95       	ret

00003906 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    3906:	df 93       	push	r29
    3908:	cf 93       	push	r28
    390a:	00 d0       	rcall	.+0      	; 0x390c <xQueueIsQueueEmptyFromISR+0x6>
    390c:	0f 92       	push	r0
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	9b 83       	std	Y+3, r25	; 0x03
    3914:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3916:	ea 81       	ldd	r30, Y+2	; 0x02
    3918:	fb 81       	ldd	r31, Y+3	; 0x03
    391a:	82 8d       	ldd	r24, Z+26	; 0x1a
    391c:	19 82       	std	Y+1, r1	; 0x01
    391e:	88 23       	and	r24, r24
    3920:	11 f4       	brne	.+4      	; 0x3926 <xQueueIsQueueEmptyFromISR+0x20>
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    3926:	89 81       	ldd	r24, Y+1	; 0x01
}
    3928:	0f 90       	pop	r0
    392a:	0f 90       	pop	r0
    392c:	0f 90       	pop	r0
    392e:	cf 91       	pop	r28
    3930:	df 91       	pop	r29
    3932:	08 95       	ret

00003934 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    3934:	df 93       	push	r29
    3936:	cf 93       	push	r28
    3938:	00 d0       	rcall	.+0      	; 0x393a <prvIsQueueFull+0x6>
    393a:	0f 92       	push	r0
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62
    3940:	9b 83       	std	Y+3, r25	; 0x03
    3942:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3944:	0f b6       	in	r0, 0x3f	; 63
    3946:	f8 94       	cli
    3948:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    394a:	ea 81       	ldd	r30, Y+2	; 0x02
    394c:	fb 81       	ldd	r31, Y+3	; 0x03
    394e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3950:	ea 81       	ldd	r30, Y+2	; 0x02
    3952:	fb 81       	ldd	r31, Y+3	; 0x03
    3954:	83 8d       	ldd	r24, Z+27	; 0x1b
    3956:	19 82       	std	Y+1, r1	; 0x01
    3958:	98 17       	cp	r25, r24
    395a:	11 f4       	brne	.+4      	; 0x3960 <prvIsQueueFull+0x2c>
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3960:	0f 90       	pop	r0
    3962:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3964:	89 81       	ldd	r24, Y+1	; 0x01
}
    3966:	0f 90       	pop	r0
    3968:	0f 90       	pop	r0
    396a:	0f 90       	pop	r0
    396c:	cf 91       	pop	r28
    396e:	df 91       	pop	r29
    3970:	08 95       	ret

00003972 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    3972:	df 93       	push	r29
    3974:	cf 93       	push	r28
    3976:	00 d0       	rcall	.+0      	; 0x3978 <xQueueIsQueueFullFromISR+0x6>
    3978:	0f 92       	push	r0
    397a:	cd b7       	in	r28, 0x3d	; 61
    397c:	de b7       	in	r29, 0x3e	; 62
    397e:	9b 83       	std	Y+3, r25	; 0x03
    3980:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3982:	ea 81       	ldd	r30, Y+2	; 0x02
    3984:	fb 81       	ldd	r31, Y+3	; 0x03
    3986:	92 8d       	ldd	r25, Z+26	; 0x1a
    3988:	ea 81       	ldd	r30, Y+2	; 0x02
    398a:	fb 81       	ldd	r31, Y+3	; 0x03
    398c:	83 8d       	ldd	r24, Z+27	; 0x1b
    398e:	19 82       	std	Y+1, r1	; 0x01
    3990:	98 17       	cp	r25, r24
    3992:	11 f4       	brne	.+4      	; 0x3998 <xQueueIsQueueFullFromISR+0x26>
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    3998:	89 81       	ldd	r24, Y+1	; 0x01
}
    399a:	0f 90       	pop	r0
    399c:	0f 90       	pop	r0
    399e:	0f 90       	pop	r0
    39a0:	cf 91       	pop	r28
    39a2:	df 91       	pop	r29
    39a4:	08 95       	ret

000039a6 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    39a6:	af 92       	push	r10
    39a8:	bf 92       	push	r11
    39aa:	cf 92       	push	r12
    39ac:	df 92       	push	r13
    39ae:	ef 92       	push	r14
    39b0:	ff 92       	push	r15
    39b2:	0f 93       	push	r16
    39b4:	1f 93       	push	r17
    39b6:	df 93       	push	r29
    39b8:	cf 93       	push	r28
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
    39be:	64 97       	sbiw	r28, 0x14	; 20
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	f8 94       	cli
    39c4:	de bf       	out	0x3e, r29	; 62
    39c6:	0f be       	out	0x3f, r0	; 63
    39c8:	cd bf       	out	0x3d, r28	; 61
    39ca:	9f 83       	std	Y+7, r25	; 0x07
    39cc:	8e 83       	std	Y+6, r24	; 0x06
    39ce:	79 87       	std	Y+9, r23	; 0x09
    39d0:	68 87       	std	Y+8, r22	; 0x08
    39d2:	5b 87       	std	Y+11, r21	; 0x0b
    39d4:	4a 87       	std	Y+10, r20	; 0x0a
    39d6:	3d 87       	std	Y+13, r19	; 0x0d
    39d8:	2c 87       	std	Y+12, r18	; 0x0c
    39da:	0e 87       	std	Y+14, r16	; 0x0e
    39dc:	f8 8a       	std	Y+16, r15	; 0x10
    39de:	ef 86       	std	Y+15, r14	; 0x0f
    39e0:	da 8a       	std	Y+18, r13	; 0x12
    39e2:	c9 8a       	std	Y+17, r12	; 0x11
    39e4:	bc 8a       	std	Y+20, r11	; 0x14
    39e6:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    39e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    39ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    39ec:	29 89       	ldd	r18, Y+17	; 0x11
    39ee:	3a 89       	ldd	r19, Y+18	; 0x12
    39f0:	b9 01       	movw	r22, r18
    39f2:	0e 94 58 23 	call	0x46b0	; 0x46b0 <prvAllocateTCBAndStack>
    39f6:	9c 83       	std	Y+4, r25	; 0x04
    39f8:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    39fa:	8b 81       	ldd	r24, Y+3	; 0x03
    39fc:	9c 81       	ldd	r25, Y+4	; 0x04
    39fe:	00 97       	sbiw	r24, 0x00	; 0
    3a00:	09 f4       	brne	.+2      	; 0x3a04 <xTaskGenericCreate+0x5e>
    3a02:	99 c0       	rjmp	.+306    	; 0x3b36 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    3a04:	eb 81       	ldd	r30, Y+3	; 0x03
    3a06:	fc 81       	ldd	r31, Y+4	; 0x04
    3a08:	27 89       	ldd	r18, Z+23	; 0x17
    3a0a:	30 8d       	ldd	r19, Z+24	; 0x18
    3a0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a10:	01 97       	sbiw	r24, 0x01	; 1
    3a12:	82 0f       	add	r24, r18
    3a14:	93 1f       	adc	r25, r19
    3a16:	9a 83       	std	Y+2, r25	; 0x02
    3a18:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    3a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a1e:	28 85       	ldd	r18, Y+8	; 0x08
    3a20:	39 85       	ldd	r19, Y+9	; 0x09
    3a22:	eb 89       	ldd	r30, Y+19	; 0x13
    3a24:	fc 89       	ldd	r31, Y+20	; 0x14
    3a26:	aa 85       	ldd	r26, Y+10	; 0x0a
    3a28:	bb 85       	ldd	r27, Y+11	; 0x0b
    3a2a:	b9 01       	movw	r22, r18
    3a2c:	4e 85       	ldd	r20, Y+14	; 0x0e
    3a2e:	9f 01       	movw	r18, r30
    3a30:	8d 01       	movw	r16, r26
    3a32:	0e 94 3d 22 	call	0x447a	; 0x447a <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3a36:	89 81       	ldd	r24, Y+1	; 0x01
    3a38:	9a 81       	ldd	r25, Y+2	; 0x02
    3a3a:	2e 81       	ldd	r18, Y+6	; 0x06
    3a3c:	3f 81       	ldd	r19, Y+7	; 0x07
    3a3e:	4c 85       	ldd	r20, Y+12	; 0x0c
    3a40:	5d 85       	ldd	r21, Y+13	; 0x0d
    3a42:	b9 01       	movw	r22, r18
    3a44:	0e 94 80 15 	call	0x2b00	; 0x2b00 <pxPortInitialiseStack>
    3a48:	eb 81       	ldd	r30, Y+3	; 0x03
    3a4a:	fc 81       	ldd	r31, Y+4	; 0x04
    3a4c:	91 83       	std	Z+1, r25	; 0x01
    3a4e:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    3a50:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a52:	98 89       	ldd	r25, Y+16	; 0x10
    3a54:	00 97       	sbiw	r24, 0x00	; 0
    3a56:	31 f0       	breq	.+12     	; 0x3a64 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    3a58:	ef 85       	ldd	r30, Y+15	; 0x0f
    3a5a:	f8 89       	ldd	r31, Y+16	; 0x10
    3a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a60:	91 83       	std	Z+1, r25	; 0x01
    3a62:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    3a64:	0f b6       	in	r0, 0x3f	; 63
    3a66:	f8 94       	cli
    3a68:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    3a6a:	80 91 7f 05 	lds	r24, 0x057F
    3a6e:	8f 5f       	subi	r24, 0xFF	; 255
    3a70:	80 93 7f 05 	sts	0x057F, r24
			if( pxCurrentTCB == NULL )
    3a74:	80 91 7c 05 	lds	r24, 0x057C
    3a78:	90 91 7d 05 	lds	r25, 0x057D
    3a7c:	00 97       	sbiw	r24, 0x00	; 0
    3a7e:	69 f4       	brne	.+26     	; 0x3a9a <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    3a80:	8b 81       	ldd	r24, Y+3	; 0x03
    3a82:	9c 81       	ldd	r25, Y+4	; 0x04
    3a84:	90 93 7d 05 	sts	0x057D, r25
    3a88:	80 93 7c 05 	sts	0x057C, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    3a8c:	80 91 7f 05 	lds	r24, 0x057F
    3a90:	81 30       	cpi	r24, 0x01	; 1
    3a92:	a9 f4       	brne	.+42     	; 0x3abe <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    3a94:	0e 94 94 22 	call	0x4528	; 0x4528 <prvInitialiseTaskLists>
    3a98:	12 c0       	rjmp	.+36     	; 0x3abe <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    3a9a:	80 91 84 05 	lds	r24, 0x0584
    3a9e:	88 23       	and	r24, r24
    3aa0:	71 f4       	brne	.+28     	; 0x3abe <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    3aa2:	e0 91 7c 05 	lds	r30, 0x057C
    3aa6:	f0 91 7d 05 	lds	r31, 0x057D
    3aaa:	96 89       	ldd	r25, Z+22	; 0x16
    3aac:	8e 85       	ldd	r24, Y+14	; 0x0e
    3aae:	89 17       	cp	r24, r25
    3ab0:	30 f0       	brcs	.+12     	; 0x3abe <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    3ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab6:	90 93 7d 05 	sts	0x057D, r25
    3aba:	80 93 7c 05 	sts	0x057C, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    3abe:	eb 81       	ldd	r30, Y+3	; 0x03
    3ac0:	fc 81       	ldd	r31, Y+4	; 0x04
    3ac2:	96 89       	ldd	r25, Z+22	; 0x16
    3ac4:	80 91 82 05 	lds	r24, 0x0582
    3ac8:	89 17       	cp	r24, r25
    3aca:	28 f4       	brcc	.+10     	; 0x3ad6 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3acc:	eb 81       	ldd	r30, Y+3	; 0x03
    3ace:	fc 81       	ldd	r31, Y+4	; 0x04
    3ad0:	86 89       	ldd	r24, Z+22	; 0x16
    3ad2:	80 93 82 05 	sts	0x0582, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    3ad6:	80 91 89 05 	lds	r24, 0x0589
    3ada:	8f 5f       	subi	r24, 0xFF	; 255
    3adc:	80 93 89 05 	sts	0x0589, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    3ae0:	eb 81       	ldd	r30, Y+3	; 0x03
    3ae2:	fc 81       	ldd	r31, Y+4	; 0x04
    3ae4:	96 89       	ldd	r25, Z+22	; 0x16
    3ae6:	80 91 83 05 	lds	r24, 0x0583
    3aea:	89 17       	cp	r24, r25
    3aec:	28 f4       	brcc	.+10     	; 0x3af8 <xTaskGenericCreate+0x152>
    3aee:	eb 81       	ldd	r30, Y+3	; 0x03
    3af0:	fc 81       	ldd	r31, Y+4	; 0x04
    3af2:	86 89       	ldd	r24, Z+22	; 0x16
    3af4:	80 93 83 05 	sts	0x0583, r24
    3af8:	eb 81       	ldd	r30, Y+3	; 0x03
    3afa:	fc 81       	ldd	r31, Y+4	; 0x04
    3afc:	86 89       	ldd	r24, Z+22	; 0x16
    3afe:	28 2f       	mov	r18, r24
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	c9 01       	movw	r24, r18
    3b04:	88 0f       	add	r24, r24
    3b06:	99 1f       	adc	r25, r25
    3b08:	88 0f       	add	r24, r24
    3b0a:	99 1f       	adc	r25, r25
    3b0c:	88 0f       	add	r24, r24
    3b0e:	99 1f       	adc	r25, r25
    3b10:	82 0f       	add	r24, r18
    3b12:	93 1f       	adc	r25, r19
    3b14:	ac 01       	movw	r20, r24
    3b16:	46 57       	subi	r20, 0x76	; 118
    3b18:	5a 4f       	sbci	r21, 0xFA	; 250
    3b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b1e:	9c 01       	movw	r18, r24
    3b20:	2e 5f       	subi	r18, 0xFE	; 254
    3b22:	3f 4f       	sbci	r19, 0xFF	; 255
    3b24:	ca 01       	movw	r24, r20
    3b26:	b9 01       	movw	r22, r18
    3b28:	0e 94 cc 13 	call	0x2798	; 0x2798 <vListInsertEnd>

			xReturn = pdPASS;
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    3b30:	0f 90       	pop	r0
    3b32:	0f be       	out	0x3f, r0	; 63
    3b34:	02 c0       	rjmp	.+4      	; 0x3b3a <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3b36:	8f ef       	ldi	r24, 0xFF	; 255
    3b38:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    3b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b3c:	81 30       	cpi	r24, 0x01	; 1
    3b3e:	71 f4       	brne	.+28     	; 0x3b5c <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    3b40:	80 91 84 05 	lds	r24, 0x0584
    3b44:	88 23       	and	r24, r24
    3b46:	51 f0       	breq	.+20     	; 0x3b5c <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    3b48:	e0 91 7c 05 	lds	r30, 0x057C
    3b4c:	f0 91 7d 05 	lds	r31, 0x057D
    3b50:	96 89       	ldd	r25, Z+22	; 0x16
    3b52:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b54:	98 17       	cp	r25, r24
    3b56:	10 f4       	brcc	.+4      	; 0x3b5c <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    3b58:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <vPortYield>
			}
		}
	}

	return xReturn;
    3b5c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3b5e:	64 96       	adiw	r28, 0x14	; 20
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	f8 94       	cli
    3b64:	de bf       	out	0x3e, r29	; 62
    3b66:	0f be       	out	0x3f, r0	; 63
    3b68:	cd bf       	out	0x3d, r28	; 61
    3b6a:	cf 91       	pop	r28
    3b6c:	df 91       	pop	r29
    3b6e:	1f 91       	pop	r17
    3b70:	0f 91       	pop	r16
    3b72:	ff 90       	pop	r15
    3b74:	ef 90       	pop	r14
    3b76:	df 90       	pop	r13
    3b78:	cf 90       	pop	r12
    3b7a:	bf 90       	pop	r11
    3b7c:	af 90       	pop	r10
    3b7e:	08 95       	ret

00003b80 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    3b80:	df 93       	push	r29
    3b82:	cf 93       	push	r28
    3b84:	00 d0       	rcall	.+0      	; 0x3b86 <vTaskDelete+0x6>
    3b86:	00 d0       	rcall	.+0      	; 0x3b88 <vTaskDelete+0x8>
    3b88:	00 d0       	rcall	.+0      	; 0x3b8a <vTaskDelete+0xa>
    3b8a:	cd b7       	in	r28, 0x3d	; 61
    3b8c:	de b7       	in	r29, 0x3e	; 62
    3b8e:	9c 83       	std	Y+4, r25	; 0x04
    3b90:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	f8 94       	cli
    3b96:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    3b98:	20 91 7c 05 	lds	r18, 0x057C
    3b9c:	30 91 7d 05 	lds	r19, 0x057D
    3ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ba4:	82 17       	cp	r24, r18
    3ba6:	93 07       	cpc	r25, r19
    3ba8:	11 f4       	brne	.+4      	; 0x3bae <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    3baa:	1c 82       	std	Y+4, r1	; 0x04
    3bac:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    3bae:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb2:	00 97       	sbiw	r24, 0x00	; 0
    3bb4:	39 f4       	brne	.+14     	; 0x3bc4 <vTaskDelete+0x44>
    3bb6:	80 91 7c 05 	lds	r24, 0x057C
    3bba:	90 91 7d 05 	lds	r25, 0x057D
    3bbe:	9e 83       	std	Y+6, r25	; 0x06
    3bc0:	8d 83       	std	Y+5, r24	; 0x05
    3bc2:	04 c0       	rjmp	.+8      	; 0x3bcc <vTaskDelete+0x4c>
    3bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    3bc8:	9e 83       	std	Y+6, r25	; 0x06
    3bca:	8d 83       	std	Y+5, r24	; 0x05
    3bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bce:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd0:	9a 83       	std	Y+2, r25	; 0x02
    3bd2:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd8:	02 96       	adiw	r24, 0x02	; 2
    3bda:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3bde:	e9 81       	ldd	r30, Y+1	; 0x01
    3be0:	fa 81       	ldd	r31, Y+2	; 0x02
    3be2:	84 89       	ldd	r24, Z+20	; 0x14
    3be4:	95 89       	ldd	r25, Z+21	; 0x15
    3be6:	00 97       	sbiw	r24, 0x00	; 0
    3be8:	29 f0       	breq	.+10     	; 0x3bf4 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	9a 81       	ldd	r25, Y+2	; 0x02
    3bee:	0c 96       	adiw	r24, 0x0c	; 12
    3bf0:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    3bf4:	89 81       	ldd	r24, Y+1	; 0x01
    3bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf8:	9c 01       	movw	r18, r24
    3bfa:	2e 5f       	subi	r18, 0xFE	; 254
    3bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    3bfe:	8a ef       	ldi	r24, 0xFA	; 250
    3c00:	95 e0       	ldi	r25, 0x05	; 5
    3c02:	b9 01       	movw	r22, r18
    3c04:	0e 94 cc 13 	call	0x2798	; 0x2798 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3c08:	80 91 7e 05 	lds	r24, 0x057E
    3c0c:	8f 5f       	subi	r24, 0xFF	; 255
    3c0e:	80 93 7e 05 	sts	0x057E, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    3c12:	80 91 89 05 	lds	r24, 0x0589
    3c16:	8f 5f       	subi	r24, 0xFF	; 255
    3c18:	80 93 89 05 	sts	0x0589, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    3c1c:	0f 90       	pop	r0
    3c1e:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    3c20:	80 91 84 05 	lds	r24, 0x0584
    3c24:	88 23       	and	r24, r24
    3c26:	31 f0       	breq	.+12     	; 0x3c34 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    3c28:	8b 81       	ldd	r24, Y+3	; 0x03
    3c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c2c:	00 97       	sbiw	r24, 0x00	; 0
    3c2e:	11 f4       	brne	.+4      	; 0x3c34 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    3c30:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <vPortYield>
			}
		}
	}
    3c34:	26 96       	adiw	r28, 0x06	; 6
    3c36:	0f b6       	in	r0, 0x3f	; 63
    3c38:	f8 94       	cli
    3c3a:	de bf       	out	0x3e, r29	; 62
    3c3c:	0f be       	out	0x3f, r0	; 63
    3c3e:	cd bf       	out	0x3d, r28	; 61
    3c40:	cf 91       	pop	r28
    3c42:	df 91       	pop	r29
    3c44:	08 95       	ret

00003c46 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3c46:	df 93       	push	r29
    3c48:	cf 93       	push	r28
    3c4a:	cd b7       	in	r28, 0x3d	; 61
    3c4c:	de b7       	in	r29, 0x3e	; 62
    3c4e:	28 97       	sbiw	r28, 0x08	; 8
    3c50:	0f b6       	in	r0, 0x3f	; 63
    3c52:	f8 94       	cli
    3c54:	de bf       	out	0x3e, r29	; 62
    3c56:	0f be       	out	0x3f, r0	; 63
    3c58:	cd bf       	out	0x3d, r28	; 61
    3c5a:	9e 83       	std	Y+6, r25	; 0x06
    3c5c:	8d 83       	std	Y+5, r24	; 0x05
    3c5e:	78 87       	std	Y+8, r23	; 0x08
    3c60:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    3c62:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3c64:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3c68:	ed 81       	ldd	r30, Y+5	; 0x05
    3c6a:	fe 81       	ldd	r31, Y+6	; 0x06
    3c6c:	20 81       	ld	r18, Z
    3c6e:	31 81       	ldd	r19, Z+1	; 0x01
    3c70:	8f 81       	ldd	r24, Y+7	; 0x07
    3c72:	98 85       	ldd	r25, Y+8	; 0x08
    3c74:	82 0f       	add	r24, r18
    3c76:	93 1f       	adc	r25, r19
    3c78:	9c 83       	std	Y+4, r25	; 0x04
    3c7a:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    3c7c:	ed 81       	ldd	r30, Y+5	; 0x05
    3c7e:	fe 81       	ldd	r31, Y+6	; 0x06
    3c80:	20 81       	ld	r18, Z
    3c82:	31 81       	ldd	r19, Z+1	; 0x01
    3c84:	80 91 80 05 	lds	r24, 0x0580
    3c88:	90 91 81 05 	lds	r25, 0x0581
    3c8c:	82 17       	cp	r24, r18
    3c8e:	93 07       	cpc	r25, r19
    3c90:	a8 f4       	brcc	.+42     	; 0x3cbc <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    3c92:	ed 81       	ldd	r30, Y+5	; 0x05
    3c94:	fe 81       	ldd	r31, Y+6	; 0x06
    3c96:	20 81       	ld	r18, Z
    3c98:	31 81       	ldd	r19, Z+1	; 0x01
    3c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c9e:	82 17       	cp	r24, r18
    3ca0:	93 07       	cpc	r25, r19
    3ca2:	00 f5       	brcc	.+64     	; 0x3ce4 <vTaskDelayUntil+0x9e>
    3ca4:	20 91 80 05 	lds	r18, 0x0580
    3ca8:	30 91 81 05 	lds	r19, 0x0581
    3cac:	8b 81       	ldd	r24, Y+3	; 0x03
    3cae:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb0:	28 17       	cp	r18, r24
    3cb2:	39 07       	cpc	r19, r25
    3cb4:	b8 f4       	brcc	.+46     	; 0x3ce4 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	89 83       	std	Y+1, r24	; 0x01
    3cba:	14 c0       	rjmp	.+40     	; 0x3ce4 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3cbc:	ed 81       	ldd	r30, Y+5	; 0x05
    3cbe:	fe 81       	ldd	r31, Y+6	; 0x06
    3cc0:	20 81       	ld	r18, Z
    3cc2:	31 81       	ldd	r19, Z+1	; 0x01
    3cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc8:	82 17       	cp	r24, r18
    3cca:	93 07       	cpc	r25, r19
    3ccc:	48 f0       	brcs	.+18     	; 0x3ce0 <vTaskDelayUntil+0x9a>
    3cce:	20 91 80 05 	lds	r18, 0x0580
    3cd2:	30 91 81 05 	lds	r19, 0x0581
    3cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cda:	28 17       	cp	r18, r24
    3cdc:	39 07       	cpc	r19, r25
    3cde:	10 f4       	brcc	.+4      	; 0x3ce4 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3ce4:	ed 81       	ldd	r30, Y+5	; 0x05
    3ce6:	fe 81       	ldd	r31, Y+6	; 0x06
    3ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cea:	9c 81       	ldd	r25, Y+4	; 0x04
    3cec:	91 83       	std	Z+1, r25	; 0x01
    3cee:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	88 23       	and	r24, r24
    3cf4:	59 f0       	breq	.+22     	; 0x3d0c <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3cf6:	80 91 7c 05 	lds	r24, 0x057C
    3cfa:	90 91 7d 05 	lds	r25, 0x057D
    3cfe:	02 96       	adiw	r24, 0x02	; 2
    3d00:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3d04:	8b 81       	ldd	r24, Y+3	; 0x03
    3d06:	9c 81       	ldd	r25, Y+4	; 0x04
    3d08:	0e 94 0f 23 	call	0x461e	; 0x461e <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3d0c:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <xTaskResumeAll>
    3d10:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3d12:	8a 81       	ldd	r24, Y+2	; 0x02
    3d14:	88 23       	and	r24, r24
    3d16:	11 f4       	brne	.+4      	; 0x3d1c <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    3d18:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <vPortYield>
		}
	}
    3d1c:	28 96       	adiw	r28, 0x08	; 8
    3d1e:	0f b6       	in	r0, 0x3f	; 63
    3d20:	f8 94       	cli
    3d22:	de bf       	out	0x3e, r29	; 62
    3d24:	0f be       	out	0x3f, r0	; 63
    3d26:	cd bf       	out	0x3d, r28	; 61
    3d28:	cf 91       	pop	r28
    3d2a:	df 91       	pop	r29
    3d2c:	08 95       	ret

00003d2e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3d2e:	df 93       	push	r29
    3d30:	cf 93       	push	r28
    3d32:	00 d0       	rcall	.+0      	; 0x3d34 <vTaskDelay+0x6>
    3d34:	00 d0       	rcall	.+0      	; 0x3d36 <vTaskDelay+0x8>
    3d36:	0f 92       	push	r0
    3d38:	cd b7       	in	r28, 0x3d	; 61
    3d3a:	de b7       	in	r29, 0x3e	; 62
    3d3c:	9d 83       	std	Y+5, r25	; 0x05
    3d3e:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3d40:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3d42:	8c 81       	ldd	r24, Y+4	; 0x04
    3d44:	9d 81       	ldd	r25, Y+5	; 0x05
    3d46:	00 97       	sbiw	r24, 0x00	; 0
    3d48:	d1 f0       	breq	.+52     	; 0x3d7e <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    3d4a:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3d4e:	20 91 80 05 	lds	r18, 0x0580
    3d52:	30 91 81 05 	lds	r19, 0x0581
    3d56:	8c 81       	ldd	r24, Y+4	; 0x04
    3d58:	9d 81       	ldd	r25, Y+5	; 0x05
    3d5a:	82 0f       	add	r24, r18
    3d5c:	93 1f       	adc	r25, r19
    3d5e:	9b 83       	std	Y+3, r25	; 0x03
    3d60:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3d62:	80 91 7c 05 	lds	r24, 0x057C
    3d66:	90 91 7d 05 	lds	r25, 0x057D
    3d6a:	02 96       	adiw	r24, 0x02	; 2
    3d6c:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3d70:	8a 81       	ldd	r24, Y+2	; 0x02
    3d72:	9b 81       	ldd	r25, Y+3	; 0x03
    3d74:	0e 94 0f 23 	call	0x461e	; 0x461e <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3d78:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <xTaskResumeAll>
    3d7c:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3d7e:	89 81       	ldd	r24, Y+1	; 0x01
    3d80:	88 23       	and	r24, r24
    3d82:	11 f4       	brne	.+4      	; 0x3d88 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    3d84:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <vPortYield>
		}
	}
    3d88:	0f 90       	pop	r0
    3d8a:	0f 90       	pop	r0
    3d8c:	0f 90       	pop	r0
    3d8e:	0f 90       	pop	r0
    3d90:	0f 90       	pop	r0
    3d92:	cf 91       	pop	r28
    3d94:	df 91       	pop	r29
    3d96:	08 95       	ret

00003d98 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3d98:	af 92       	push	r10
    3d9a:	bf 92       	push	r11
    3d9c:	cf 92       	push	r12
    3d9e:	df 92       	push	r13
    3da0:	ef 92       	push	r14
    3da2:	ff 92       	push	r15
    3da4:	0f 93       	push	r16
    3da6:	df 93       	push	r29
    3da8:	cf 93       	push	r28
    3daa:	0f 92       	push	r0
    3dac:	cd b7       	in	r28, 0x3d	; 61
    3dae:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    3db0:	21 e8       	ldi	r18, 0x81	; 129
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	83 e3       	ldi	r24, 0x33	; 51
    3db6:	92 e2       	ldi	r25, 0x22	; 34
    3db8:	b9 01       	movw	r22, r18
    3dba:	45 e5       	ldi	r20, 0x55	; 85
    3dbc:	50 e0       	ldi	r21, 0x00	; 0
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	00 e0       	ldi	r16, 0x00	; 0
    3dc4:	ee 24       	eor	r14, r14
    3dc6:	ff 24       	eor	r15, r15
    3dc8:	cc 24       	eor	r12, r12
    3dca:	dd 24       	eor	r13, r13
    3dcc:	aa 24       	eor	r10, r10
    3dce:	bb 24       	eor	r11, r11
    3dd0:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <xTaskGenericCreate>
    3dd4:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3dd6:	89 81       	ldd	r24, Y+1	; 0x01
    3dd8:	81 30       	cpi	r24, 0x01	; 1
    3dda:	51 f4       	brne	.+20     	; 0x3df0 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3ddc:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    3dde:	81 e0       	ldi	r24, 0x01	; 1
    3de0:	80 93 84 05 	sts	0x0584, r24
		xTickCount = ( portTickType ) 0U;
    3de4:	10 92 81 05 	sts	0x0581, r1
    3de8:	10 92 80 05 	sts	0x0580, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3dec:	0e 94 03 17 	call	0x2e06	; 0x2e06 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    3df0:	0f 90       	pop	r0
    3df2:	cf 91       	pop	r28
    3df4:	df 91       	pop	r29
    3df6:	0f 91       	pop	r16
    3df8:	ff 90       	pop	r15
    3dfa:	ef 90       	pop	r14
    3dfc:	df 90       	pop	r13
    3dfe:	cf 90       	pop	r12
    3e00:	bf 90       	pop	r11
    3e02:	af 90       	pop	r10
    3e04:	08 95       	ret

00003e06 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3e06:	df 93       	push	r29
    3e08:	cf 93       	push	r28
    3e0a:	cd b7       	in	r28, 0x3d	; 61
    3e0c:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3e0e:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    3e10:	10 92 84 05 	sts	0x0584, r1
	vPortEndScheduler();
    3e14:	0e 94 38 17 	call	0x2e70	; 0x2e70 <vPortEndScheduler>
}
    3e18:	cf 91       	pop	r28
    3e1a:	df 91       	pop	r29
    3e1c:	08 95       	ret

00003e1e <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3e1e:	df 93       	push	r29
    3e20:	cf 93       	push	r28
    3e22:	cd b7       	in	r28, 0x3d	; 61
    3e24:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3e26:	80 91 85 05 	lds	r24, 0x0585
    3e2a:	8f 5f       	subi	r24, 0xFF	; 255
    3e2c:	80 93 85 05 	sts	0x0585, r24
}
    3e30:	cf 91       	pop	r28
    3e32:	df 91       	pop	r29
    3e34:	08 95       	ret

00003e36 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3e36:	df 93       	push	r29
    3e38:	cf 93       	push	r28
    3e3a:	00 d0       	rcall	.+0      	; 0x3e3c <xTaskResumeAll+0x6>
    3e3c:	00 d0       	rcall	.+0      	; 0x3e3e <xTaskResumeAll+0x8>
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3e42:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3e44:	0f b6       	in	r0, 0x3f	; 63
    3e46:	f8 94       	cli
    3e48:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    3e4a:	80 91 85 05 	lds	r24, 0x0585
    3e4e:	81 50       	subi	r24, 0x01	; 1
    3e50:	80 93 85 05 	sts	0x0585, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3e54:	80 91 85 05 	lds	r24, 0x0585
    3e58:	88 23       	and	r24, r24
    3e5a:	09 f0       	breq	.+2      	; 0x3e5e <xTaskResumeAll+0x28>
    3e5c:	6c c0       	rjmp	.+216    	; 0x3f36 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3e5e:	80 91 7f 05 	lds	r24, 0x057F
    3e62:	88 23       	and	r24, r24
    3e64:	09 f4       	brne	.+2      	; 0x3e68 <xTaskResumeAll+0x32>
    3e66:	67 c0       	rjmp	.+206    	; 0x3f36 <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3e68:	19 82       	std	Y+1, r1	; 0x01
    3e6a:	41 c0       	rjmp	.+130    	; 0x3eee <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3e6c:	e0 91 f6 05 	lds	r30, 0x05F6
    3e70:	f0 91 f7 05 	lds	r31, 0x05F7
    3e74:	86 81       	ldd	r24, Z+6	; 0x06
    3e76:	97 81       	ldd	r25, Z+7	; 0x07
    3e78:	9c 83       	std	Y+4, r25	; 0x04
    3e7a:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    3e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e80:	0c 96       	adiw	r24, 0x0c	; 12
    3e82:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3e86:	8b 81       	ldd	r24, Y+3	; 0x03
    3e88:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8a:	02 96       	adiw	r24, 0x02	; 2
    3e8c:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3e90:	eb 81       	ldd	r30, Y+3	; 0x03
    3e92:	fc 81       	ldd	r31, Y+4	; 0x04
    3e94:	96 89       	ldd	r25, Z+22	; 0x16
    3e96:	80 91 83 05 	lds	r24, 0x0583
    3e9a:	89 17       	cp	r24, r25
    3e9c:	28 f4       	brcc	.+10     	; 0x3ea8 <xTaskResumeAll+0x72>
    3e9e:	eb 81       	ldd	r30, Y+3	; 0x03
    3ea0:	fc 81       	ldd	r31, Y+4	; 0x04
    3ea2:	86 89       	ldd	r24, Z+22	; 0x16
    3ea4:	80 93 83 05 	sts	0x0583, r24
    3ea8:	eb 81       	ldd	r30, Y+3	; 0x03
    3eaa:	fc 81       	ldd	r31, Y+4	; 0x04
    3eac:	86 89       	ldd	r24, Z+22	; 0x16
    3eae:	28 2f       	mov	r18, r24
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
    3eb2:	c9 01       	movw	r24, r18
    3eb4:	88 0f       	add	r24, r24
    3eb6:	99 1f       	adc	r25, r25
    3eb8:	88 0f       	add	r24, r24
    3eba:	99 1f       	adc	r25, r25
    3ebc:	88 0f       	add	r24, r24
    3ebe:	99 1f       	adc	r25, r25
    3ec0:	82 0f       	add	r24, r18
    3ec2:	93 1f       	adc	r25, r19
    3ec4:	86 57       	subi	r24, 0x76	; 118
    3ec6:	9a 4f       	sbci	r25, 0xFA	; 250
    3ec8:	2b 81       	ldd	r18, Y+3	; 0x03
    3eca:	3c 81       	ldd	r19, Y+4	; 0x04
    3ecc:	2e 5f       	subi	r18, 0xFE	; 254
    3ece:	3f 4f       	sbci	r19, 0xFF	; 255
    3ed0:	b9 01       	movw	r22, r18
    3ed2:	0e 94 cc 13 	call	0x2798	; 0x2798 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3ed6:	eb 81       	ldd	r30, Y+3	; 0x03
    3ed8:	fc 81       	ldd	r31, Y+4	; 0x04
    3eda:	96 89       	ldd	r25, Z+22	; 0x16
    3edc:	e0 91 7c 05 	lds	r30, 0x057C
    3ee0:	f0 91 7d 05 	lds	r31, 0x057D
    3ee4:	86 89       	ldd	r24, Z+22	; 0x16
    3ee6:	98 17       	cp	r25, r24
    3ee8:	10 f0       	brcs	.+4      	; 0x3eee <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3eee:	80 91 f1 05 	lds	r24, 0x05F1
    3ef2:	88 23       	and	r24, r24
    3ef4:	09 f0       	breq	.+2      	; 0x3ef8 <xTaskResumeAll+0xc2>
    3ef6:	ba cf       	rjmp	.-140    	; 0x3e6c <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3ef8:	80 91 86 05 	lds	r24, 0x0586
    3efc:	88 23       	and	r24, r24
    3efe:	71 f0       	breq	.+28     	; 0x3f1c <xTaskResumeAll+0xe6>
    3f00:	07 c0       	rjmp	.+14     	; 0x3f10 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    3f02:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <vTaskIncrementTick>
						--uxMissedTicks;
    3f06:	80 91 86 05 	lds	r24, 0x0586
    3f0a:	81 50       	subi	r24, 0x01	; 1
    3f0c:	80 93 86 05 	sts	0x0586, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3f10:	80 91 86 05 	lds	r24, 0x0586
    3f14:	88 23       	and	r24, r24
    3f16:	a9 f7       	brne	.-22     	; 0x3f02 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    3f18:	81 e0       	ldi	r24, 0x01	; 1
    3f1a:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3f1c:	89 81       	ldd	r24, Y+1	; 0x01
    3f1e:	81 30       	cpi	r24, 0x01	; 1
    3f20:	21 f0       	breq	.+8      	; 0x3f2a <xTaskResumeAll+0xf4>
    3f22:	80 91 87 05 	lds	r24, 0x0587
    3f26:	81 30       	cpi	r24, 0x01	; 1
    3f28:	31 f4       	brne	.+12     	; 0x3f36 <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    3f2e:	10 92 87 05 	sts	0x0587, r1
					portYIELD_WITHIN_API();
    3f32:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3f36:	0f 90       	pop	r0
    3f38:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    3f3a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3f3c:	0f 90       	pop	r0
    3f3e:	0f 90       	pop	r0
    3f40:	0f 90       	pop	r0
    3f42:	0f 90       	pop	r0
    3f44:	cf 91       	pop	r28
    3f46:	df 91       	pop	r29
    3f48:	08 95       	ret

00003f4a <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3f4a:	df 93       	push	r29
    3f4c:	cf 93       	push	r28
    3f4e:	00 d0       	rcall	.+0      	; 0x3f50 <xTaskGetTickCount+0x6>
    3f50:	cd b7       	in	r28, 0x3d	; 61
    3f52:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3f54:	0f b6       	in	r0, 0x3f	; 63
    3f56:	f8 94       	cli
    3f58:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    3f5a:	80 91 80 05 	lds	r24, 0x0580
    3f5e:	90 91 81 05 	lds	r25, 0x0581
    3f62:	9a 83       	std	Y+2, r25	; 0x02
    3f64:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    3f66:	0f 90       	pop	r0
    3f68:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    3f6a:	89 81       	ldd	r24, Y+1	; 0x01
    3f6c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3f6e:	0f 90       	pop	r0
    3f70:	0f 90       	pop	r0
    3f72:	cf 91       	pop	r28
    3f74:	df 91       	pop	r29
    3f76:	08 95       	ret

00003f78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    3f78:	df 93       	push	r29
    3f7a:	cf 93       	push	r28
    3f7c:	00 d0       	rcall	.+0      	; 0x3f7e <xTaskGetTickCountFromISR+0x6>
    3f7e:	0f 92       	push	r0
    3f80:	cd b7       	in	r28, 0x3d	; 61
    3f82:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3f84:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    3f86:	80 91 80 05 	lds	r24, 0x0580
    3f8a:	90 91 81 05 	lds	r25, 0x0581
    3f8e:	9b 83       	std	Y+3, r25	; 0x03
    3f90:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3f92:	8a 81       	ldd	r24, Y+2	; 0x02
    3f94:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3f96:	0f 90       	pop	r0
    3f98:	0f 90       	pop	r0
    3f9a:	0f 90       	pop	r0
    3f9c:	cf 91       	pop	r28
    3f9e:	df 91       	pop	r29
    3fa0:	08 95       	ret

00003fa2 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3fa2:	df 93       	push	r29
    3fa4:	cf 93       	push	r28
    3fa6:	cd b7       	in	r28, 0x3d	; 61
    3fa8:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3faa:	80 91 7f 05 	lds	r24, 0x057F
}
    3fae:	cf 91       	pop	r28
    3fb0:	df 91       	pop	r29
    3fb2:	08 95       	ret

00003fb4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3fb4:	df 93       	push	r29
    3fb6:	cf 93       	push	r28
    3fb8:	00 d0       	rcall	.+0      	; 0x3fba <vTaskIncrementTick+0x6>
    3fba:	00 d0       	rcall	.+0      	; 0x3fbc <vTaskIncrementTick+0x8>
    3fbc:	00 d0       	rcall	.+0      	; 0x3fbe <vTaskIncrementTick+0xa>
    3fbe:	cd b7       	in	r28, 0x3d	; 61
    3fc0:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3fc2:	80 91 85 05 	lds	r24, 0x0585
    3fc6:	88 23       	and	r24, r24
    3fc8:	09 f0       	breq	.+2      	; 0x3fcc <vTaskIncrementTick+0x18>
    3fca:	bb c0       	rjmp	.+374    	; 0x4142 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    3fcc:	80 91 80 05 	lds	r24, 0x0580
    3fd0:	90 91 81 05 	lds	r25, 0x0581
    3fd4:	01 96       	adiw	r24, 0x01	; 1
    3fd6:	90 93 81 05 	sts	0x0581, r25
    3fda:	80 93 80 05 	sts	0x0580, r24
		if( xTickCount == ( portTickType ) 0U )
    3fde:	80 91 80 05 	lds	r24, 0x0580
    3fe2:	90 91 81 05 	lds	r25, 0x0581
    3fe6:	00 97       	sbiw	r24, 0x00	; 0
    3fe8:	d1 f5       	brne	.+116    	; 0x405e <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3fea:	80 91 ed 05 	lds	r24, 0x05ED
    3fee:	90 91 ee 05 	lds	r25, 0x05EE
    3ff2:	9c 83       	std	Y+4, r25	; 0x04
    3ff4:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3ff6:	80 91 ef 05 	lds	r24, 0x05EF
    3ffa:	90 91 f0 05 	lds	r25, 0x05F0
    3ffe:	90 93 ee 05 	sts	0x05EE, r25
    4002:	80 93 ed 05 	sts	0x05ED, r24
			pxOverflowDelayedTaskList = pxTemp;
    4006:	8b 81       	ldd	r24, Y+3	; 0x03
    4008:	9c 81       	ldd	r25, Y+4	; 0x04
    400a:	90 93 f0 05 	sts	0x05F0, r25
    400e:	80 93 ef 05 	sts	0x05EF, r24
			xNumOfOverflows++;
    4012:	80 91 88 05 	lds	r24, 0x0588
    4016:	8f 5f       	subi	r24, 0xFF	; 255
    4018:	80 93 88 05 	sts	0x0588, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    401c:	e0 91 ed 05 	lds	r30, 0x05ED
    4020:	f0 91 ee 05 	lds	r31, 0x05EE
    4024:	80 81       	ld	r24, Z
    4026:	88 23       	and	r24, r24
    4028:	39 f4       	brne	.+14     	; 0x4038 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    402a:	8f ef       	ldi	r24, 0xFF	; 255
    402c:	9f ef       	ldi	r25, 0xFF	; 255
    402e:	90 93 8f 00 	sts	0x008F, r25
    4032:	80 93 8e 00 	sts	0x008E, r24
    4036:	13 c0       	rjmp	.+38     	; 0x405e <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4038:	e0 91 ed 05 	lds	r30, 0x05ED
    403c:	f0 91 ee 05 	lds	r31, 0x05EE
    4040:	05 80       	ldd	r0, Z+5	; 0x05
    4042:	f6 81       	ldd	r31, Z+6	; 0x06
    4044:	e0 2d       	mov	r30, r0
    4046:	86 81       	ldd	r24, Z+6	; 0x06
    4048:	97 81       	ldd	r25, Z+7	; 0x07
    404a:	9e 83       	std	Y+6, r25	; 0x06
    404c:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    404e:	ed 81       	ldd	r30, Y+5	; 0x05
    4050:	fe 81       	ldd	r31, Y+6	; 0x06
    4052:	82 81       	ldd	r24, Z+2	; 0x02
    4054:	93 81       	ldd	r25, Z+3	; 0x03
    4056:	90 93 8f 00 	sts	0x008F, r25
    405a:	80 93 8e 00 	sts	0x008E, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    405e:	20 91 80 05 	lds	r18, 0x0580
    4062:	30 91 81 05 	lds	r19, 0x0581
    4066:	80 91 8e 00 	lds	r24, 0x008E
    406a:	90 91 8f 00 	lds	r25, 0x008F
    406e:	28 17       	cp	r18, r24
    4070:	39 07       	cpc	r19, r25
    4072:	08 f4       	brcc	.+2      	; 0x4076 <vTaskIncrementTick+0xc2>
    4074:	6b c0       	rjmp	.+214    	; 0x414c <vTaskIncrementTick+0x198>
    4076:	e0 91 ed 05 	lds	r30, 0x05ED
    407a:	f0 91 ee 05 	lds	r31, 0x05EE
    407e:	80 81       	ld	r24, Z
    4080:	88 23       	and	r24, r24
    4082:	39 f4       	brne	.+14     	; 0x4092 <vTaskIncrementTick+0xde>
    4084:	8f ef       	ldi	r24, 0xFF	; 255
    4086:	9f ef       	ldi	r25, 0xFF	; 255
    4088:	90 93 8f 00 	sts	0x008F, r25
    408c:	80 93 8e 00 	sts	0x008E, r24
    4090:	5d c0       	rjmp	.+186    	; 0x414c <vTaskIncrementTick+0x198>
    4092:	e0 91 ed 05 	lds	r30, 0x05ED
    4096:	f0 91 ee 05 	lds	r31, 0x05EE
    409a:	05 80       	ldd	r0, Z+5	; 0x05
    409c:	f6 81       	ldd	r31, Z+6	; 0x06
    409e:	e0 2d       	mov	r30, r0
    40a0:	86 81       	ldd	r24, Z+6	; 0x06
    40a2:	97 81       	ldd	r25, Z+7	; 0x07
    40a4:	9e 83       	std	Y+6, r25	; 0x06
    40a6:	8d 83       	std	Y+5, r24	; 0x05
    40a8:	ed 81       	ldd	r30, Y+5	; 0x05
    40aa:	fe 81       	ldd	r31, Y+6	; 0x06
    40ac:	82 81       	ldd	r24, Z+2	; 0x02
    40ae:	93 81       	ldd	r25, Z+3	; 0x03
    40b0:	9a 83       	std	Y+2, r25	; 0x02
    40b2:	89 83       	std	Y+1, r24	; 0x01
    40b4:	20 91 80 05 	lds	r18, 0x0580
    40b8:	30 91 81 05 	lds	r19, 0x0581
    40bc:	89 81       	ldd	r24, Y+1	; 0x01
    40be:	9a 81       	ldd	r25, Y+2	; 0x02
    40c0:	28 17       	cp	r18, r24
    40c2:	39 07       	cpc	r19, r25
    40c4:	38 f4       	brcc	.+14     	; 0x40d4 <vTaskIncrementTick+0x120>
    40c6:	89 81       	ldd	r24, Y+1	; 0x01
    40c8:	9a 81       	ldd	r25, Y+2	; 0x02
    40ca:	90 93 8f 00 	sts	0x008F, r25
    40ce:	80 93 8e 00 	sts	0x008E, r24
    40d2:	3c c0       	rjmp	.+120    	; 0x414c <vTaskIncrementTick+0x198>
    40d4:	8d 81       	ldd	r24, Y+5	; 0x05
    40d6:	9e 81       	ldd	r25, Y+6	; 0x06
    40d8:	02 96       	adiw	r24, 0x02	; 2
    40da:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>
    40de:	ed 81       	ldd	r30, Y+5	; 0x05
    40e0:	fe 81       	ldd	r31, Y+6	; 0x06
    40e2:	84 89       	ldd	r24, Z+20	; 0x14
    40e4:	95 89       	ldd	r25, Z+21	; 0x15
    40e6:	00 97       	sbiw	r24, 0x00	; 0
    40e8:	29 f0       	breq	.+10     	; 0x40f4 <vTaskIncrementTick+0x140>
    40ea:	8d 81       	ldd	r24, Y+5	; 0x05
    40ec:	9e 81       	ldd	r25, Y+6	; 0x06
    40ee:	0c 96       	adiw	r24, 0x0c	; 12
    40f0:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>
    40f4:	ed 81       	ldd	r30, Y+5	; 0x05
    40f6:	fe 81       	ldd	r31, Y+6	; 0x06
    40f8:	96 89       	ldd	r25, Z+22	; 0x16
    40fa:	80 91 83 05 	lds	r24, 0x0583
    40fe:	89 17       	cp	r24, r25
    4100:	28 f4       	brcc	.+10     	; 0x410c <vTaskIncrementTick+0x158>
    4102:	ed 81       	ldd	r30, Y+5	; 0x05
    4104:	fe 81       	ldd	r31, Y+6	; 0x06
    4106:	86 89       	ldd	r24, Z+22	; 0x16
    4108:	80 93 83 05 	sts	0x0583, r24
    410c:	ed 81       	ldd	r30, Y+5	; 0x05
    410e:	fe 81       	ldd	r31, Y+6	; 0x06
    4110:	86 89       	ldd	r24, Z+22	; 0x16
    4112:	28 2f       	mov	r18, r24
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	c9 01       	movw	r24, r18
    4118:	88 0f       	add	r24, r24
    411a:	99 1f       	adc	r25, r25
    411c:	88 0f       	add	r24, r24
    411e:	99 1f       	adc	r25, r25
    4120:	88 0f       	add	r24, r24
    4122:	99 1f       	adc	r25, r25
    4124:	82 0f       	add	r24, r18
    4126:	93 1f       	adc	r25, r19
    4128:	ac 01       	movw	r20, r24
    412a:	46 57       	subi	r20, 0x76	; 118
    412c:	5a 4f       	sbci	r21, 0xFA	; 250
    412e:	8d 81       	ldd	r24, Y+5	; 0x05
    4130:	9e 81       	ldd	r25, Y+6	; 0x06
    4132:	9c 01       	movw	r18, r24
    4134:	2e 5f       	subi	r18, 0xFE	; 254
    4136:	3f 4f       	sbci	r19, 0xFF	; 255
    4138:	ca 01       	movw	r24, r20
    413a:	b9 01       	movw	r22, r18
    413c:	0e 94 cc 13 	call	0x2798	; 0x2798 <vListInsertEnd>
    4140:	9a cf       	rjmp	.-204    	; 0x4076 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    4142:	80 91 86 05 	lds	r24, 0x0586
    4146:	8f 5f       	subi	r24, 0xFF	; 255
    4148:	80 93 86 05 	sts	0x0586, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    414c:	26 96       	adiw	r28, 0x06	; 6
    414e:	0f b6       	in	r0, 0x3f	; 63
    4150:	f8 94       	cli
    4152:	de bf       	out	0x3e, r29	; 62
    4154:	0f be       	out	0x3f, r0	; 63
    4156:	cd bf       	out	0x3d, r28	; 61
    4158:	cf 91       	pop	r28
    415a:	df 91       	pop	r29
    415c:	08 95       	ret

0000415e <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    415e:	df 93       	push	r29
    4160:	cf 93       	push	r28
    4162:	00 d0       	rcall	.+0      	; 0x4164 <vTaskSwitchContext+0x6>
    4164:	cd b7       	in	r28, 0x3d	; 61
    4166:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    4168:	80 91 85 05 	lds	r24, 0x0585
    416c:	88 23       	and	r24, r24
    416e:	49 f0       	breq	.+18     	; 0x4182 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    4170:	81 e0       	ldi	r24, 0x01	; 1
    4172:	80 93 87 05 	sts	0x0587, r24
    4176:	54 c0       	rjmp	.+168    	; 0x4220 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    4178:	80 91 83 05 	lds	r24, 0x0583
    417c:	81 50       	subi	r24, 0x01	; 1
    417e:	80 93 83 05 	sts	0x0583, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    4182:	80 91 83 05 	lds	r24, 0x0583
    4186:	28 2f       	mov	r18, r24
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	c9 01       	movw	r24, r18
    418c:	88 0f       	add	r24, r24
    418e:	99 1f       	adc	r25, r25
    4190:	88 0f       	add	r24, r24
    4192:	99 1f       	adc	r25, r25
    4194:	88 0f       	add	r24, r24
    4196:	99 1f       	adc	r25, r25
    4198:	82 0f       	add	r24, r18
    419a:	93 1f       	adc	r25, r19
    419c:	fc 01       	movw	r30, r24
    419e:	e6 57       	subi	r30, 0x76	; 118
    41a0:	fa 4f       	sbci	r31, 0xFA	; 250
    41a2:	80 81       	ld	r24, Z
    41a4:	88 23       	and	r24, r24
    41a6:	41 f3       	breq	.-48     	; 0x4178 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    41a8:	80 91 83 05 	lds	r24, 0x0583
    41ac:	28 2f       	mov	r18, r24
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	c9 01       	movw	r24, r18
    41b2:	88 0f       	add	r24, r24
    41b4:	99 1f       	adc	r25, r25
    41b6:	88 0f       	add	r24, r24
    41b8:	99 1f       	adc	r25, r25
    41ba:	88 0f       	add	r24, r24
    41bc:	99 1f       	adc	r25, r25
    41be:	82 0f       	add	r24, r18
    41c0:	93 1f       	adc	r25, r19
    41c2:	86 57       	subi	r24, 0x76	; 118
    41c4:	9a 4f       	sbci	r25, 0xFA	; 250
    41c6:	9a 83       	std	Y+2, r25	; 0x02
    41c8:	89 83       	std	Y+1, r24	; 0x01
    41ca:	e9 81       	ldd	r30, Y+1	; 0x01
    41cc:	fa 81       	ldd	r31, Y+2	; 0x02
    41ce:	01 80       	ldd	r0, Z+1	; 0x01
    41d0:	f2 81       	ldd	r31, Z+2	; 0x02
    41d2:	e0 2d       	mov	r30, r0
    41d4:	82 81       	ldd	r24, Z+2	; 0x02
    41d6:	93 81       	ldd	r25, Z+3	; 0x03
    41d8:	e9 81       	ldd	r30, Y+1	; 0x01
    41da:	fa 81       	ldd	r31, Y+2	; 0x02
    41dc:	92 83       	std	Z+2, r25	; 0x02
    41de:	81 83       	std	Z+1, r24	; 0x01
    41e0:	e9 81       	ldd	r30, Y+1	; 0x01
    41e2:	fa 81       	ldd	r31, Y+2	; 0x02
    41e4:	21 81       	ldd	r18, Z+1	; 0x01
    41e6:	32 81       	ldd	r19, Z+2	; 0x02
    41e8:	89 81       	ldd	r24, Y+1	; 0x01
    41ea:	9a 81       	ldd	r25, Y+2	; 0x02
    41ec:	03 96       	adiw	r24, 0x03	; 3
    41ee:	28 17       	cp	r18, r24
    41f0:	39 07       	cpc	r19, r25
    41f2:	59 f4       	brne	.+22     	; 0x420a <vTaskSwitchContext+0xac>
    41f4:	e9 81       	ldd	r30, Y+1	; 0x01
    41f6:	fa 81       	ldd	r31, Y+2	; 0x02
    41f8:	01 80       	ldd	r0, Z+1	; 0x01
    41fa:	f2 81       	ldd	r31, Z+2	; 0x02
    41fc:	e0 2d       	mov	r30, r0
    41fe:	82 81       	ldd	r24, Z+2	; 0x02
    4200:	93 81       	ldd	r25, Z+3	; 0x03
    4202:	e9 81       	ldd	r30, Y+1	; 0x01
    4204:	fa 81       	ldd	r31, Y+2	; 0x02
    4206:	92 83       	std	Z+2, r25	; 0x02
    4208:	81 83       	std	Z+1, r24	; 0x01
    420a:	e9 81       	ldd	r30, Y+1	; 0x01
    420c:	fa 81       	ldd	r31, Y+2	; 0x02
    420e:	01 80       	ldd	r0, Z+1	; 0x01
    4210:	f2 81       	ldd	r31, Z+2	; 0x02
    4212:	e0 2d       	mov	r30, r0
    4214:	86 81       	ldd	r24, Z+6	; 0x06
    4216:	97 81       	ldd	r25, Z+7	; 0x07
    4218:	90 93 7d 05 	sts	0x057D, r25
    421c:	80 93 7c 05 	sts	0x057C, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    4220:	0f 90       	pop	r0
    4222:	0f 90       	pop	r0
    4224:	cf 91       	pop	r28
    4226:	df 91       	pop	r29
    4228:	08 95       	ret

0000422a <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    422a:	df 93       	push	r29
    422c:	cf 93       	push	r28
    422e:	00 d0       	rcall	.+0      	; 0x4230 <vTaskPlaceOnEventList+0x6>
    4230:	00 d0       	rcall	.+0      	; 0x4232 <vTaskPlaceOnEventList+0x8>
    4232:	00 d0       	rcall	.+0      	; 0x4234 <vTaskPlaceOnEventList+0xa>
    4234:	cd b7       	in	r28, 0x3d	; 61
    4236:	de b7       	in	r29, 0x3e	; 62
    4238:	9c 83       	std	Y+4, r25	; 0x04
    423a:	8b 83       	std	Y+3, r24	; 0x03
    423c:	7e 83       	std	Y+6, r23	; 0x06
    423e:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    4240:	4b 81       	ldd	r20, Y+3	; 0x03
    4242:	5c 81       	ldd	r21, Y+4	; 0x04
    4244:	80 91 7c 05 	lds	r24, 0x057C
    4248:	90 91 7d 05 	lds	r25, 0x057D
    424c:	9c 01       	movw	r18, r24
    424e:	24 5f       	subi	r18, 0xF4	; 244
    4250:	3f 4f       	sbci	r19, 0xFF	; 255
    4252:	ca 01       	movw	r24, r20
    4254:	b9 01       	movw	r22, r18
    4256:	0e 94 18 14 	call	0x2830	; 0x2830 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    425a:	80 91 7c 05 	lds	r24, 0x057C
    425e:	90 91 7d 05 	lds	r25, 0x057D
    4262:	02 96       	adiw	r24, 0x02	; 2
    4264:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    4268:	20 91 80 05 	lds	r18, 0x0580
    426c:	30 91 81 05 	lds	r19, 0x0581
    4270:	8d 81       	ldd	r24, Y+5	; 0x05
    4272:	9e 81       	ldd	r25, Y+6	; 0x06
    4274:	82 0f       	add	r24, r18
    4276:	93 1f       	adc	r25, r19
    4278:	9a 83       	std	Y+2, r25	; 0x02
    427a:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    427c:	89 81       	ldd	r24, Y+1	; 0x01
    427e:	9a 81       	ldd	r25, Y+2	; 0x02
    4280:	0e 94 0f 23 	call	0x461e	; 0x461e <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    4284:	26 96       	adiw	r28, 0x06	; 6
    4286:	0f b6       	in	r0, 0x3f	; 63
    4288:	f8 94       	cli
    428a:	de bf       	out	0x3e, r29	; 62
    428c:	0f be       	out	0x3f, r0	; 63
    428e:	cd bf       	out	0x3d, r28	; 61
    4290:	cf 91       	pop	r28
    4292:	df 91       	pop	r29
    4294:	08 95       	ret

00004296 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    4296:	df 93       	push	r29
    4298:	cf 93       	push	r28
    429a:	00 d0       	rcall	.+0      	; 0x429c <xTaskRemoveFromEventList+0x6>
    429c:	00 d0       	rcall	.+0      	; 0x429e <xTaskRemoveFromEventList+0x8>
    429e:	0f 92       	push	r0
    42a0:	cd b7       	in	r28, 0x3d	; 61
    42a2:	de b7       	in	r29, 0x3e	; 62
    42a4:	9d 83       	std	Y+5, r25	; 0x05
    42a6:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    42a8:	ec 81       	ldd	r30, Y+4	; 0x04
    42aa:	fd 81       	ldd	r31, Y+5	; 0x05
    42ac:	05 80       	ldd	r0, Z+5	; 0x05
    42ae:	f6 81       	ldd	r31, Z+6	; 0x06
    42b0:	e0 2d       	mov	r30, r0
    42b2:	86 81       	ldd	r24, Z+6	; 0x06
    42b4:	97 81       	ldd	r25, Z+7	; 0x07
    42b6:	9b 83       	std	Y+3, r25	; 0x03
    42b8:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    42ba:	8a 81       	ldd	r24, Y+2	; 0x02
    42bc:	9b 81       	ldd	r25, Y+3	; 0x03
    42be:	0c 96       	adiw	r24, 0x0c	; 12
    42c0:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    42c4:	80 91 85 05 	lds	r24, 0x0585
    42c8:	88 23       	and	r24, r24
    42ca:	61 f5       	brne	.+88     	; 0x4324 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    42cc:	8a 81       	ldd	r24, Y+2	; 0x02
    42ce:	9b 81       	ldd	r25, Y+3	; 0x03
    42d0:	02 96       	adiw	r24, 0x02	; 2
    42d2:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    42d6:	ea 81       	ldd	r30, Y+2	; 0x02
    42d8:	fb 81       	ldd	r31, Y+3	; 0x03
    42da:	96 89       	ldd	r25, Z+22	; 0x16
    42dc:	80 91 83 05 	lds	r24, 0x0583
    42e0:	89 17       	cp	r24, r25
    42e2:	28 f4       	brcc	.+10     	; 0x42ee <xTaskRemoveFromEventList+0x58>
    42e4:	ea 81       	ldd	r30, Y+2	; 0x02
    42e6:	fb 81       	ldd	r31, Y+3	; 0x03
    42e8:	86 89       	ldd	r24, Z+22	; 0x16
    42ea:	80 93 83 05 	sts	0x0583, r24
    42ee:	ea 81       	ldd	r30, Y+2	; 0x02
    42f0:	fb 81       	ldd	r31, Y+3	; 0x03
    42f2:	86 89       	ldd	r24, Z+22	; 0x16
    42f4:	28 2f       	mov	r18, r24
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	c9 01       	movw	r24, r18
    42fa:	88 0f       	add	r24, r24
    42fc:	99 1f       	adc	r25, r25
    42fe:	88 0f       	add	r24, r24
    4300:	99 1f       	adc	r25, r25
    4302:	88 0f       	add	r24, r24
    4304:	99 1f       	adc	r25, r25
    4306:	82 0f       	add	r24, r18
    4308:	93 1f       	adc	r25, r19
    430a:	ac 01       	movw	r20, r24
    430c:	46 57       	subi	r20, 0x76	; 118
    430e:	5a 4f       	sbci	r21, 0xFA	; 250
    4310:	8a 81       	ldd	r24, Y+2	; 0x02
    4312:	9b 81       	ldd	r25, Y+3	; 0x03
    4314:	9c 01       	movw	r18, r24
    4316:	2e 5f       	subi	r18, 0xFE	; 254
    4318:	3f 4f       	sbci	r19, 0xFF	; 255
    431a:	ca 01       	movw	r24, r20
    431c:	b9 01       	movw	r22, r18
    431e:	0e 94 cc 13 	call	0x2798	; 0x2798 <vListInsertEnd>
    4322:	0a c0       	rjmp	.+20     	; 0x4338 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4324:	8a 81       	ldd	r24, Y+2	; 0x02
    4326:	9b 81       	ldd	r25, Y+3	; 0x03
    4328:	9c 01       	movw	r18, r24
    432a:	24 5f       	subi	r18, 0xF4	; 244
    432c:	3f 4f       	sbci	r19, 0xFF	; 255
    432e:	81 ef       	ldi	r24, 0xF1	; 241
    4330:	95 e0       	ldi	r25, 0x05	; 5
    4332:	b9 01       	movw	r22, r18
    4334:	0e 94 cc 13 	call	0x2798	; 0x2798 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4338:	ea 81       	ldd	r30, Y+2	; 0x02
    433a:	fb 81       	ldd	r31, Y+3	; 0x03
    433c:	96 89       	ldd	r25, Z+22	; 0x16
    433e:	e0 91 7c 05 	lds	r30, 0x057C
    4342:	f0 91 7d 05 	lds	r31, 0x057D
    4346:	86 89       	ldd	r24, Z+22	; 0x16
    4348:	98 17       	cp	r25, r24
    434a:	18 f0       	brcs	.+6      	; 0x4352 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	89 83       	std	Y+1, r24	; 0x01
    4350:	01 c0       	rjmp	.+2      	; 0x4354 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    4352:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    4354:	89 81       	ldd	r24, Y+1	; 0x01
}
    4356:	0f 90       	pop	r0
    4358:	0f 90       	pop	r0
    435a:	0f 90       	pop	r0
    435c:	0f 90       	pop	r0
    435e:	0f 90       	pop	r0
    4360:	cf 91       	pop	r28
    4362:	df 91       	pop	r29
    4364:	08 95       	ret

00004366 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    4366:	df 93       	push	r29
    4368:	cf 93       	push	r28
    436a:	00 d0       	rcall	.+0      	; 0x436c <vTaskSetTimeOutState+0x6>
    436c:	cd b7       	in	r28, 0x3d	; 61
    436e:	de b7       	in	r29, 0x3e	; 62
    4370:	9a 83       	std	Y+2, r25	; 0x02
    4372:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4374:	80 91 88 05 	lds	r24, 0x0588
    4378:	e9 81       	ldd	r30, Y+1	; 0x01
    437a:	fa 81       	ldd	r31, Y+2	; 0x02
    437c:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    437e:	80 91 80 05 	lds	r24, 0x0580
    4382:	90 91 81 05 	lds	r25, 0x0581
    4386:	e9 81       	ldd	r30, Y+1	; 0x01
    4388:	fa 81       	ldd	r31, Y+2	; 0x02
    438a:	92 83       	std	Z+2, r25	; 0x02
    438c:	81 83       	std	Z+1, r24	; 0x01
}
    438e:	0f 90       	pop	r0
    4390:	0f 90       	pop	r0
    4392:	cf 91       	pop	r28
    4394:	df 91       	pop	r29
    4396:	08 95       	ret

00004398 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    4398:	df 93       	push	r29
    439a:	cf 93       	push	r28
    439c:	00 d0       	rcall	.+0      	; 0x439e <xTaskCheckForTimeOut+0x6>
    439e:	00 d0       	rcall	.+0      	; 0x43a0 <xTaskCheckForTimeOut+0x8>
    43a0:	0f 92       	push	r0
    43a2:	cd b7       	in	r28, 0x3d	; 61
    43a4:	de b7       	in	r29, 0x3e	; 62
    43a6:	9b 83       	std	Y+3, r25	; 0x03
    43a8:	8a 83       	std	Y+2, r24	; 0x02
    43aa:	7d 83       	std	Y+5, r23	; 0x05
    43ac:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    43ae:	0f b6       	in	r0, 0x3f	; 63
    43b0:	f8 94       	cli
    43b2:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    43b4:	ea 81       	ldd	r30, Y+2	; 0x02
    43b6:	fb 81       	ldd	r31, Y+3	; 0x03
    43b8:	90 81       	ld	r25, Z
    43ba:	80 91 88 05 	lds	r24, 0x0588
    43be:	98 17       	cp	r25, r24
    43c0:	71 f0       	breq	.+28     	; 0x43de <xTaskCheckForTimeOut+0x46>
    43c2:	ea 81       	ldd	r30, Y+2	; 0x02
    43c4:	fb 81       	ldd	r31, Y+3	; 0x03
    43c6:	21 81       	ldd	r18, Z+1	; 0x01
    43c8:	32 81       	ldd	r19, Z+2	; 0x02
    43ca:	80 91 80 05 	lds	r24, 0x0580
    43ce:	90 91 81 05 	lds	r25, 0x0581
    43d2:	82 17       	cp	r24, r18
    43d4:	93 07       	cpc	r25, r19
    43d6:	18 f0       	brcs	.+6      	; 0x43de <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    43d8:	81 e0       	ldi	r24, 0x01	; 1
    43da:	89 83       	std	Y+1, r24	; 0x01
    43dc:	2f c0       	rjmp	.+94     	; 0x443c <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    43de:	20 91 80 05 	lds	r18, 0x0580
    43e2:	30 91 81 05 	lds	r19, 0x0581
    43e6:	ea 81       	ldd	r30, Y+2	; 0x02
    43e8:	fb 81       	ldd	r31, Y+3	; 0x03
    43ea:	81 81       	ldd	r24, Z+1	; 0x01
    43ec:	92 81       	ldd	r25, Z+2	; 0x02
    43ee:	28 1b       	sub	r18, r24
    43f0:	39 0b       	sbc	r19, r25
    43f2:	ec 81       	ldd	r30, Y+4	; 0x04
    43f4:	fd 81       	ldd	r31, Y+5	; 0x05
    43f6:	80 81       	ld	r24, Z
    43f8:	91 81       	ldd	r25, Z+1	; 0x01
    43fa:	28 17       	cp	r18, r24
    43fc:	39 07       	cpc	r19, r25
    43fe:	e0 f4       	brcc	.+56     	; 0x4438 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    4400:	ec 81       	ldd	r30, Y+4	; 0x04
    4402:	fd 81       	ldd	r31, Y+5	; 0x05
    4404:	40 81       	ld	r20, Z
    4406:	51 81       	ldd	r21, Z+1	; 0x01
    4408:	ea 81       	ldd	r30, Y+2	; 0x02
    440a:	fb 81       	ldd	r31, Y+3	; 0x03
    440c:	21 81       	ldd	r18, Z+1	; 0x01
    440e:	32 81       	ldd	r19, Z+2	; 0x02
    4410:	80 91 80 05 	lds	r24, 0x0580
    4414:	90 91 81 05 	lds	r25, 0x0581
    4418:	b9 01       	movw	r22, r18
    441a:	68 1b       	sub	r22, r24
    441c:	79 0b       	sbc	r23, r25
    441e:	cb 01       	movw	r24, r22
    4420:	84 0f       	add	r24, r20
    4422:	95 1f       	adc	r25, r21
    4424:	ec 81       	ldd	r30, Y+4	; 0x04
    4426:	fd 81       	ldd	r31, Y+5	; 0x05
    4428:	91 83       	std	Z+1, r25	; 0x01
    442a:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    442c:	8a 81       	ldd	r24, Y+2	; 0x02
    442e:	9b 81       	ldd	r25, Y+3	; 0x03
    4430:	0e 94 b3 21 	call	0x4366	; 0x4366 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    4434:	19 82       	std	Y+1, r1	; 0x01
    4436:	02 c0       	rjmp	.+4      	; 0x443c <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    4438:	81 e0       	ldi	r24, 0x01	; 1
    443a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    443c:	0f 90       	pop	r0
    443e:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    4440:	89 81       	ldd	r24, Y+1	; 0x01
}
    4442:	0f 90       	pop	r0
    4444:	0f 90       	pop	r0
    4446:	0f 90       	pop	r0
    4448:	0f 90       	pop	r0
    444a:	0f 90       	pop	r0
    444c:	cf 91       	pop	r28
    444e:	df 91       	pop	r29
    4450:	08 95       	ret

00004452 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4452:	df 93       	push	r29
    4454:	cf 93       	push	r28
    4456:	cd b7       	in	r28, 0x3d	; 61
    4458:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    445a:	81 e0       	ldi	r24, 0x01	; 1
    445c:	80 93 87 05 	sts	0x0587, r24
}
    4460:	cf 91       	pop	r28
    4462:	df 91       	pop	r29
    4464:	08 95       	ret

00004466 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4466:	df 93       	push	r29
    4468:	cf 93       	push	r28
    446a:	00 d0       	rcall	.+0      	; 0x446c <prvIdleTask+0x6>
    446c:	cd b7       	in	r28, 0x3d	; 61
    446e:	de b7       	in	r29, 0x3e	; 62
    4470:	9a 83       	std	Y+2, r25	; 0x02
    4472:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    4474:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <prvCheckTasksWaitingTermination>
    4478:	fd cf       	rjmp	.-6      	; 0x4474 <prvIdleTask+0xe>

0000447a <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    447a:	0f 93       	push	r16
    447c:	1f 93       	push	r17
    447e:	df 93       	push	r29
    4480:	cf 93       	push	r28
    4482:	cd b7       	in	r28, 0x3d	; 61
    4484:	de b7       	in	r29, 0x3e	; 62
    4486:	29 97       	sbiw	r28, 0x09	; 9
    4488:	0f b6       	in	r0, 0x3f	; 63
    448a:	f8 94       	cli
    448c:	de bf       	out	0x3e, r29	; 62
    448e:	0f be       	out	0x3f, r0	; 63
    4490:	cd bf       	out	0x3d, r28	; 61
    4492:	9a 83       	std	Y+2, r25	; 0x02
    4494:	89 83       	std	Y+1, r24	; 0x01
    4496:	7c 83       	std	Y+4, r23	; 0x04
    4498:	6b 83       	std	Y+3, r22	; 0x03
    449a:	4d 83       	std	Y+5, r20	; 0x05
    449c:	3f 83       	std	Y+7, r19	; 0x07
    449e:	2e 83       	std	Y+6, r18	; 0x06
    44a0:	19 87       	std	Y+9, r17	; 0x09
    44a2:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    44a4:	89 81       	ldd	r24, Y+1	; 0x01
    44a6:	9a 81       	ldd	r25, Y+2	; 0x02
    44a8:	49 96       	adiw	r24, 0x19	; 25
    44aa:	2b 81       	ldd	r18, Y+3	; 0x03
    44ac:	3c 81       	ldd	r19, Y+4	; 0x04
    44ae:	b9 01       	movw	r22, r18
    44b0:	48 e0       	ldi	r20, 0x08	; 8
    44b2:	50 e0       	ldi	r21, 0x00	; 0
    44b4:	0e 94 11 24 	call	0x4822	; 0x4822 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    44b8:	e9 81       	ldd	r30, Y+1	; 0x01
    44ba:	fa 81       	ldd	r31, Y+2	; 0x02
    44bc:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    44be:	8d 81       	ldd	r24, Y+5	; 0x05
    44c0:	89 30       	cpi	r24, 0x09	; 9
    44c2:	10 f0       	brcs	.+4      	; 0x44c8 <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    44c4:	88 e0       	ldi	r24, 0x08	; 8
    44c6:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    44c8:	e9 81       	ldd	r30, Y+1	; 0x01
    44ca:	fa 81       	ldd	r31, Y+2	; 0x02
    44cc:	8d 81       	ldd	r24, Y+5	; 0x05
    44ce:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    44d0:	89 81       	ldd	r24, Y+1	; 0x01
    44d2:	9a 81       	ldd	r25, Y+2	; 0x02
    44d4:	02 96       	adiw	r24, 0x02	; 2
    44d6:	0e 94 bc 13 	call	0x2778	; 0x2778 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    44da:	89 81       	ldd	r24, Y+1	; 0x01
    44dc:	9a 81       	ldd	r25, Y+2	; 0x02
    44de:	0c 96       	adiw	r24, 0x0c	; 12
    44e0:	0e 94 bc 13 	call	0x2778	; 0x2778 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    44e4:	e9 81       	ldd	r30, Y+1	; 0x01
    44e6:	fa 81       	ldd	r31, Y+2	; 0x02
    44e8:	89 81       	ldd	r24, Y+1	; 0x01
    44ea:	9a 81       	ldd	r25, Y+2	; 0x02
    44ec:	91 87       	std	Z+9, r25	; 0x09
    44ee:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    44f0:	8d 81       	ldd	r24, Y+5	; 0x05
    44f2:	28 2f       	mov	r18, r24
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	89 e0       	ldi	r24, 0x09	; 9
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	82 1b       	sub	r24, r18
    44fc:	93 0b       	sbc	r25, r19
    44fe:	e9 81       	ldd	r30, Y+1	; 0x01
    4500:	fa 81       	ldd	r31, Y+2	; 0x02
    4502:	95 87       	std	Z+13, r25	; 0x0d
    4504:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    4506:	e9 81       	ldd	r30, Y+1	; 0x01
    4508:	fa 81       	ldd	r31, Y+2	; 0x02
    450a:	89 81       	ldd	r24, Y+1	; 0x01
    450c:	9a 81       	ldd	r25, Y+2	; 0x02
    450e:	93 8b       	std	Z+19, r25	; 0x13
    4510:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    4512:	29 96       	adiw	r28, 0x09	; 9
    4514:	0f b6       	in	r0, 0x3f	; 63
    4516:	f8 94       	cli
    4518:	de bf       	out	0x3e, r29	; 62
    451a:	0f be       	out	0x3f, r0	; 63
    451c:	cd bf       	out	0x3d, r28	; 61
    451e:	cf 91       	pop	r28
    4520:	df 91       	pop	r29
    4522:	1f 91       	pop	r17
    4524:	0f 91       	pop	r16
    4526:	08 95       	ret

00004528 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    4528:	df 93       	push	r29
    452a:	cf 93       	push	r28
    452c:	0f 92       	push	r0
    452e:	cd b7       	in	r28, 0x3d	; 61
    4530:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    4532:	19 82       	std	Y+1, r1	; 0x01
    4534:	13 c0       	rjmp	.+38     	; 0x455c <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    4536:	89 81       	ldd	r24, Y+1	; 0x01
    4538:	28 2f       	mov	r18, r24
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	c9 01       	movw	r24, r18
    453e:	88 0f       	add	r24, r24
    4540:	99 1f       	adc	r25, r25
    4542:	88 0f       	add	r24, r24
    4544:	99 1f       	adc	r25, r25
    4546:	88 0f       	add	r24, r24
    4548:	99 1f       	adc	r25, r25
    454a:	82 0f       	add	r24, r18
    454c:	93 1f       	adc	r25, r19
    454e:	86 57       	subi	r24, 0x76	; 118
    4550:	9a 4f       	sbci	r25, 0xFA	; 250
    4552:	0e 94 92 13 	call	0x2724	; 0x2724 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    4556:	89 81       	ldd	r24, Y+1	; 0x01
    4558:	8f 5f       	subi	r24, 0xFF	; 255
    455a:	89 83       	std	Y+1, r24	; 0x01
    455c:	89 81       	ldd	r24, Y+1	; 0x01
    455e:	89 30       	cpi	r24, 0x09	; 9
    4560:	50 f3       	brcs	.-44     	; 0x4536 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    4562:	8b ed       	ldi	r24, 0xDB	; 219
    4564:	95 e0       	ldi	r25, 0x05	; 5
    4566:	0e 94 92 13 	call	0x2724	; 0x2724 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    456a:	84 ee       	ldi	r24, 0xE4	; 228
    456c:	95 e0       	ldi	r25, 0x05	; 5
    456e:	0e 94 92 13 	call	0x2724	; 0x2724 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    4572:	81 ef       	ldi	r24, 0xF1	; 241
    4574:	95 e0       	ldi	r25, 0x05	; 5
    4576:	0e 94 92 13 	call	0x2724	; 0x2724 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    457a:	8a ef       	ldi	r24, 0xFA	; 250
    457c:	95 e0       	ldi	r25, 0x05	; 5
    457e:	0e 94 92 13 	call	0x2724	; 0x2724 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    4582:	8b ed       	ldi	r24, 0xDB	; 219
    4584:	95 e0       	ldi	r25, 0x05	; 5
    4586:	90 93 ee 05 	sts	0x05EE, r25
    458a:	80 93 ed 05 	sts	0x05ED, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    458e:	84 ee       	ldi	r24, 0xE4	; 228
    4590:	95 e0       	ldi	r25, 0x05	; 5
    4592:	90 93 f0 05 	sts	0x05F0, r25
    4596:	80 93 ef 05 	sts	0x05EF, r24
}
    459a:	0f 90       	pop	r0
    459c:	cf 91       	pop	r28
    459e:	df 91       	pop	r29
    45a0:	08 95       	ret

000045a2 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    45a2:	df 93       	push	r29
    45a4:	cf 93       	push	r28
    45a6:	00 d0       	rcall	.+0      	; 0x45a8 <prvCheckTasksWaitingTermination+0x6>
    45a8:	0f 92       	push	r0
    45aa:	cd b7       	in	r28, 0x3d	; 61
    45ac:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    45ae:	80 91 7e 05 	lds	r24, 0x057E
    45b2:	88 23       	and	r24, r24
    45b4:	71 f1       	breq	.+92     	; 0x4612 <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    45b6:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    45ba:	80 91 fa 05 	lds	r24, 0x05FA
    45be:	1b 82       	std	Y+3, r1	; 0x03
    45c0:	88 23       	and	r24, r24
    45c2:	11 f4       	brne	.+4      	; 0x45c8 <prvCheckTasksWaitingTermination+0x26>
    45c4:	81 e0       	ldi	r24, 0x01	; 1
    45c6:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    45c8:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    45cc:	8b 81       	ldd	r24, Y+3	; 0x03
    45ce:	88 23       	and	r24, r24
    45d0:	01 f5       	brne	.+64     	; 0x4612 <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    45d2:	0f b6       	in	r0, 0x3f	; 63
    45d4:	f8 94       	cli
    45d6:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    45d8:	e0 91 ff 05 	lds	r30, 0x05FF
    45dc:	f0 91 00 06 	lds	r31, 0x0600
    45e0:	86 81       	ldd	r24, Z+6	; 0x06
    45e2:	97 81       	ldd	r25, Z+7	; 0x07
    45e4:	9a 83       	std	Y+2, r25	; 0x02
    45e6:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    45e8:	89 81       	ldd	r24, Y+1	; 0x01
    45ea:	9a 81       	ldd	r25, Y+2	; 0x02
    45ec:	02 96       	adiw	r24, 0x02	; 2
    45ee:	0e 94 84 14 	call	0x2908	; 0x2908 <vListRemove>
					--uxCurrentNumberOfTasks;
    45f2:	80 91 7f 05 	lds	r24, 0x057F
    45f6:	81 50       	subi	r24, 0x01	; 1
    45f8:	80 93 7f 05 	sts	0x057F, r24
					--uxTasksDeleted;
    45fc:	80 91 7e 05 	lds	r24, 0x057E
    4600:	81 50       	subi	r24, 0x01	; 1
    4602:	80 93 7e 05 	sts	0x057E, r24
				}
				taskEXIT_CRITICAL();
    4606:	0f 90       	pop	r0
    4608:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    460a:	89 81       	ldd	r24, Y+1	; 0x01
    460c:	9a 81       	ldd	r25, Y+2	; 0x02
    460e:	0e 94 a8 23 	call	0x4750	; 0x4750 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    4612:	0f 90       	pop	r0
    4614:	0f 90       	pop	r0
    4616:	0f 90       	pop	r0
    4618:	cf 91       	pop	r28
    461a:	df 91       	pop	r29
    461c:	08 95       	ret

0000461e <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    461e:	df 93       	push	r29
    4620:	cf 93       	push	r28
    4622:	00 d0       	rcall	.+0      	; 0x4624 <prvAddCurrentTaskToDelayedList+0x6>
    4624:	cd b7       	in	r28, 0x3d	; 61
    4626:	de b7       	in	r29, 0x3e	; 62
    4628:	9a 83       	std	Y+2, r25	; 0x02
    462a:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    462c:	e0 91 7c 05 	lds	r30, 0x057C
    4630:	f0 91 7d 05 	lds	r31, 0x057D
    4634:	89 81       	ldd	r24, Y+1	; 0x01
    4636:	9a 81       	ldd	r25, Y+2	; 0x02
    4638:	93 83       	std	Z+3, r25	; 0x03
    463a:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    463c:	20 91 80 05 	lds	r18, 0x0580
    4640:	30 91 81 05 	lds	r19, 0x0581
    4644:	89 81       	ldd	r24, Y+1	; 0x01
    4646:	9a 81       	ldd	r25, Y+2	; 0x02
    4648:	82 17       	cp	r24, r18
    464a:	93 07       	cpc	r25, r19
    464c:	70 f4       	brcc	.+28     	; 0x466a <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    464e:	80 91 ef 05 	lds	r24, 0x05EF
    4652:	90 91 f0 05 	lds	r25, 0x05F0
    4656:	20 91 7c 05 	lds	r18, 0x057C
    465a:	30 91 7d 05 	lds	r19, 0x057D
    465e:	2e 5f       	subi	r18, 0xFE	; 254
    4660:	3f 4f       	sbci	r19, 0xFF	; 255
    4662:	b9 01       	movw	r22, r18
    4664:	0e 94 18 14 	call	0x2830	; 0x2830 <vListInsert>
    4668:	1e c0       	rjmp	.+60     	; 0x46a6 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    466a:	40 91 ed 05 	lds	r20, 0x05ED
    466e:	50 91 ee 05 	lds	r21, 0x05EE
    4672:	80 91 7c 05 	lds	r24, 0x057C
    4676:	90 91 7d 05 	lds	r25, 0x057D
    467a:	9c 01       	movw	r18, r24
    467c:	2e 5f       	subi	r18, 0xFE	; 254
    467e:	3f 4f       	sbci	r19, 0xFF	; 255
    4680:	ca 01       	movw	r24, r20
    4682:	b9 01       	movw	r22, r18
    4684:	0e 94 18 14 	call	0x2830	; 0x2830 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    4688:	20 91 8e 00 	lds	r18, 0x008E
    468c:	30 91 8f 00 	lds	r19, 0x008F
    4690:	89 81       	ldd	r24, Y+1	; 0x01
    4692:	9a 81       	ldd	r25, Y+2	; 0x02
    4694:	82 17       	cp	r24, r18
    4696:	93 07       	cpc	r25, r19
    4698:	30 f4       	brcc	.+12     	; 0x46a6 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    469a:	89 81       	ldd	r24, Y+1	; 0x01
    469c:	9a 81       	ldd	r25, Y+2	; 0x02
    469e:	90 93 8f 00 	sts	0x008F, r25
    46a2:	80 93 8e 00 	sts	0x008E, r24
		}
	}
}
    46a6:	0f 90       	pop	r0
    46a8:	0f 90       	pop	r0
    46aa:	cf 91       	pop	r28
    46ac:	df 91       	pop	r29
    46ae:	08 95       	ret

000046b0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    46b0:	df 93       	push	r29
    46b2:	cf 93       	push	r28
    46b4:	cd b7       	in	r28, 0x3d	; 61
    46b6:	de b7       	in	r29, 0x3e	; 62
    46b8:	28 97       	sbiw	r28, 0x08	; 8
    46ba:	0f b6       	in	r0, 0x3f	; 63
    46bc:	f8 94       	cli
    46be:	de bf       	out	0x3e, r29	; 62
    46c0:	0f be       	out	0x3f, r0	; 63
    46c2:	cd bf       	out	0x3d, r28	; 61
    46c4:	9c 83       	std	Y+4, r25	; 0x04
    46c6:	8b 83       	std	Y+3, r24	; 0x03
    46c8:	7e 83       	std	Y+6, r23	; 0x06
    46ca:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    46cc:	81 e2       	ldi	r24, 0x21	; 33
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	0e 94 26 13 	call	0x264c	; 0x264c <pvPortMalloc>
    46d4:	9a 83       	std	Y+2, r25	; 0x02
    46d6:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    46d8:	89 81       	ldd	r24, Y+1	; 0x01
    46da:	9a 81       	ldd	r25, Y+2	; 0x02
    46dc:	00 97       	sbiw	r24, 0x00	; 0
    46de:	69 f1       	breq	.+90     	; 0x473a <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    46e0:	8d 81       	ldd	r24, Y+5	; 0x05
    46e2:	9e 81       	ldd	r25, Y+6	; 0x06
    46e4:	00 97       	sbiw	r24, 0x00	; 0
    46e6:	39 f4       	brne	.+14     	; 0x46f6 <prvAllocateTCBAndStack+0x46>
    46e8:	8b 81       	ldd	r24, Y+3	; 0x03
    46ea:	9c 81       	ldd	r25, Y+4	; 0x04
    46ec:	0e 94 26 13 	call	0x264c	; 0x264c <pvPortMalloc>
    46f0:	98 87       	std	Y+8, r25	; 0x08
    46f2:	8f 83       	std	Y+7, r24	; 0x07
    46f4:	04 c0       	rjmp	.+8      	; 0x46fe <prvAllocateTCBAndStack+0x4e>
    46f6:	8d 81       	ldd	r24, Y+5	; 0x05
    46f8:	9e 81       	ldd	r25, Y+6	; 0x06
    46fa:	98 87       	std	Y+8, r25	; 0x08
    46fc:	8f 83       	std	Y+7, r24	; 0x07
    46fe:	e9 81       	ldd	r30, Y+1	; 0x01
    4700:	fa 81       	ldd	r31, Y+2	; 0x02
    4702:	8f 81       	ldd	r24, Y+7	; 0x07
    4704:	98 85       	ldd	r25, Y+8	; 0x08
    4706:	90 8f       	std	Z+24, r25	; 0x18
    4708:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    470a:	e9 81       	ldd	r30, Y+1	; 0x01
    470c:	fa 81       	ldd	r31, Y+2	; 0x02
    470e:	87 89       	ldd	r24, Z+23	; 0x17
    4710:	90 8d       	ldd	r25, Z+24	; 0x18
    4712:	00 97       	sbiw	r24, 0x00	; 0
    4714:	39 f4       	brne	.+14     	; 0x4724 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    4716:	89 81       	ldd	r24, Y+1	; 0x01
    4718:	9a 81       	ldd	r25, Y+2	; 0x02
    471a:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <vPortFree>
			pxNewTCB = NULL;
    471e:	1a 82       	std	Y+2, r1	; 0x02
    4720:	19 82       	std	Y+1, r1	; 0x01
    4722:	0b c0       	rjmp	.+22     	; 0x473a <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    4724:	e9 81       	ldd	r30, Y+1	; 0x01
    4726:	fa 81       	ldd	r31, Y+2	; 0x02
    4728:	87 89       	ldd	r24, Z+23	; 0x17
    472a:	90 8d       	ldd	r25, Z+24	; 0x18
    472c:	2b 81       	ldd	r18, Y+3	; 0x03
    472e:	3c 81       	ldd	r19, Y+4	; 0x04
    4730:	65 ea       	ldi	r22, 0xA5	; 165
    4732:	70 e0       	ldi	r23, 0x00	; 0
    4734:	a9 01       	movw	r20, r18
    4736:	0e 94 0a 24 	call	0x4814	; 0x4814 <memset>
		}
	}

	return pxNewTCB;
    473a:	89 81       	ldd	r24, Y+1	; 0x01
    473c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    473e:	28 96       	adiw	r28, 0x08	; 8
    4740:	0f b6       	in	r0, 0x3f	; 63
    4742:	f8 94       	cli
    4744:	de bf       	out	0x3e, r29	; 62
    4746:	0f be       	out	0x3f, r0	; 63
    4748:	cd bf       	out	0x3d, r28	; 61
    474a:	cf 91       	pop	r28
    474c:	df 91       	pop	r29
    474e:	08 95       	ret

00004750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    4750:	df 93       	push	r29
    4752:	cf 93       	push	r28
    4754:	00 d0       	rcall	.+0      	; 0x4756 <prvDeleteTCB+0x6>
    4756:	cd b7       	in	r28, 0x3d	; 61
    4758:	de b7       	in	r29, 0x3e	; 62
    475a:	9a 83       	std	Y+2, r25	; 0x02
    475c:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    475e:	e9 81       	ldd	r30, Y+1	; 0x01
    4760:	fa 81       	ldd	r31, Y+2	; 0x02
    4762:	87 89       	ldd	r24, Z+23	; 0x17
    4764:	90 8d       	ldd	r25, Z+24	; 0x18
    4766:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <vPortFree>
		vPortFree( pxTCB );
    476a:	89 81       	ldd	r24, Y+1	; 0x01
    476c:	9a 81       	ldd	r25, Y+2	; 0x02
    476e:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <vPortFree>
	}
    4772:	0f 90       	pop	r0
    4774:	0f 90       	pop	r0
    4776:	cf 91       	pop	r28
    4778:	df 91       	pop	r29
    477a:	08 95       	ret

0000477c <__udivmodqi4>:
    477c:	99 1b       	sub	r25, r25
    477e:	79 e0       	ldi	r23, 0x09	; 9
    4780:	04 c0       	rjmp	.+8      	; 0x478a <__udivmodqi4_ep>

00004782 <__udivmodqi4_loop>:
    4782:	99 1f       	adc	r25, r25
    4784:	96 17       	cp	r25, r22
    4786:	08 f0       	brcs	.+2      	; 0x478a <__udivmodqi4_ep>
    4788:	96 1b       	sub	r25, r22

0000478a <__udivmodqi4_ep>:
    478a:	88 1f       	adc	r24, r24
    478c:	7a 95       	dec	r23
    478e:	c9 f7       	brne	.-14     	; 0x4782 <__udivmodqi4_loop>
    4790:	80 95       	com	r24
    4792:	08 95       	ret

00004794 <__prologue_saves__>:
    4794:	2f 92       	push	r2
    4796:	3f 92       	push	r3
    4798:	4f 92       	push	r4
    479a:	5f 92       	push	r5
    479c:	6f 92       	push	r6
    479e:	7f 92       	push	r7
    47a0:	8f 92       	push	r8
    47a2:	9f 92       	push	r9
    47a4:	af 92       	push	r10
    47a6:	bf 92       	push	r11
    47a8:	cf 92       	push	r12
    47aa:	df 92       	push	r13
    47ac:	ef 92       	push	r14
    47ae:	ff 92       	push	r15
    47b0:	0f 93       	push	r16
    47b2:	1f 93       	push	r17
    47b4:	cf 93       	push	r28
    47b6:	df 93       	push	r29
    47b8:	cd b7       	in	r28, 0x3d	; 61
    47ba:	de b7       	in	r29, 0x3e	; 62
    47bc:	ca 1b       	sub	r28, r26
    47be:	db 0b       	sbc	r29, r27
    47c0:	0f b6       	in	r0, 0x3f	; 63
    47c2:	f8 94       	cli
    47c4:	de bf       	out	0x3e, r29	; 62
    47c6:	0f be       	out	0x3f, r0	; 63
    47c8:	cd bf       	out	0x3d, r28	; 61
    47ca:	09 94       	ijmp

000047cc <__epilogue_restores__>:
    47cc:	2a 88       	ldd	r2, Y+18	; 0x12
    47ce:	39 88       	ldd	r3, Y+17	; 0x11
    47d0:	48 88       	ldd	r4, Y+16	; 0x10
    47d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    47d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    47d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    47d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    47da:	9b 84       	ldd	r9, Y+11	; 0x0b
    47dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    47de:	b9 84       	ldd	r11, Y+9	; 0x09
    47e0:	c8 84       	ldd	r12, Y+8	; 0x08
    47e2:	df 80       	ldd	r13, Y+7	; 0x07
    47e4:	ee 80       	ldd	r14, Y+6	; 0x06
    47e6:	fd 80       	ldd	r15, Y+5	; 0x05
    47e8:	0c 81       	ldd	r16, Y+4	; 0x04
    47ea:	1b 81       	ldd	r17, Y+3	; 0x03
    47ec:	aa 81       	ldd	r26, Y+2	; 0x02
    47ee:	b9 81       	ldd	r27, Y+1	; 0x01
    47f0:	ce 0f       	add	r28, r30
    47f2:	d1 1d       	adc	r29, r1
    47f4:	0f b6       	in	r0, 0x3f	; 63
    47f6:	f8 94       	cli
    47f8:	de bf       	out	0x3e, r29	; 62
    47fa:	0f be       	out	0x3f, r0	; 63
    47fc:	cd bf       	out	0x3d, r28	; 61
    47fe:	ed 01       	movw	r28, r26
    4800:	08 95       	ret

00004802 <memcpy>:
    4802:	fb 01       	movw	r30, r22
    4804:	dc 01       	movw	r26, r24
    4806:	02 c0       	rjmp	.+4      	; 0x480c <memcpy+0xa>
    4808:	01 90       	ld	r0, Z+
    480a:	0d 92       	st	X+, r0
    480c:	41 50       	subi	r20, 0x01	; 1
    480e:	50 40       	sbci	r21, 0x00	; 0
    4810:	d8 f7       	brcc	.-10     	; 0x4808 <memcpy+0x6>
    4812:	08 95       	ret

00004814 <memset>:
    4814:	dc 01       	movw	r26, r24
    4816:	01 c0       	rjmp	.+2      	; 0x481a <memset+0x6>
    4818:	6d 93       	st	X+, r22
    481a:	41 50       	subi	r20, 0x01	; 1
    481c:	50 40       	sbci	r21, 0x00	; 0
    481e:	e0 f7       	brcc	.-8      	; 0x4818 <memset+0x4>
    4820:	08 95       	ret

00004822 <strncpy>:
    4822:	fb 01       	movw	r30, r22
    4824:	dc 01       	movw	r26, r24
    4826:	41 50       	subi	r20, 0x01	; 1
    4828:	50 40       	sbci	r21, 0x00	; 0
    482a:	48 f0       	brcs	.+18     	; 0x483e <strncpy+0x1c>
    482c:	01 90       	ld	r0, Z+
    482e:	0d 92       	st	X+, r0
    4830:	00 20       	and	r0, r0
    4832:	c9 f7       	brne	.-14     	; 0x4826 <strncpy+0x4>
    4834:	01 c0       	rjmp	.+2      	; 0x4838 <strncpy+0x16>
    4836:	1d 92       	st	X+, r1
    4838:	41 50       	subi	r20, 0x01	; 1
    483a:	50 40       	sbci	r21, 0x00	; 0
    483c:	e0 f7       	brcc	.-8      	; 0x4836 <strncpy+0x14>
    483e:	08 95       	ret

00004840 <_exit>:
    4840:	f8 94       	cli

00004842 <__stop_program>:
    4842:	ff cf       	rjmp	.-2      	; 0x4842 <__stop_program>
